{"version":3,"file":"ng2-activiti-processlist/bundles/ng2-activiti-processlist.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6****","webpack:///webpack/bootstrap b7ef3555f7a1d27de299?877f****","webpack:///external \"@angular/core\"?73d1****","webpack:///external \"ng2-alfresco-core\"?bd09***","webpack:///external \"ng2-alfresco-datatable\"?b0f0*","webpack:///./~/css-loader/lib/css-base.js?da04**","webpack:///./ng2-activiti-processlist/src/models/filter-process.model.ts","webpack:///./ng2-activiti-processlist/src/models/process-definition.model.ts","webpack:///./ng2-activiti-processlist/src/models/process-instance-variable.model.ts","webpack:///./ng2-activiti-processlist/src/components/process-audit.directive.ts","webpack:///./ng2-activiti-processlist/src/services/process-upload.service.ts","webpack:///external \"@angular/common\"?a5c7*","webpack:///./ng2-activiti-processlist/src/services/process.service.ts","webpack:///./ng2-activiti-processlist/src/models/process-instance-filter.model.ts","webpack:///external \"rxjs/Rx\"?3be5****","webpack:///external \"rxjs/Observable\"?16be**","webpack:///external \"ng2-activiti-form\"?a6ab","webpack:///external \"@angular/material\"?8d30***","webpack:///./ng2-activiti-processlist/src/components/process-instance-header.component.ts","webpack:///./ng2-activiti-processlist/src/components/process-instance-tasks.component.ts","webpack:///./ng2-activiti-processlist/src/assets/images/empty_doc_lib.svg","webpack:///./ng2-activiti-processlist/src/components/create-process-attachment.component.css","webpack:///./ng2-activiti-processlist/src/components/process-comments.component.css","webpack:///./ng2-activiti-processlist/src/components/process-instance-details.component.css","webpack:///./ng2-activiti-processlist/src/components/process-instance-header.component.css","webpack:///./ng2-activiti-processlist/src/components/process-instance-tasks.component.css","webpack:///./ng2-activiti-processlist/src/components/process-instance-variables.component.css","webpack:///./ng2-activiti-processlist/src/components/process-attachment-list.component.ts","webpack:///./ng2-activiti-processlist/src/components/processlist.component.css","webpack:///./ng2-activiti-processlist/src/components/process-comments.component.ts","webpack:///./ng2-activiti-processlist/src/components/create-process-attachment.component.css?eb57","webpack:///./ng2-activiti-processlist/src/components/process-comments.component.css?5793","webpack:///./ng2-activiti-processlist/src/components/process-instance-details.component.css?1cd8","webpack:///./ng2-activiti-processlist/src/components/process-instance-header.component.css?02f1","webpack:///./ng2-activiti-processlist/src/components/process-instance-tasks.component.css?377b","webpack:///./ng2-activiti-processlist/src/components/process-instance-variables.component.css?f099","webpack:///./ng2-activiti-processlist/src/components/processlist.component.css?8888","webpack:///./ng2-activiti-processlist/src/components/process-filters.component.ts","webpack:///./ng2-activiti-processlist/src/components/process-instance-details.component.ts","webpack:///./ng2-activiti-processlist/src/components/process-instance-variables.component.ts","webpack:///./ng2-activiti-processlist/src/components/processlist.component.ts","webpack:///./ng2-activiti-processlist/src/components/start-process.component.ts","webpack:///./ng2-activiti-processlist/src/components/create-process-attachment.component.html","webpack:///./ng2-activiti-processlist/src/components/process-attachment-list.component.html","webpack:///./ng2-activiti-processlist/src/components/process-comments.component.html","webpack:///./ng2-activiti-processlist/src/components/process-filters.component.html","webpack:///./ng2-activiti-processlist/src/components/process-instance-details.component.html","webpack:///./ng2-activiti-processlist/src/components/process-instance-header.component.html","webpack:///./ng2-activiti-processlist/src/components/process-instance-tasks.component.html","webpack:///./ng2-activiti-processlist/src/components/process-instance-variables.component.html","webpack:///./ng2-activiti-processlist/src/components/processlist.component.html","webpack:///./ng2-activiti-processlist/src/components/start-process.component.html","webpack:///./ng2-activiti-processlist/src/components/process-attachment-list.component.scss","webpack:///./ng2-activiti-processlist/src/components/process-filters.component.scss","webpack:///./ng2-activiti-processlist/src/components/start-process.component.scss","webpack:///./ng2-activiti-processlist/src/components/process-attachment-list.component.scss?2f3d","webpack:///./ng2-activiti-processlist/src/components/process-filters.component.scss?1a60","webpack:///./ng2-activiti-processlist/src/components/start-process.component.scss?aa51","webpack:///./ng2-activiti-processlist/src/components/create-process-attachment.component.ts","webpack:///./ng2-activiti-processlist/index.ts","webpack:///./ng2-activiti-processlist/src/models/process-instance.model.ts","webpack:///external \"ng2-activiti-tasklist\""],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"ng2-alfresco-datatable\"), require(\"@angular/common\"), require(\"rxjs/Observable\"), require(\"ng2-activiti-form\"), require(\"ng2-activiti-tasklist\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"ng2-alfresco-core\", \"rxjs/Rx\", \"@angular/material\", \"ng2-alfresco-datatable\", \"@angular/common\", \"rxjs/Observable\", \"ng2-activiti-form\", \"ng2-activiti-tasklist\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-activiti-processlist\"] = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"ng2-alfresco-datatable\"), require(\"@angular/common\"), require(\"rxjs/Observable\"), require(\"ng2-activiti-form\"), require(\"ng2-activiti-tasklist\"));\n\telse\n\t\troot[\"ng2-activiti-processlist\"] = factory(root[\"@angular/core\"], root[\"ng2-alfresco-core\"], root[\"rxjs/Rx\"], root[\"@angular/material\"], root[\"ng2-alfresco-datatable\"], root[\"@angular/common\"], root[\"rxjs/Observable\"], root[\"ng2-activiti-form\"], root[\"ng2-activiti-tasklist\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_86__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 819);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b7ef3555f7a1d27de299","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 1\n// module chunks = 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-datatable\"\n// module id = 10\n// module chunks = 2 3 4 6 15","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 11\n// module chunks = 0 2 3 4 8","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent the filter.\n *\n *\n * @returns {FilterProcessRepresentationModel} .\n */\nexport class FilterProcessRepresentationModel {\n    id: string;\n    appId: string;\n    name: string;\n    recent: boolean;\n    icon: string;\n    filter: ProcessFilterParamRepresentationModel;\n    index: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = obj.filter || null;\n            this.index = obj.index;\n        }\n    }\n\n    hasFilter() {\n        return this.filter ? true : false;\n    }\n}\n\n/**\n *\n * This object represent the parameters to filter a filter.\n *\n *\n * @returns {FilterParamsModel} .\n */\nexport class FilterParamsModel {\n    id: string;\n    name: string;\n    index: number;\n\n    constructor(obj?: any) {\n        this.id = obj.id || null;\n        this.name = obj.name || null;\n        this.index = obj.index;\n    }\n}\n\n/**\n *\n * This object represent the parameters of a process filter.\n *\n *\n * @returns {ProcessFilterParamRepresentationModel} .\n */\nexport class ProcessFilterParamRepresentationModel {\n    state: string;\n    sort: string;\n\n    constructor(obj?: any) {\n        this.state = obj.state || null;\n        this.sort = obj.sort || null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/models/filter-process.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessDefinitionRepresentation {\n    id: string;\n    name: string;\n    description: string;\n    key: string;\n    category: string;\n    version: number;\n    deploymentId: string;\n    tenantId: string;\n    metaDataValues: any[];\n    hasStartForm: boolean;\n\n    constructor(obj?: any) {\n        this.id = obj && obj.id || null;\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.key = obj && obj.key || null;\n        this.category = obj && obj.category || null;\n        this.version = obj && obj.version || 0;\n        this.deploymentId = obj && obj.deploymentId || null;\n        this.tenantId = obj && obj.tenantId || null;\n        this.metaDataValues = obj && obj.metaDataValues || [];\n        this.hasStartForm = obj && obj.hasStartForm === true ? true : false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/models/process-definition.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessInstanceVariable {\n    name: string;\n    scope: string;\n    value: any;\n\n    constructor(obj?: any) {\n        this.name = obj && obj.name !== undefined ? obj.name : null;\n        this.scope = obj && obj.scope !== undefined ? obj.scope : null;\n        this.value = obj && obj.value !== undefined ? obj.value : null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/models/process-instance-variable.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { ContentService } from 'ng2-alfresco-core';\nimport { ProcessService } from './../services/process.service';\n\nconst JSON_FORMAT: string = 'json';\nconst PDF_FORMAT: string = 'pdf';\n\n@Directive({\n    selector: 'button[adf-process-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n})\nexport class ProcessAuditDirective implements OnInit, OnChanges {\n\n    @Input('process-id')\n    processId: string;\n\n    @Input()\n    fileName: string = 'Audit';\n\n    @Input()\n    format: string = 'pdf';\n\n    @Input()\n    download: boolean = true;\n\n    @Output()\n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    public audit: any;\n\n    /**\n     *\n     * @param translateService\n     * @param processListService\n     */\n    constructor(private contentService: ContentService,\n                private processListService: ProcessService) {\n    }\n\n    ngOnInit() {\n        console.log('OnInit');\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n\n    isValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n\n    setDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n\n    /**\n     * fetch the audit information in the requested format\n     */\n    fetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.processListService.fetchProcessAuditPdfById(this.processId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.processListService.fetchProcessAuditJsonById(this.processId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    onClickAudit() {\n        this.fetchAuditInfo();\n    }\n\n    isJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n\n    isPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-audit.directive.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, UploadService } from 'ng2-alfresco-core';\n\n@Injectable()\nexport class ProcessUploadService extends UploadService {\n\n    instanceApi: AlfrescoApiService;\n\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n        this.instanceApi = apiService;\n    }\n\n    getUploadPromise(file: any) {\n        let opts = {\n            isRelatedContent: true\n        };\n        let processId = file.options.parentId;\n        return this.instanceApi.getInstance().activiti.contentApi.createRelatedContentOnProcessInstance(processId, file.file, opts);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/services/process-upload.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/common\"\n// module id = 13\n// module chunks = 1 3 4 6 9","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { RestVariable } from 'alfresco-js-api';\nimport {\n    Comment,\n    TaskDetailsModel,\n    TaskListService,\n    User } from 'ng2-activiti-tasklist';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Observable';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport { ProcessDefinitionRepresentation } from '../models/process-definition.model';\nimport { ProcessFilterRequestRepresentation } from '../models/process-instance-filter.model';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessInstanceVariable } from './../models/process-instance-variable.model';\n\ndeclare let moment: any;\n\n@Injectable()\nexport class ProcessService extends TaskListService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService,\n                private processLogService: LogService) {\n        super(alfrescoApiService, processLogService);\n    }\n\n    getProcessInstances(requestNode: ProcessFilterRequestRepresentation): Observable<ProcessInstance[]> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))\n            .map((res: any) => {\n                if (requestNode.processDefinitionKey) {\n                    return res.data.filter(process => process.processDefinitionKey === requestNode.processDefinitionKey);\n                } else {\n                    return res.data;\n                }\n            }).catch(err => this.handleProcessError(err));\n    }\n\n    getProcessFilters(appId: string): Observable<FilterProcessRepresentationModel[]> {\n        return Observable.fromPromise(this.callApiProcessFilters(appId))\n            .map((response: any) => {\n                let filters: FilterProcessRepresentationModel[] = [];\n                response.data.forEach((filter: FilterProcessRepresentationModel) => {\n                    let filterModel = new FilterProcessRepresentationModel(filter);\n                    filters.push(filterModel);\n                });\n                return filters;\n            })\n            .catch(err => this.handleProcessError(err));\n    }\n\n    /**\n     * Retrieve the process filter by id\n     * @param filterId - number - The id of the filter\n     * @param appId - string - optional - The id of app\n     * @returns {Observable<FilterProcessRepresentationModel>}\n     */\n    getProcessFilterById(filterId: number, appId?: string): Observable<FilterProcessRepresentationModel> {\n        return Observable.fromPromise(this.callApiProcessFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.id === filterId);\n            }).catch(err => this.handleProcessError(err));\n    }\n\n    /**\n     * Retrieve the process filter by name\n     * @param filterName - string - The name of the filter\n     * @param appId - string - optional - The id of app\n     * @returns {Observable<FilterProcessRepresentationModel>}\n     */\n    getProcessFilterByName(filterName: string, appId?: string): Observable<FilterProcessRepresentationModel> {\n        return Observable.fromPromise(this.callApiProcessFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.name === filterName);\n            }).catch(err => this.handleProcessError(err));\n    }\n\n    /**\n     * fetch the Process Audit information as a pdf\n     * @param processId - the process id\n     */\n    fetchProcessAuditPdfById(processId: string): Observable<Blob> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))\n            .catch(err => this.handleProcessError(err));\n    }\n\n    /**\n     * fetch the Process Audit information in a json format\n     * @param processId - the process id\n     */\n    fetchProcessAuditJsonById(processId: string): Observable<any> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))\n            .catch(err => this.handleProcessError(err));\n    }\n\n    /**\n     * Create and return the default filters\n     * @param appId\n     * @returns {FilterProcessRepresentationModel[]}\n     */\n    public createDefaultFilters(appId: string): Observable<any[]> {\n        let runnintFilter = this.getRunningFilterInstance(appId);\n        let runnintObservable = this.addProcessFilter(runnintFilter);\n\n        let completedFilter = this.getCompletedFilterInstance(appId);\n        let completedObservable = this.addProcessFilter(completedFilter);\n\n        let allFilter = this.getAllFilterInstance(appId);\n        let allObservable = this.addProcessFilter(allFilter);\n\n        return Observable.create(observer => {\n            Observable.forkJoin(\n                runnintObservable,\n                completedObservable,\n                allObservable\n            ).subscribe(\n                (res) => {\n                    let filters: FilterProcessRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === runnintFilter.name) {\n                            filters.push(runnintFilter);\n                        } else if (filter.name === completedFilter.name) {\n                            filters.push(completedFilter);\n                        } else if (filter.name === allFilter.name) {\n                            filters.push(allFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.processLogService.error(err);\n                });\n        });\n    }\n\n    private getRunningFilterInstance(appId: string): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Running',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-random',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }\n        });\n    }\n\n    /**\n     * Return a static Completed filter instance\n     * @param appId\n     * @returns {FilterProcessRepresentationModel}\n     */\n    private getCompletedFilterInstance(appId: string): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Completed',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-ok-sign',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }\n        });\n    }\n\n    /**\n     * Return a static All filter instance\n     * @param appId\n     * @returns {FilterProcessRepresentationModel}\n     */\n    private getAllFilterInstance(appId: string): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'All',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-th',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }\n        });\n    }\n\n    /**\n     * Add a filter\n     * @param filter - FilterProcessRepresentationModel\n     * @returns {FilterProcessRepresentationModel}\n     */\n    addProcessFilter(filter: FilterProcessRepresentationModel): Observable<FilterProcessRepresentationModel> {\n        return Observable.fromPromise(this.callApiAddProccessFilter(filter))\n            .map(res => res)\n            .map((response: FilterProcessRepresentationModel) => {\n                return response;\n            }).catch(err => this.handleProcessError(err));\n    }\n\n    getProcess(id: string): Observable<ProcessInstance> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(id))\n            .catch(err => this.handleProcessError(err));\n    }\n\n    getProcessTasks(id: string, state?: string): Observable<TaskDetailsModel[]> {\n        let taskOpts = state ? {\n                processInstanceId: id,\n                state: state\n            } : {\n                processInstanceId: id\n            };\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))\n            .map(this.extractData)\n            .map(tasks => tasks.map((task: any) => {\n                task.created = moment(task.created, 'YYYY-MM-DD').format();\n                return task;\n            }))\n            .catch(err => this.handleProcessError(err));\n    }\n\n    /**\n     * Retrive all the process instance's comments\n     * @param id - process instance ID\n     * @returns {<Comment[]>}\n     */\n    getComments(id: string): Observable<Comment[]> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.commentsApi.getProcessInstanceComments(id))\n            .map(res => res)\n            .map((response: any) => {\n                let comments: Comment[] = [];\n                response.data.forEach((comment) => {\n                    let user = new User({\n                        id: comment.createdBy.id,\n                        email: comment.createdBy.email,\n                        firstName: comment.createdBy.firstName,\n                        lastName: comment.createdBy.lastName\n                    });\n                    comments.push(new Comment(comment.id, comment.message, comment.created, user));\n                });\n                return comments;\n            }).catch(err => this.handleProcessError(err));\n    }\n\n    /**\n     * Add a comment to a process instance\n     * @param id - process instance Id\n     * @param message - content of the comment\n     * @returns {Comment}\n     */\n    addComment(id: string, message: string): Observable<Comment> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.commentsApi.addProcessInstanceComment({ message: message }, id)\n        )\n            .map((response: Comment) => {\n                return new Comment(response.id, response.message, response.created, response.createdBy);\n            }).catch(err => this.handleProcessError(err));\n\n    }\n\n    getProcessDefinitions(appId?: string): Observable<ProcessDefinitionRepresentation[]> {\n        let opts = appId ? {\n                latest: true,\n                appDefinitionId: appId\n            } : {\n                latest: true\n            };\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts)\n        )\n            .map(this.extractData)\n            .map(processDefs => processDefs.map((pd) => new ProcessDefinitionRepresentation(pd)))\n            .catch(err => this.handleProcessError(err));\n    }\n\n    startProcess(processDefinitionId: string, name: string, outcome?: string, startFormValues?: any, variables?: RestVariable[]): Observable<ProcessInstance> {\n        let startRequest: any = {\n            name: name,\n            processDefinitionId: processDefinitionId\n        };\n        if (outcome) {\n            startRequest.outcome = outcome;\n        }\n        if (startFormValues) {\n            startRequest.values = startFormValues;\n        }\n        if (variables) {\n            startRequest.variables = variables;\n        }\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest)\n        )\n            .map((pd) => new ProcessInstance(pd))\n            .catch(err => this.handleProcessError(err));\n    }\n\n    cancelProcess(processInstanceId: string): Observable<void> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId)\n        )\n            .catch(err => this.handleProcessError(err));\n    }\n\n    getProcessInstanceVariables(processDefinitionId: string): Observable<ProcessInstanceVariable[]> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processDefinitionId)\n        )\n            .map((processVars: any[]) => processVars.map((pd) => new ProcessInstanceVariable(pd)))\n            .catch(err => this.handleProcessError(err));\n    }\n\n    createOrUpdateProcessInstanceVariables(processDefinitionId: string, variables: ProcessInstanceVariable[]): Observable<ProcessInstanceVariable[]> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processDefinitionId, variables)\n        )\n            .catch(err => this.handleProcessError(err));\n    }\n\n    deleteProcessInstanceVariable(processDefinitionId: string, variableName: string): Observable<void> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processDefinitionId, variableName)\n        )\n            .catch(err => this.handleProcessError(err));\n    }\n\n    private callApiAddProccessFilter(filter: FilterProcessRepresentationModel) {\n        return this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter);\n    }\n\n    callApiProcessFilters(appId?: string) {\n        if (appId) {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });\n        } else {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters();\n        }\n    }\n\n    private extractData(res: any) {\n        return res.data || {};\n    }\n\n    private handleProcessError(error: any) {\n        return Observable.throw(error || 'Server error');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/services/process.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessFilterRequestRepresentation {\n    processDefinitionId: string;\n    processDefinitionKey: string;\n    appDefinitionId: string;\n    state: string;\n    sort: string;\n    page: number;\n    size: number;\n\n    constructor(obj?: any) {\n        this.processDefinitionId = obj && obj.processDefinitionId || null;\n        this.processDefinitionKey = obj && obj.processDefinitionKey || null;\n        this.appDefinitionId = obj && obj.appDefinitionId || null;\n        this.state = obj && obj.state || null;\n        this.sort = obj && obj.sort || null;\n        this.page = obj && obj.page || 0;\n        this.size = obj && obj.size || 25;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/models/process-instance-filter.model.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Rx\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Observable\"\n// module id = 23\n// module chunks = 1 2 3 4 6","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-activiti-form\"\n// module id = 26\n// module chunks = 3 4","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 3\n// module chunks = 1 2 3 4 5 6 7 8 9 11 12 13 14","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { CardViewDateItemModel, CardViewItem, CardViewTextItemModel } from 'ng2-alfresco-core';\nimport { ProcessInstance } from '../models/process-instance.model';\n\n@Component({\n    selector: 'adf-process-instance-header, activiti-process-instance-header',\n    template: require('./process-instance-header.component.html'),\n    styles: [require('./process-instance-header.component.css')]\n})\nexport class ProcessInstanceHeaderComponent implements OnChanges {\n\n    @Input()\n    processInstance: ProcessInstance;\n\n    properties: CardViewItem [];\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n\n    refreshData() {\n        if (this.processInstance) {\n            this.properties = [\n                new CardViewTextItemModel({label: 'Status:', value: this.getProcessStatus(), key: 'status'}),\n                new CardViewDateItemModel({label: 'Due Date:', value: this.processInstance.ended, format: 'MMM DD YYYY', key: 'dueDate', default: 'No date'}),\n                new CardViewTextItemModel({label: 'Category:', value: this.processInstance.processDefinitionCategory, key: 'category', default: 'No category'}),\n                new CardViewTextItemModel(\n                    {\n                        label: 'Created By:',\n                        value: this.getStartedByFullName(),\n                        key: 'assignee',\n                        default: 'No assignee'\n                    }),\n                new CardViewDateItemModel({label: 'Created:', value: this.processInstance.started, format: 'MMM DD YYYY', key: 'created'}),\n                new CardViewTextItemModel({label: 'Id:', value: this.processInstance.id, key: 'id'}),\n                new CardViewTextItemModel({label: 'Description:', value: this.processInstance.processDefinitionDescription, key: 'description', default: 'No description'})\n            ];\n        }\n    }\n\n    getProcessStatus(): string {\n        if (this.processInstance) {\n            return this.isRunning() ? 'Running' : 'Completed';\n        }\n    }\n\n    getStartedByFullName(): string {\n        let fullName = '';\n        if (this.processInstance && this.processInstance.startedBy) {\n            fullName += this.processInstance.startedBy.firstName || '';\n            fullName += fullName ? ' ' : '';\n            fullName += this.processInstance.startedBy.lastName || '';\n        }\n        return fullName;\n    }\n\n    isRunning(): boolean {\n        return this.processInstance && !this.processInstance.ended;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-instance-header.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { TaskDetailsEvent, TaskDetailsModel } from 'ng2-activiti-tasklist';\nimport { LogService } from 'ng2-alfresco-core';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\n\ndeclare let dialogPolyfill: any;\n\n@Component({\n    selector: 'adf-process-instance-tasks, activiti-process-instance-tasks',\n    template: require('./process-instance-tasks.component.html'),\n    styles: [require('./process-instance-tasks.component.css')]\n})\nexport class ProcessInstanceTasksComponent implements OnInit, OnChanges {\n\n    @Input()\n    processInstanceDetails: ProcessInstance;\n\n    @Input()\n    showRefreshButton: boolean = true;\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    activeTasks: TaskDetailsModel[] = [];\n    completedTasks: TaskDetailsModel[] = [];\n\n    private taskObserver: Observer<TaskDetailsModel>;\n    private completedTaskObserver: Observer<TaskDetailsModel>;\n\n    task$: Observable<TaskDetailsModel>;\n    completedTask$: Observable<TaskDetailsModel>;\n\n    message: string;\n    processId: string;\n\n    @ViewChild('dialog')\n    dialog: any;\n\n    @ViewChild('startDialog')\n    startDialog: any;\n\n    @ViewChild('taskdetails')\n    taskdetails: any;\n\n    @Output()\n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n\n    constructor(private activitiProcess: ProcessService,\n                private logService: LogService) {\n        this.task$ = new Observable<TaskDetailsModel>(observer => this.taskObserver = observer).share();\n        this.completedTask$ = new Observable<TaskDetailsModel>(observer => this.completedTaskObserver = observer).share();\n    }\n\n    ngOnInit() {\n        this.task$.subscribe((task: TaskDetailsModel) => {\n            this.activeTasks.push(task);\n        });\n        this.completedTask$.subscribe((task: TaskDetailsModel) => {\n            this.completedTasks.push(task);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processInstanceDetails = changes['processInstanceDetails'];\n        if (processInstanceDetails && processInstanceDetails.currentValue) {\n            this.load(processInstanceDetails.currentValue.id);\n        }\n    }\n\n    load(processId: string) {\n        this.loadActive(processId);\n        this.loadCompleted(processId);\n    }\n\n    loadActive(processId: string) {\n        this.activeTasks = [];\n        if (processId) {\n            this.activitiProcess.getProcessTasks(processId, null).subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.taskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.activeTasks = [];\n        }\n    }\n\n    loadCompleted(processId: string) {\n        this.completedTasks = [];\n        if (processId) {\n            this.activitiProcess.getProcessTasks(processId, 'completed').subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.completedTaskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.completedTasks = [];\n        }\n    }\n\n    hasStartFormDefined(): boolean {\n        return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;\n    }\n\n    getUserFullName(user: any) {\n        if (user) {\n            return (user.firstName && user.firstName !== 'null'\n                    ? user.firstName + ' ' : '') +\n                user.lastName;\n        }\n        return 'Nobody';\n    }\n\n    getFormatDate(value, format: string) {\n        let datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            this.logService.error(`ProcessListInstanceTask: error parsing date ${value} to format ${format}`);\n        }\n    }\n\n    clickTask($event: any, task: TaskDetailsModel) {\n        let args = new TaskDetailsEvent(task);\n        this.taskClick.emit(args);\n    }\n\n    clickStartTask() {\n        this.processId = this.processInstanceDetails.id;\n        this.showStartDialog();\n    }\n\n    showStartDialog() {\n        if (!this.startDialog.nativeElement.showModal) {\n            dialogPolyfill.registerDialog(this.startDialog.nativeElement);\n        }\n\n        if (this.startDialog) {\n            this.startDialog.nativeElement.showModal();\n        }\n    }\n\n    closeSartDialog() {\n        if (this.startDialog) {\n            this.startDialog.nativeElement.close();\n        }\n    }\n\n    onRefreshClicked() {\n        this.load(this.processInstanceDetails.id);\n    }\n\n    onFormContentClick() {\n        if (this.startDialog) {\n            this.startDialog.nativeElement.close();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-instance-tasks.component.ts","module.exports = __webpack_public_path__ + \"assets/images/empty_doc_lib.a89c064e4edfa54d2e347bf594947219.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/assets/images/empty_doc_lib.svg\n// module id = 390\n// module chunks = 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".adf-create-attachment {\\n    display: inline-block;\\n    line-height: 0px;\\n    vertical-align: middle;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-processlist/src/components/create-process-attachment.component.css\n// module id = 414\n// module chunks = 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \":host {\\n    width: 100%;\\n}\\n\\n.activiti-label {\\n    font-weight: bolder;\\n    vertical-align: top;\\n}\\n\\n.activiti-label.mdl-badge[data-badge]:after {\\n    right: -27px;\\n    top: -2px;\\n}\\n\\n.activiti-label + .icon {\\n    position: relative;\\n    top: -2px;\\n}\\n\\n.material-icons {\\n    cursor: pointer;\\n}\\n\\n.list-wrap {\\n    word-wrap: break-word;\\n    word-break: break-all;\\n    -moz-hyphens:auto;\\n    -webkit-hyphens:auto;\\n    -o-hyphens:auto;\\n    hyphens:auto;\\n}\\n\\n.hide-long-names {\\n    overflow: auto;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-processlist/src/components/process-comments.component.css\n// module id = 415\n// module chunks = 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \":host {\\n    width: 100%;\\n}\\n\\n.activiti-process-container {\\n    width: 100%;\\n    min-height: 100px;\\n    overflow: visible;\\n    padding: 10px;\\n}\\n\\n.adf-comments-dialog {\\n    position: fixed;\\n    top: 50%;\\n    transform: translate(0, -50%);\\n    width: 40%;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-processlist/src/components/process-instance-details.component.css\n// module id = 416\n// module chunks = 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \":host {\\n    width: 100%;\\n}\\n\\n.adf-card-container {\\n    font-family: inherit;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-processlist/src/components/process-instance-header.component.css\n// module id = 417\n// module chunks = 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \":host {\\n    width: 100%;\\n}\\n\\n.activiti-label {\\n    font-weight: bolder;\\n    vertical-align: top;\\n}\\n\\n.activiti-label.mdl-badge[data-badge]:after {\\n    right: -27px;\\n    top: -2px;\\n}\\n\\n.activiti-label + .icon {\\n    position: relative;\\n    top: -2px;\\n}\\n\\n.material-icons:hover {\\n    color: rgb(255, 152, 0);\\n}\\n\\n.task-details-dialog {\\n    position: fixed;\\n    top: 50%;\\n    transform: translate(0, -50%);\\n    width: 40%;\\n}\\n\\n.process-tasks-refresh {\\n    float: right;\\n}\\n\\n.mdl-dialog__content.form__size {\\n    height: 400px;\\n    overflow-y: auto;\\n}\\n\\n.no-results {\\n    margin-left: 9px;\\n    font-size: 14px;\\n    font-weight: 400;\\n    letter-spacing: 0;\\n    line-height: 18px;\\n    color: rgba(0, 0, 0, .54);\\n    display: block;\\n    padding: 12px;\\n}\\n\\n.process-tasks__task-item {\\n    cursor: pointer;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-processlist/src/components/process-instance-tasks.component.css\n// module id = 418\n// module chunks = 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".adf-variable-list-loading-margin {\\n    margin-left: calc((100% - 100px) / 2);\\n    margin-right: calc((100% - 100px) / 2);\\n}\\n\\n.no-content-message {\\n    font-family: Muli;\\n    font-size: 16px;\\n    font-weight: bold;\\n    text-align: center;\\n    opacity: 0.54;\\n    color: #000;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-processlist/src/components/process-instance-variables.component.css\n// module id = 419\n// module chunks = 4","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ActivitiContentService } from 'ng2-activiti-form';\nimport { ContentService, ThumbnailService } from 'ng2-alfresco-core';\n\ndeclare var require: any;\n\n@Component({\n    selector: 'adf-process-attachment-list',\n    styles: [require('./process-attachment-list.component.scss')],\n    template: require('./process-attachment-list.component.html')\n})\nexport class ProcessAttachmentListComponent implements OnChanges {\n\n    @Input()\n    processInstanceId: string;\n\n    @Input()\n    disabled: boolean = false;\n\n    @Output()\n    attachmentClick = new EventEmitter();\n\n    @Output()\n    success = new EventEmitter();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    emptyListImageUrl: string = require('./../assets/images/empty_doc_lib.svg');\n\n    attachments: any[] = [];\n    isLoading: boolean = true;\n\n    constructor(private activitiContentService: ActivitiContentService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.loadAttachmentsByProcessInstanceId(changes['processInstanceId'].currentValue);\n        }\n    }\n\n    reset() {\n        this.attachments = [];\n    }\n\n    reload(): void {\n        this.loadAttachmentsByProcessInstanceId(this.processInstanceId);\n    }\n\n    add(content: any): void {\n        this.attachments.push({\n            id: content.id,\n            name: content.name,\n            created: content.created,\n            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n        });\n    }\n\n    private loadAttachmentsByProcessInstanceId(processInstanceId: string) {\n        if (processInstanceId) {\n            this.reset();\n            this.isLoading = true;\n            this.activitiContentService.getProcessRelatedContent(processInstanceId).subscribe(\n                (res: any) => {\n                    res.data.forEach(content => {\n                        this.attachments.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n\n    private deleteAttachmentById(contentId: string) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter(content => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n\n    onShowRowActionsMenu(event: any) {\n        let viewAction = {\n            title: 'View',\n            name: 'view'\n        };\n\n        let removeAction = {\n            title: 'Remove',\n            name: 'remove'\n        };\n\n        let downloadAction = {\n            title: 'Download',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n\n    onExecuteRowAction(event: any) {\n        let args = event.value;\n        let action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n\n    openContent(event: any): void {\n        let content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n\n    emitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    downloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    isDisabled(): boolean {\n        return this.disabled;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-attachment-list.component.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"adf-datatable >>> .column-header {\\n    color: #232323;\\n    font-size: 15px;\\n}\\n\\nadf-datatable >>> .data-cell {\\n    cursor: pointer !important;\\n}\\n\\nadf-datatable >>> .cell-value{\\n    width: 250px;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    text-overflow: ellipsis\\n}\\n\\n.adf-process-list-loading-margin {\\n    margin-left: calc((100% - 100px) / 2);\\n    margin-right: calc((100% - 100px) / 2);\\n}\\n\\n.no-content-message {\\n    font-family: Muli;\\n    font-size: 16px;\\n    font-weight: bold;\\n    text-align: center;\\n    opacity: 0.54;\\n    color: #000;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-processlist/src/components/processlist.component.css\n// module id = 420\n// module chunks = 4","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TaskListService } from 'ng2-activiti-tasklist';\nimport { ProcessService } from './../services/process.service';\n\n@Component({\n    selector: 'adf-process-instance-comments, activiti-process-instance-comments',\n    template: require('./process-comments.component.html'),\n    styles: [require('./process-comments.component.css')],\n    providers: [{provide: TaskListService, useClass: ProcessService}]\n})\nexport class ProcessCommentsComponent {\n\n    @Input()\n    processInstanceId: string;\n\n    @Input()\n    readOnly: boolean = true;\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    onError(error: any) {\n        this.error.emit(error);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-comments.component.ts","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./create-process-attachment.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/create-process-attachment.component.css\n// module id = 430\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./process-comments.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-comments.component.css\n// module id = 431\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./process-instance-details.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-details.component.css\n// module id = 432\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./process-instance-header.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-header.component.css\n// module id = 433\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./process-instance-tasks.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-tasks.component.css\n// module id = 434\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./process-instance-variables.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-variables.component.css\n// module id = 435\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./processlist.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/processlist.component.css\n// module id = 436\n// module chunks = 4","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { FilterParamsModel, FilterProcessRepresentationModel } from './../models/filter-process.model';\nimport { ProcessService } from './../services/process.service';\n\n@Component({\n    selector: 'adf-process-instance-filters, activiti-process-instance-filters',\n    template: require('./process-filters.component.html'),\n    styles: [require('./process-filters.component.scss')]\n})\nexport class ProcessFiltersComponent implements OnInit, OnChanges {\n\n    @Input()\n    filterParam: FilterParamsModel;\n\n    @Output()\n    filterClick: EventEmitter<FilterProcessRepresentationModel> = new EventEmitter<FilterProcessRepresentationModel>();\n\n    @Output()\n    onSuccess: EventEmitter<FilterProcessRepresentationModel[]> = new EventEmitter<FilterProcessRepresentationModel[]>();\n\n    @Output()\n    onError: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    appId: number;\n\n    @Input()\n    appName: string;\n\n    @Input()\n    showIcon: boolean = true;\n\n    private filterObserver: Observer<FilterProcessRepresentationModel>;\n    filter$: Observable<FilterProcessRepresentationModel>;\n\n    currentFilter: FilterProcessRepresentationModel;\n\n    filters: FilterProcessRepresentationModel [] = [];\n\n    constructor(private activiti: ProcessService) {\n        this.filter$ = new Observable<FilterProcessRepresentationModel>(observer => this.filterObserver = observer).share();\n    }\n\n    ngOnInit() {\n        this.filter$.subscribe((filter: FilterProcessRepresentationModel) => {\n            this.filters.push(filter);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let appId = changes['appId'];\n        if (appId && (appId.currentValue || appId.currentValue === null)) {\n            this.getFiltersByAppId(appId.currentValue);\n            return;\n        }\n        let appName = changes['appName'];\n        if (appName && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n            return;\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appId\n     * @param appId - optional\n     */\n    getFiltersByAppId(appId?: string) {\n        this.activiti.getProcessFilters(appId).subscribe(\n            (res: FilterProcessRepresentationModel[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.activiti.createDefaultFilters(appId).subscribe(\n                        (resDefault: FilterProcessRepresentationModel[]) => {\n                            this.resetFilter();\n                            resDefault.forEach((filter) => {\n                                this.filterObserver.next(filter);\n                            });\n\n                            this.selectTaskFilter(this.filterParam);\n                            this.onSuccess.emit(resDefault);\n                        },\n                        (errDefault: any) => {\n                            this.onError.emit(errDefault);\n                        }\n                    );\n                } else {\n                    this.resetFilter();\n                    res.forEach((filter) => {\n                        this.filterObserver.next(filter);\n                    });\n\n                    this.selectTaskFilter(this.filterParam);\n                    this.onSuccess.emit(res);\n                }\n            },\n            (err: any) => {\n                this.onError.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     * @param appName\n     */\n    getFiltersByAppName(appName: string) {\n        this.activiti.getDeployedApplications(appName).subscribe(\n            application => {\n                this.getFiltersByAppId(application.id.toString());\n                this.selectTaskFilter(this.filterParam);\n            },\n            (err) => {\n                this.onError.emit(err);\n            });\n    }\n\n    /**\n     * Pass the selected filter as next\n     * @param filter\n     */\n    public selectFilter(filter: FilterProcessRepresentationModel) {\n        this.currentFilter = filter;\n        this.filterClick.emit(filter);\n    }\n\n    /**\n     * Select the first filter of a list if present\n     */\n    public selectTaskFilter(filterParam: FilterParamsModel) {\n        if (filterParam) {\n            this.filters.filter((taskFilter: FilterProcessRepresentationModel, index) => {\n                if (filterParam.name && filterParam.name.toLowerCase() === taskFilter.name.toLowerCase() ||\n                    filterParam.id === taskFilter.id || filterParam.index === index) {\n                    this.currentFilter = taskFilter;\n                }\n            });\n        }\n        if (this.isCurrentFilterEmpty()) {\n            this.selectDefaultTaskFilter();\n        }\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Return the current task\n     * @returns {FilterProcessRepresentationModel}\n     */\n    getCurrentFilter(): FilterProcessRepresentationModel {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     * @returns {boolean}\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n\n    private isCurrentFilterEmpty(): boolean {\n        return this.currentFilter === undefined || null ? true : false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-filters.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { TaskDetailsEvent } from 'ng2-activiti-tasklist';\nimport { LogService } from 'ng2-alfresco-core';\n\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { ProcessInstanceHeaderComponent } from './process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './process-instance-tasks.component';\n\n@Component({\n    selector: 'adf-process-instance-details, activiti-process-instance-details',\n    template: require('./process-instance-details.component.html'),\n    styles: [require('./process-instance-details.component.css')]\n})\nexport class ProcessInstanceDetailsComponent implements OnChanges {\n\n    @Input()\n    processInstanceId: string;\n\n    @ViewChild(ProcessInstanceHeaderComponent)\n    processInstanceHeader: ProcessInstanceHeaderComponent;\n\n    @ViewChild(ProcessInstanceTasksComponent)\n    tasksList: ProcessInstanceTasksComponent;\n\n    @Input()\n    showTitle: boolean = true;\n\n    @Input()\n    showRefreshButton: boolean = true;\n\n    @Output()\n    processCancelled: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n\n    processInstanceDetails: ProcessInstance;\n\n    @Output()\n    showProcessDiagram: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * Constructor\n     * @param translate Translation service\n     * @param activitiProcess   Process service\n     */\n    constructor(private activitiProcess: ProcessService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processInstanceId = changes['processInstanceId'];\n        if (processInstanceId && !processInstanceId.currentValue) {\n            this.reset();\n            return;\n        }\n        if (processInstanceId && processInstanceId.currentValue) {\n            this.load(processInstanceId.currentValue);\n            return;\n        }\n    }\n\n    /**\n     * Reset the task detail to undefined\n     */\n    reset() {\n        this.processInstanceDetails = null;\n    }\n\n    load(processId: string) {\n        if (processId) {\n            this.activitiProcess.getProcess(processId).subscribe(\n                (res: ProcessInstance) => {\n                    this.processInstanceDetails = res;\n                }\n            );\n        }\n    }\n\n    isRunning(): boolean {\n        return this.processInstanceDetails && !this.processInstanceDetails.ended;\n    }\n\n    isDiagramDisabled(): boolean {\n        return !this.isRunning() ? true : undefined;\n    }\n\n    cancelProcess() {\n        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(\n            (data) => {\n                this.processCancelled.emit(data);\n            }, (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    // bubbles (taskClick) event\n    onTaskClicked(event: TaskDetailsEvent) {\n        this.taskClick.emit(event);\n    }\n\n    getProcessNameOrDescription(dateFormat): string {\n        let name = '';\n        if (this.processInstanceDetails) {\n            name = this.processInstanceDetails.name ||\n                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);\n        }\n        return name;\n    }\n\n    getFormatDate(value, format: string) {\n        let datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            this.logService.error(`ProcessListInstanceHeader: error parsing date ${value} to format ${format}`);\n        }\n    }\n\n    onShowProcessDiagram(processInstanceId: any) {\n        this.showProcessDiagram.emit({value: this.processInstanceId});\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-instance-details.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, DebugElement, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\n\nimport { DataCellEvent, DataTableAdapter, ObjectDataRow, ObjectDataTableAdapter } from 'ng2-alfresco-datatable';\nimport { ProcessInstanceVariable } from './../models/process-instance-variable.model';\nimport { ProcessService } from './../services/process.service';\n\ndeclare let dialogPolyfill: any;\n\n@Component({\n    selector: 'adf-process-instance-variables, activiti-process-instance-variables',\n    template: require('./process-instance-variables.component.html'),\n    styles: [require('./process-instance-variables.component.css')],\n    providers: [ProcessService]\n})\nexport class ProcessInstanceVariablesComponent implements OnInit, OnChanges {\n\n    @Input()\n    processInstanceId: string;\n\n    @Input()\n    data: DataTableAdapter;\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('addDialog')\n    addDialog: DebugElement;\n\n    @ViewChild('editDialog')\n    editDialog: DebugElement;\n\n    @ViewChild('errorDialog')\n    errorDialog: DebugElement;\n\n    private defaultSchemaColumn: any[] = [\n        {type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true},\n        {type: 'text', key: 'value', title: 'Value', sortable: true},\n        {type: 'text', key: 'scope', title: 'Scope', sortable: true}\n    ];\n\n    variableName: string;\n    variableValue: string;\n    variableScope: string;\n\n    isLoading: boolean = true;\n\n    /**\n     * Constructor\n     * @param translate Translation service\n     * @param activitiProcess Process service\n     */\n    constructor(private activitiProcess: ProcessService) {\n    }\n\n    ngOnInit() {\n        if (!this.data) {\n            this.data = this.initDefaultSchemaColumns();\n        }\n        if (this.processInstanceId) {\n            this.getProcessInstanceVariables(this.processInstanceId);\n            return;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processInstanceId = changes['processInstanceId'];\n        if (processInstanceId) {\n            if (processInstanceId.currentValue) {\n                this.getProcessInstanceVariables(processInstanceId.currentValue);\n            } else {\n                this.resetVariables();\n            }\n        }\n    }\n\n    /**\n     * Check if the list is empty\n     * @returns {ObjectDataTableAdapter|boolean}\n     */\n    isListEmpty(): boolean {\n        return this.data === undefined ||\n            (this.data && this.data.getRows() && this.data.getRows().length === 0);\n    }\n\n    /**\n     * Return an initDefaultSchemaColumns instance with the default Schema Column\n     * @returns {ObjectDataTableAdapter}\n     */\n    private initDefaultSchemaColumns(): ObjectDataTableAdapter {\n        return new ObjectDataTableAdapter(\n            [],\n            this.defaultSchemaColumn\n        );\n    }\n\n    /**\n     * Create an array of ObjectDataRow\n     * @param instances\n     * @returns {ObjectDataRow[]}\n     */\n    private createDataRow(instances: ProcessInstanceVariable[]): ObjectDataRow[] {\n        let instancesRows: ObjectDataRow[] = [];\n        instances.forEach((row) => {\n            instancesRows.push(new ObjectDataRow({\n                name: row.name,\n                value: row.value,\n                scope: row.scope\n            }));\n        });\n        return instancesRows;\n    }\n\n    /**\n     * Render the instances list\n     *\n     * @param instances\n     */\n    private renderInstances(instances: any[]) {\n        this.data.setRows(instances);\n    }\n\n    private getProcessInstanceVariables(processInstanceId: string) {\n        if (processInstanceId) {\n            this.isLoading = true;\n            this.activitiProcess.getProcessInstanceVariables(processInstanceId).subscribe(\n                (res: ProcessInstanceVariable[]) => {\n                    let instancesRow = this.createDataRow(res);\n                    this.renderInstances(instancesRow);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                }\n            );\n        } else {\n            this.resetVariables();\n        }\n    }\n\n    private resetVariables() {\n        if (this.data) {\n            this.data.setRows([]);\n        }\n    }\n\n    private polyfillDialog(dialog: DebugElement) {\n        if (!dialog.nativeElement.showModal) {\n            dialogPolyfill.registerDialog(dialog.nativeElement);\n        }\n    }\n\n    public showAddDialog() {\n        this.resetForm();\n        this.polyfillDialog(this.addDialog);\n        this.addDialog.nativeElement.showModal();\n    }\n\n    public showEditDialog(row: ObjectDataRow) {\n        this.variableName = row.getValue('name');\n        this.variableValue = row.getValue('value');\n        this.variableScope = row.getValue('scope');\n        this.polyfillDialog(this.editDialog);\n        this.editDialog.nativeElement.showModal();\n    }\n\n    public showErrorDialog() {\n        this.polyfillDialog(this.errorDialog);\n        this.errorDialog.nativeElement.showModal();\n    }\n\n    public add() {\n        this.activitiProcess.createOrUpdateProcessInstanceVariables(this.processInstanceId, [new ProcessInstanceVariable({\n            name: this.variableName,\n            value: this.variableValue,\n            scope: this.variableScope\n        })]).subscribe(\n            (res: ProcessInstanceVariable[]) => {\n                this.getProcessInstanceVariables(this.processInstanceId);\n                this.resetForm();\n            },\n            (err) => {\n                this.showErrorDialog();\n                this.error.emit(err);\n            }\n        );\n        this.closeAddDialog();\n    }\n\n    public edit() {\n        this.activitiProcess.createOrUpdateProcessInstanceVariables(this.processInstanceId, [new ProcessInstanceVariable({\n            name: this.variableName,\n            value: this.variableValue,\n            scope: this.variableScope\n        })]).subscribe(\n            (res: ProcessInstanceVariable[]) => {\n                this.getProcessInstanceVariables(this.processInstanceId);\n                this.resetForm();\n            },\n            (err) => {\n                this.showErrorDialog();\n                this.error.emit(err);\n            }\n        );\n        this.closeEditDialog();\n    }\n\n    public closeAddDialog() {\n        this.addDialog.nativeElement.close();\n    }\n\n    public closeEditDialog() {\n        this.editDialog.nativeElement.close();\n    }\n\n    public closeErrorDialog() {\n        this.errorDialog.nativeElement.close();\n    }\n\n    private resetForm() {\n        this.variableName = '';\n        this.variableValue = '';\n        this.variableScope = 'global';\n    }\n\n    private onDeleteVariable(row: ObjectDataRow) {\n        this.activitiProcess.deleteProcessInstanceVariable(this.processInstanceId, row.getValue('name')).subscribe(() => {\n            this.getProcessInstanceVariables(this.processInstanceId);\n        },\n                                                                                                                   (err) => {\n            this.showErrorDialog();\n            this.error.emit(err);\n        });\n    }\n\n    onExecuteRowAction(event) {\n        let row: ObjectDataRow = event.args.row;\n        let action = event.args.action;\n        if (action && action.id === 'delete') {\n            this.onDeleteVariable(row);\n        }\n        if (action && action.id === 'edit') {\n            this.showEditDialog(row);\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        event.value.actions = [\n            { id: 'delete', title: 'Delete' },\n            { id: 'edit', title: 'Edit' }\n        ];\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/process-instance-variables.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatePipe } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { DataColumnListComponent } from 'ng2-alfresco-core';\nimport { DataColumn, DataRowEvent, DataSorting, DataTableAdapter, ObjectDataRow, ObjectDataTableAdapter } from 'ng2-alfresco-datatable';\nimport { ProcessFilterRequestRepresentation } from '../models/process-instance-filter.model';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from '../services/process.service';\n\n@Component({\n    selector: 'adf-process-instance-list, activiti-process-instance-list',\n    styles: [require('./processlist.component.css')],\n    template: require('./processlist.component.html')\n})\nexport class ProcessInstanceListComponent implements OnChanges, AfterContentInit {\n\n    @ContentChild(DataColumnListComponent) columnList: DataColumnListComponent;\n\n    @Input()\n    appId: string;\n\n    @Input()\n    processDefinitionKey: string;\n\n    @Input()\n    state: string;\n\n    @Input()\n    sort: string;\n\n    @Input()\n    name: string;\n\n    requestNode: ProcessFilterRequestRepresentation;\n\n    @Input()\n    data: DataTableAdapter;\n\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output()\n    onSuccess: EventEmitter<ProcessInstance[]> = new EventEmitter<ProcessInstance[]>();\n\n    @Output()\n    onError: EventEmitter<any> = new EventEmitter<any>();\n\n    currentInstanceId: string;\n    isLoading: boolean = true;\n\n    private defaultSchema: DataColumn[] = [\n        { type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true },\n        { type: 'text', key: 'created', title: 'Created', cssClass: 'hidden', sortable: true }\n    ];\n\n    constructor(private processService: ProcessService) {\n    }\n\n    ngAfterContentInit() {\n        this.setupSchema();\n\n        if (this.appId) {\n            this.reload();\n        }\n    }\n\n    /**\n     * Setup html-based (html definitions) or code behind (data adapter) schema.\n     * If component is assigned with an empty data adater the default schema settings applied.\n     */\n    setupSchema() {\n        let schema: DataColumn[] = [];\n\n        if (this.columnList && this.columnList.columns && this.columnList.columns.length > 0) {\n            schema = this.columnList.columns.map(c => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ObjectDataTableAdapter([], schema.length > 0 ? schema : this.defaultSchema);\n        } else {\n            if (schema && schema.length > 0) {\n                this.data.setColumns(schema);\n            } else if (this.data.getColumns().length === 0) {\n                this.data.setColumns(this.defaultSchema);\n            }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes)) {\n            this.reload();\n        }\n    }\n\n    private isPropertyChanged(changes: SimpleChanges): boolean {\n        let changed: boolean = false;\n\n        let appId = changes['appId'];\n        let processDefinitionKey = changes['processDefinitionKey'];\n        let state = changes['state'];\n        let sort = changes['sort'];\n        let name = changes['name'];\n\n        if (appId && appId.currentValue) {\n            changed = true;\n        } else if (processDefinitionKey && processDefinitionKey.currentValue) {\n            changed = true;\n        } else if (state && state.currentValue) {\n            changed = true;\n        } else if (sort && sort.currentValue) {\n            changed = true;\n        } else if (name && name.currentValue) {\n            changed = true;\n        }\n        return changed;\n    }\n\n    public reload() {\n        this.requestNode = this.createRequestNode();\n        this.load(this.requestNode);\n    }\n\n    private load(requestNode: ProcessFilterRequestRepresentation) {\n        this.isLoading = true;\n        this.processService.getProcessInstances(requestNode)\n            .subscribe(\n                (response) => {\n                    let instancesRow = this.createDataRow(response);\n                    this.renderInstances(instancesRow);\n                    this.selectFirst();\n                    this.onSuccess.emit(response);\n                    this.isLoading = false;\n                },\n                error => {\n                    this.onError.emit(error);\n                    this.isLoading = false;\n                });\n    }\n\n    /**\n     * Create an array of ObjectDataRow\n     * @param instances\n     * @returns {ObjectDataRow[]}\n     */\n    private createDataRow(instances: any[]): ObjectDataRow[] {\n        let instancesRows: ObjectDataRow[] = [];\n        instances.forEach((row) => {\n            instancesRows.push(new ObjectDataRow(row));\n        });\n        return instancesRows;\n    }\n\n    /**\n     * Render the instances list\n     *\n     * @param instances\n     */\n    private renderInstances(instances: any[]) {\n        instances = this.optimizeNames(instances);\n        this.setDatatableSorting();\n        this.data.setRows(instances);\n    }\n\n    /**\n     * Sort the datatable rows based on current value of 'sort' property\n     */\n    private setDatatableSorting() {\n        if (!this.sort) {\n            return;\n        }\n        let sortingParams: string[] = this.sort.split('-');\n        if (sortingParams.length === 2) {\n            let sortColumn = sortingParams[0] === 'created' ? 'started' : sortingParams[0];\n            let sortOrder = sortingParams[1];\n            this.data.setSorting(new DataSorting(sortColumn, sortOrder));\n        }\n    }\n\n    /**\n     * Select the first instance of a list if present\n     */\n    selectFirst() {\n        if (!this.isListEmpty()) {\n            let row = this.data.getRows()[0];\n            this.data.selectedRow = row;\n            this.currentInstanceId = row.getValue('id');\n        } else {\n            if (this.data) {\n                this.data.selectedRow = null;\n            }\n            this.currentInstanceId = null;\n        }\n    }\n\n    /**\n     * Return the current id\n     * @returns {string}\n     */\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    /**\n     * Check if the list is empty\n     * @returns {ObjectDataTableAdapter|boolean}\n     */\n    isListEmpty(): boolean {\n        return this.data === undefined ||\n            (this.data && this.data.getRows() && this.data.getRows().length === 0);\n    }\n\n    /**\n     * Emit the event rowClick passing the current task id when the row is clicked\n     * @param event\n     */\n    onRowClick(event: DataRowEvent) {\n        let item = event;\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    /**\n     * Optimize name field\n     * @param instances\n     * @returns {any[]}\n     */\n    private optimizeNames(instances: any[]) {\n        instances = instances.map(t => {\n            t.obj.name = this.getProcessNameOrDescription(t.obj, 'medium');\n            return t;\n        });\n        return instances;\n    }\n\n    getProcessNameOrDescription(processInstance, dateFormat): string {\n        let name = '';\n        if (processInstance) {\n            name = processInstance.name ||\n                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);\n        }\n        return name;\n    }\n\n    getFormatDate(value, format: string) {\n        let datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            return '';\n        }\n    }\n\n    private createRequestNode() {\n        let requestNode = {\n            appDefinitionId: this.appId,\n            processDefinitionKey: this.processDefinitionKey,\n            state: this.state,\n            sort: this.sort\n        };\n        return new ProcessFilterRequestRepresentation(requestNode);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/processlist.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { RestVariable } from 'alfresco-js-api';\nimport { StartFormComponent } from 'ng2-activiti-form';\nimport { ProcessDefinitionRepresentation } from './../models/process-definition.model';\nimport { ProcessInstance } from './../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\n\n@Component({\n    selector: 'adf-start-process, activiti-start-process',\n    template: require('./start-process.component.html'),\n    styles: [require('./start-process.component.scss')]\n})\nexport class StartProcessInstanceComponent implements OnChanges {\n\n    @Input()\n    appId: string;\n\n    @Input()\n    variables: RestVariable[];\n\n    @Output()\n    start: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    @Output()\n    cancel: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    @Output()\n    error: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    @ViewChild(StartFormComponent)\n    startForm: StartFormComponent;\n\n    processDefinitions: ProcessDefinitionRepresentation[] = [];\n\n    name: string;\n\n    currentProcessDef: ProcessDefinitionRepresentation = new ProcessDefinitionRepresentation();\n\n    errorMessageId: string = '';\n\n    constructor(private activitiProcess: ProcessService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let appIdChange = changes['appId'];\n        let appId = appIdChange ? appIdChange.currentValue : null;\n        this.load(appId);\n    }\n\n    public load(appId?: string) {\n        this.resetSelectedProcessDefinition();\n        this.resetErrorMessage();\n        this.activitiProcess.getProcessDefinitions(appId).subscribe(\n            (res) => {\n                this.processDefinitions = res;\n            },\n            () => {\n                this.errorMessageId = 'START_PROCESS.ERROR.LOAD_PROCESS_DEFS';\n            }\n        );\n    }\n\n    public startProcess(outcome?: string) {\n        if (this.currentProcessDef.id && this.name) {\n            this.resetErrorMessage();\n            let formValues = this.startForm ? this.startForm.form.values : undefined;\n            this.activitiProcess.startProcess(this.currentProcessDef.id, this.name, outcome, formValues, this.variables).subscribe(\n                (res) => {\n                    this.name = '';\n                    this.start.emit(res);\n                },\n                (err) => {\n                    this.errorMessageId = 'START_PROCESS.ERROR.START';\n                    this.error.error(err);\n                }\n            );\n        }\n    }\n\n    onProcessDefChange(processDefinitionId) {\n        let processDef = this.processDefinitions.find((processDefinition) => {\n            return processDefinition.id === processDefinitionId;\n        });\n        if (processDef) {\n            this.currentProcessDef = JSON.parse(JSON.stringify(processDef));\n        } else {\n            this.resetSelectedProcessDefinition();\n        }\n    }\n\n    public cancelStartProcess() {\n        this.cancel.emit();\n    }\n\n    hasStartForm() {\n        return this.currentProcessDef && this.currentProcessDef.hasStartForm;\n    }\n\n    isProcessDefinitionEmpty() {\n        return this.processDefinitions ? (this.processDefinitions.length > 0 || this.errorMessageId) : this.errorMessageId;\n    }\n\n    isStartFormMissingOrValid() {\n        if (this.startForm) {\n            return this.startForm.form && this.startForm.form.isValid;\n        } else {\n            return true;\n        }\n    }\n\n    validateForm() {\n        return this.currentProcessDef.id && this.name && this.isStartFormMissingOrValid();\n    }\n\n    private resetSelectedProcessDefinition() {\n        this.currentProcessDef = new ProcessDefinitionRepresentation();\n    }\n\n    private resetErrorMessage(): void {\n        this.errorMessageId = '';\n    }\n\n    hasErrorMessage() {\n        return this.processDefinitions.length === 0 && !this.errorMessageId;\n    }\n\n    public onOutcomeClick(outcome: string) {\n        this.startProcess(outcome);\n    }\n\n    public reset() {\n        this.resetSelectedProcessDefinition();\n        this.name = '';\n        if (this.startForm) {\n            this.startForm.data = {};\n        }\n        this.resetErrorMessage();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/start-process.component.ts","module.exports = \"<button\\n    id=\\\"add_new_process_content_button\\\"\\n    md-button\\n    md-raised-button\\n    md-icon-button\\n    class=\\\"adf-create-attachment\\\"\\n    [adf-upload]=\\\"true\\\"\\n    mode=\\\"['click']\\\"\\n    [multiple]=\\\"true\\\"\\n    (upload-files)=\\\"onFileUpload($event)\\\">\\n    <md-icon>add</md-icon>\\n</button>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/create-process-attachment.component.html\n// module id = 572\n// module chunks = 4","module.exports = \"<adf-datatable [rows]=\\\"attachments\\\" [actions]=\\\"true\\\" [loading]=\\\"isLoading\\\" (rowDblClick)=\\\"openContent($event)\\\" (showRowActionsMenu)=\\\"onShowRowActionsMenu($event)\\\"\\n    (executeRowAction)=\\\"onExecuteRowAction($event)\\\">\\n    <adf-empty-list *ngIf=\\\"isEmpty()\\\">\\n        <div adf-empty-list-header class=\\\"adf-empty-list-header\\\"> {{'PROCESS-ATTACHMENT.EMPTY.HEADER' | translate}} </div>\\n        <div adf-empty-list-body *ngIf=\\\"!isDisabled()\\\">\\n            <div class=\\\"adf-empty-list-drag_drop\\\">{{'PROCESS-ATTACHMENT.EMPTY.DRAG-AND-DROP.TITLE' | translate}}</div>\\n            <div class=\\\"adf-empty-list__any-files-here-to-add\\\"> {{'PROCESS-ATTACHMENT.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate}} </div>\\n        </div>\\n        <div adf-empty-list-footer *ngIf=\\\"!isDisabled()\\\">\\n            <img class=\\\"adf-empty-list__empty_doc_lib\\\" [src]=\\\"emptyListImageUrl\\\">\\n        </div>\\n    </adf-empty-list>\\n    <data-columns>\\n        <data-column key=\\\"icon\\\" type=\\\"icon\\\" srTitle=\\\"Thumbnail\\\" [sortable]=\\\"false\\\"></data-column>\\n        <data-column key=\\\"name\\\" type=\\\"text\\\" title=\\\"Name\\\" class=\\\"full-width ellipsis-cell\\\" [sortable]=\\\"true\\\"></data-column>\\n        <data-column key=\\\"created\\\" type=\\\"date\\\" format=\\\"shortDate\\\" title=\\\"Created On\\\"></data-column>\\n    </data-columns>\\n    <loading-content-template>\\n        <ng-template>\\n            <!--Add your custom loading template here-->\\n            <md-progress-spinner class=\\\"adf-attachment-list-loading-margin\\\" [color]=\\\"'primary'\\\" [mode]=\\\"'indeterminate'\\\">\\n            </md-progress-spinner>\\n        </ng-template>\\n    </loading-content-template>\\n</adf-datatable>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-attachment-list.component.html\n// module id = 573\n// module chunks = 4","module.exports = \"<adf-comments [readOnly]=\\\"readOnly\\\" [taskId]=\\\"processInstanceId\\\" (error)=\\\"onError($event)\\\" #activiticomments></adf-comments>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-comments.component.html\n// module id = 574\n// module chunks = 4","module.exports = \"<div class=\\\"menu-container\\\">\\n    <md-list>\\n        <md-list-item (click)=\\\"selectFilter(filter)\\\" *ngFor=\\\"let filter of filters\\\"\\n                        class=\\\"adf-filters__entry\\\" [class.active]=\\\"currentFilter === filter\\\">\\n            <md-icon *ngIf=\\\"hasIcon\\\" mdListIcon class=\\\"adf-filters__entry-icon\\\">assignment</md-icon>\\n            <span mdLine [attr.data-automation-id]=\\\"filter.name + '_filter'\\\">{{filter.name}}</span>\\n        </md-list-item>\\n    </md-list>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-filters.component.html\n// module id = 575\n// module chunks = 4","module.exports = \"<div *ngIf=\\\"!processInstanceDetails\\\">{{ 'DETAILS.MESSAGES.NONE'|translate }}</div>\\n<div *ngIf=\\\"processInstanceDetails\\\">\\n    <h2 class=\\\"mdl-card__title-text\\\">{{ getProcessNameOrDescription('medium') }}</h2>\\n    <adf-process-instance-header\\n        [processInstance]=\\\"processInstanceDetails\\\"\\n        (showProcessDiagram)=\\\"onShowProcessDiagram($event)\\\">\\n    </adf-process-instance-header>\\n    <div class=\\\"mdl-cell mdl-cell--4-col\\\">\\n        <button id=\\\"show-diagram-button\\\" type=\\\"button\\\" md-button md-raised-button [disabled]=\\\"isDiagramDisabled()\\\" (click)=\\\"onShowProcessDiagram(processInstanceId)\\\">{{ 'DETAILS.BUTTON.SHOW_DIAGRAM' | translate }}</button>\\n    </div>\\n    <div class=\\\"mdl-card mdl-shadow--2dp activiti-process-container\\\">\\n        <div class=\\\"mdl-cell mdl-cell--12-col\\\">\\n            <adf-process-instance-tasks\\n                [processInstanceDetails]=\\\"processInstanceDetails\\\"\\n                (taskClick)=\\\"onTaskClicked($event)\\\">\\n            </adf-process-instance-tasks>\\n        </div>\\n    </div>\\n    <div class=\\\"mdl-cell mdl-cell--4-col\\\" data-automation-id=\\\"header-status\\\" *ngIf=\\\"isRunning()\\\">\\n        <button type=\\\"button\\\" (click)=\\\"cancelProcess()\\\" class=\\\"mdl-button\\\">{{ 'DETAILS.BUTTON.CANCEL' | translate }}</button>\\n    </div>\\n    <md-card>\\n        <md-card-content>\\n            <adf-process-instance-comments #activiticomments\\n                [readOnly]=\\\"!isRunning()\\\"\\n                [processInstanceId]=\\\"processInstanceDetails.id\\\">\\n            </adf-process-instance-comments>\\n        </md-card-content>\\n    </md-card>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-details.component.html\n// module id = 576\n// module chunks = 4","module.exports = \"<md-card *ngIf=\\\"processInstance\\\" class=\\\"adf-card-container\\\">\\n    <md-card-content>\\n        <adf-card-view [properties]=\\\"properties\\\"></adf-card-view>\\n    </md-card-content>\\n</md-card>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-header.component.html\n// module id = 577\n// module chunks = 4","module.exports = \"<div  *ngIf=\\\"showRefreshButton\\\" class=\\\"process-tasks-refresh\\\" >\\n    <button (click)=\\\"onRefreshClicked()\\\" class=\\\"mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect\\\">\\n        <i class=\\\"material-icons\\\">refresh</i>\\n    </button>\\n</div>\\n\\n<!-- ACTIVE FORM -->\\n\\n<span class=\\\"activiti-label mdl-badge\\\"\\n      [attr.data-badge]=\\\"activeTasks?.length\\\">{{ 'DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>\\n\\n<div class=\\\"menu-container\\\" *ngIf=\\\"activeTasks?.length > 0\\\" data-automation-id=\\\"active-tasks\\\">\\n    <ul class='mdl-list'>\\n        <li class=\\\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\\\" *ngFor=\\\"let task of activeTasks\\\">\\n            <span class=\\\"mdl-list__item-primary-content\\\" (click)=\\\"clickTask($event, task)\\\">\\n                <i class=\\\"material-icons mdl-list__item-icon\\\">assignment</i>\\n                <span>{{task.name || 'Nameless task'}}</span>\\n                <span class=\\\"mdl-list__item-sub-title\\\">\\n                    {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\\n                </span>\\n            </span>\\n        </li>\\n    </ul>\\n</div>\\n\\n<!-- START FORM -->\\n\\n<div *ngIf=\\\"activeTasks?.length === 0\\\" data-automation-id=\\\"active-tasks-none\\\" class=\\\"no-results\\\">\\n    {{ 'DETAILS.TASKS.NO_ACTIVE' | translate }}\\n</div>\\n\\n<div *ngIf=\\\"hasStartFormDefined()\\\">\\n    <span class=\\\"activiti-label\\\">{{ 'DETAILS.LABELS.START_FORM'|translate }}</span>\\n\\n    <!--IF START TASK COMPLETED -->\\n    <div class=\\\"menu-container\\\">\\n        <ul class='mdl-list'>\\n            <li class=\\\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\\\">\\n                <span class=\\\"mdl-list__item-primary-content\\\" (click)=\\\"clickStartTask($event)\\\">\\n                    <i class=\\\"material-icons mdl-list__item-icon\\\">assignment</i>\\n                    <span>{{ 'DETAILS.LABELS.START_FORM'|translate }}</span>\\n                    <span class=\\\"mdl-list__item-sub-title\\\">\\n                        {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}\\n                    </span>\\n                </span>\\n            </li>\\n        </ul>\\n    </div>\\n\\n</div>\\n\\n<!-- COMPLETED FORM -->\\n<span class=\\\"activiti-label mdl-badge\\\"\\n      [attr.data-badge]=\\\"completedTasks?.length\\\">{{ 'DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>\\n\\n<div class=\\\"menu-container\\\" *ngIf=\\\"completedTasks?.length > 0\\\" data-automation-id=\\\"completed-tasks\\\">\\n    <ul class='mdl-list'>\\n        <li class=\\\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\\\" *ngFor=\\\"let task of completedTasks\\\">\\n            <span class=\\\"mdl-list__item-primary-content\\\" (click)=\\\"clickTask($event, task)\\\">\\n                <i class=\\\"material-icons mdl-list__item-icon\\\">assignment</i>\\n                <span>{{task.name || 'Nameless task'}}</span>\\n                <span class=\\\"mdl-list__item-sub-title\\\">\\n                    {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\\n                </span>\\n            </span>\\n        </li>\\n    </ul>\\n</div>\\n\\n<div *ngIf=\\\"completedTasks?.length === 0\\\" data-automation-id=\\\"completed-tasks-none\\\" class=\\\"no-results\\\">\\n    {{ 'DETAILS.TASKS.NO_COMPLETED' | translate }}\\n</div>\\n\\n<dialog *ngIf=\\\"hasStartFormDefined()\\\" class=\\\"mdl-dialog task-details-dialog\\\" #startDialog>\\n    <h4 class=\\\"mdl-dialog__title\\\">{{ 'DETAILS.LABELS.START_FORM'|translate }}</h4>\\n    <div class=\\\"mdl-dialog__content form__size\\\">\\n        <adf-start-form [processId]=\\\"processId\\\" [processDefinitionId]=\\\"processInstanceDetails?.processDefinitionId\\\"\\n                             [showRefreshButton]=\\\"false\\\" [readOnlyForm]=\\\"true\\\"\\n                             (formContentClicked)='onFormContentClick($event)'>\\n        </adf-start-form>\\n    </div>\\n    <div class=\\\"mdl-dialog__actions\\\">\\n        <button type=\\\"button\\\" (click)=\\\"closeSartDialog()\\\" class=\\\"mdl-button close\\\">{{ 'DETAILS.TASKS.TASK_CLOSE' | translate }}</button>\\n    </div>\\n</dialog>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-tasks.component.html\n// module id = 578\n// module chunks = 4","module.exports = \"<div id=\\\"setVariableBtn\\\" (click)=\\\"showAddDialog()\\\" class=\\\"icon material-icons\\\">add</div>\\n<div class=\\\"mdl-tooltip\\\" for=\\\"setVariableBtn\\\">\\n    {{ 'DETAILS.VARIABLES.BUTTON.ADD' |translate }}\\n</div>\\n\\n\\n<div>\\n    <adf-datatable\\n    [data]=\\\"data\\\"\\n    [actions]=\\\"true\\\"\\n    [loading]=\\\"isLoading\\\"\\n    (showRowActionsMenu)=\\\"onShowRowActionsMenu($event)\\\"\\n    (executeRowAction)=\\\"onExecuteRowAction($event)\\\">\\n        <loading-content-template>\\n            <ng-template>\\n                <!--Add your custom loading template here-->\\n                <md-spinner\\n                    class=\\\"adf-variable-list-loading-margin\\\"\\n                    [color]=\\\"'primary'\\\"\\n                    [mode]=\\\"'indeterminate'\\\">\\n                </md-spinner>\\n            </ng-template>\\n        </loading-content-template>\\n        <no-content-template>\\n            <!--Add your custom empty template here-->\\n            <ng-template>\\n                <div class=\\\"no-content-message\\\">\\n                    {{ 'DETAILS.VARIABLES.NONE' | translate }}\\n                </div>\\n            </ng-template>\\n        </no-content-template>\\n    </adf-datatable>\\n</div>\\n\\n<dialog class=\\\"mdl-dialog add-dialog\\\" #addDialog>\\n    <h4 class=\\\"mdl-dialog__title\\\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.TITLE' |translate }}</h4>\\n    <div class=\\\"mdl-dialog__content\\\">\\n        <div class=\\\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\\\">\\n            <label class=\\\"mdl-textfield__label\\\" for=\\\"addVariableName\\\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.NAME' |translate }}</label>\\n            <input class=\\\"mdl-textfield__input\\\" type=\\\"text\\\" [(ngModel)]=\\\"variableName\\\" id=\\\"addVariableName\\\" />\\n        </div>\\n        <div class=\\\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\\\">\\n            <label class=\\\"mdl-textfield__label\\\" for=\\\"addVariableValue\\\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.VALUE' |translate }}</label>\\n            <input class=\\\"mdl-textfield__input\\\" type=\\\"text\\\" [(ngModel)]=\\\"variableValue\\\" id=\\\"addVariableValue\\\" />\\n        </div>\\n    </div>\\n    <div class=\\\"mdl-dialog__actions\\\">\\n        <button type=\\\"button\\\" (click)=\\\"add()\\\" class=\\\"mdl-button\\\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.SET' |translate }}</button>\\n        <button type=\\\"button\\\" (click)=\\\"closeAddDialog()\\\" class=\\\"mdl-button close\\\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.CANCEL' |translate }}</button>\\n    </div>\\n</dialog>\\n\\n\\n<dialog class=\\\"mdl-dialog edit-dialog\\\" #editDialog>\\n    <h4 class=\\\"mdl-dialog__title\\\">{{ 'DETAILS.VARIABLES.EDIT_DIALOG.TITLE' |translate }}</h4>\\n    <div class=\\\"mdl-dialog__content\\\">\\n        <div class=\\\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\\\">\\n            <label class=\\\"mdl-textfield__label\\\" for=\\\"editVariableName\\\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.NAME' |translate }}</label>\\n            <input class=\\\"mdl-textfield__input\\\" type=\\\"text\\\" [(ngModel)]=\\\"variableName\\\" id=\\\"editVariableName\\\" [readonly]=\\\"true\\\" />\\n        </div>\\n        <div class=\\\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\\\">\\n            <label class=\\\"mdl-textfield__label\\\" for=\\\"editVariableValue\\\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.VALUE' |translate }}</label>\\n            <input class=\\\"mdl-textfield__input\\\" type=\\\"text\\\" [(ngModel)]=\\\"variableValue\\\" id=\\\"editVariableValue\\\" />\\n        </div>\\n        <div class=\\\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\\\">\\n            <label class=\\\"mdl-textfield__label\\\" for=\\\"editVariableScope\\\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.SCOPE' |translate }}</label>\\n            <input class=\\\"mdl-textfield__input\\\" type=\\\"text\\\" [(ngModel)]=\\\"variableName\\\" id=\\\"editVariableScope\\\" [readonly]=\\\"true\\\" />\\n        </div>\\n    </div>\\n    <div class=\\\"mdl-dialog__actions\\\">\\n        <button type=\\\"button\\\" (click)=\\\"edit()\\\" class=\\\"mdl-button\\\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.SET' |translate }}</button>\\n        <button type=\\\"button\\\" (click)=\\\"closeEditDialog()\\\" class=\\\"mdl-button close\\\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.CANCEL' |translate }}</button>\\n    </div>\\n</dialog>\\n\\n\\n<dialog class=\\\"mdl-dialog error-dialog\\\" #errorDialog>\\n    <h4 class=\\\"mdl-dialog__title\\\">{{ 'DETAILS.VARIABLES.ERROR_DIALOG.TITLE' |translate }}</h4>\\n    <div class=\\\"mdl-dialog__content\\\">\\n        <p>{{ 'DETAILS.VARIABLES.ERROR_DIALOG.DESCRIPTION' |translate }}</p>\\n    </div>\\n    <div class=\\\"mdl-dialog__actions\\\">\\n        <button type=\\\"button\\\" (click)=\\\"closeErrorDialog()\\\" class=\\\"mdl-button close\\\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.OK' |translate }}</button>\\n    </div>\\n</dialog>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-instance-variables.component.html\n// module id = 579\n// module chunks = 4","module.exports = \"<div *ngIf=\\\"!requestNode\\\">{{ 'FILTERS.MESSAGES.NONE' | translate }}</div>\\n<div *ngIf=\\\"requestNode\\\">\\n    <adf-datatable\\n        [data]=\\\"data\\\"\\n        [loading]=\\\"isLoading\\\"\\n        (rowClick)=\\\"onRowClick($event)\\\">\\n        <loading-content-template>\\n            <ng-template>\\n                <!--Add your custom loading template here-->\\n                <md-progress-spinner\\n                    class=\\\"adf-process-list-loading-margin\\\"\\n                    [color]=\\\"'primary'\\\"\\n                    [mode]=\\\"'indeterminate'\\\">\\n                </md-progress-spinner>\\n            </ng-template>\\n        </loading-content-template>\\n        <no-content-template>\\n            <!--Add your custom empty template here-->\\n            <ng-template>\\n                <div class=\\\"no-content-message\\\">\\n                    {{ 'PROCESSLIST.NONE' | translate }}\\n                </div>\\n            </ng-template>\\n        </no-content-template>\\n    </adf-datatable>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/processlist.component.html\n// module id = 580\n// module chunks = 4","module.exports = \"<md-card>\\n\\t<md-card-title>{{'START_PROCESS.FORM.TITLE' | translate}}\\n\\t</md-card-title>\\n\\t<md-card-content *ngIf=\\\"isProcessDefinitionEmpty()\\\">\\n\\t\\t<md-card-subtitle id=\\\"error-message\\\" *ngIf=\\\"errorMessageId\\\">\\n\\t\\t\\t{{errorMessageId|translate}}\\n\\t\\t</md-card-subtitle>\\n\\t\\t<md-input-container>\\n\\t\\t\\t<input mdInput placeholder=\\\"{{'START_PROCESS.FORM.LABEL.NAME'|translate}}\\\" [(ngModel)]=\\\"name\\\" id=\\\"processName\\\" required />\\n\\t\\t</md-input-container>\\n\\t\\t<md-select placeholder=\\\"{{'START_PROCESS.FORM.LABEL.TYPE'|translate}}\\\" [(ngModel)]=\\\"currentProcessDef.id\\\" (ngModelChange)=\\\"onProcessDefChange($event)\\\" required>\\n\\t\\t\\t<md-option>{{'START_PROCESS.FORM.TYPE_PLACEHOLDER' | translate}}</md-option>\\n\\t\\t\\t<md-option *ngFor=\\\"let processDef of processDefinitions\\\" [value]=\\\"processDef.id\\\">\\n\\t\\t\\t\\t{{ processDef.name }}\\n\\t\\t\\t</md-option>\\n\\t\\t</md-select>\\n\\t\\t<activiti-start-form *ngIf=\\\"hasStartForm()\\\" [processDefinitionId]=\\\"currentProcessDef.id\\\" (outcomeClick)=\\\"onOutcomeClick($event)\\\"></activiti-start-form>\\n\\t</md-card-content>\\n\\t<md-card-content *ngIf=\\\"hasErrorMessage()\\\">\\n\\t\\t<md-card-subtitle class=\\\"error-message\\\" id=\\\"no-process-message\\\">\\n\\t\\t\\t{{'START_PROCESS.NO_PROCESS_DEFINITIONS' | translate}}\\n\\t\\t</md-card-subtitle>\\n\\t</md-card-content>\\n\\t<md-card-actions *ngIf=\\\"isProcessDefinitionEmpty()\\\">\\n\\t\\t<button md-button (click)=\\\"cancelStartProcess()\\\" id=\\\"cancle_process\\\" class=\\\"\\\"> {{'START_PROCESS.FORM.ACTION.CANCEL'| translate}} </button>\\n\\t\\t<button md-button *ngIf=\\\"!hasStartForm()\\\" [disabled]=\\\"!validateForm()\\\" (click)=\\\"startProcess()\\\" data-automation-id=\\\"btn-start\\\" id=\\\"button-start\\\" class=\\\"btn-start\\\"> {{'START_PROCESS.FORM.ACTION.START' | translate}} </button>\\n\\t</md-card-actions>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/start-process.component.html\n// module id = 581\n// module chunks = 4","module.exports = \"adf-datatable /deep/ th span {\\n  color: #232323; }\\n\\nadf-datatable /deep/ .data-cell {\\n  cursor: pointer !important; }\\n\\n.adf-attachment-list-loading-margin {\\n  margin-left: calc((100% - 100px) / 2);\\n  margin-right: calc((100% - 100px) / 2); }\\n\\n.adf-empty-list-header {\\n  height: 32px;\\n  opacity: 0.26 !important;\\n  font-family: Muli, Helvetica, Arial, sans-serif;\\n  font-size: 24px;\\n  line-height: 1.33;\\n  letter-spacing: -1px;\\n  color: #000000; }\\n\\n.adf-empty-list-drag_drop {\\n  height: 56px;\\n  opacity: 0.54;\\n  font-family: Muli, Helvetica, Arial, sans-serif;\\n  font-size: 56px;\\n  line-height: 1;\\n  letter-spacing: -2px;\\n  color: #000000;\\n  margin-top: 40px !important; }\\n\\n.adf-empty-list__any-files-here-to-add {\\n  height: 24px;\\n  opacity: 0.54;\\n  font-family: Muli, Helvetica, Arial, sans-serif;\\n  font-size: 16px;\\n  line-height: 1.5;\\n  letter-spacing: -0.4px;\\n  color: #000000;\\n  margin-top: 17px; }\\n\\n.adf-empty-list__empty_doc_lib {\\n  width: 565px;\\n  height: 161px;\\n  object-fit: contain;\\n  margin-top: 17px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-processlist/src/components/process-attachment-list.component.scss\n// module id = 670\n// module chunks = 4","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-processlist/src/components/process-filters.component.scss\n// module id = 671\n// module chunks = 4","module.exports = \"md-card {\\n  width: calc(66.6666% - 48px);\\n  margin-left: calc(33.3333333333% / 2);\\n  margin-right: calc(33.3333333333% / 2);\\n  margin-top: 10px; }\\n\\nmd-input-container {\\n  width: 100%; }\\n\\nmd-select {\\n  width: 100%;\\n  padding: 16px 0px 0px 0px; }\\n\\nmd-card-actions {\\n  text-align: right; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-processlist/src/components/start-process.component.scss\n// module id = 672\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./process-attachment-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-attachment-list.component.scss\n// module id = 753\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./process-filters.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/process-filters.component.scss\n// module id = 754\n// module chunks = 4","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./start-process.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-processlist/src/components/start-process.component.scss\n// module id = 755\n// module chunks = 4","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ActivitiContentService } from 'ng2-activiti-form';\n\n@Component({\n    selector: 'adf-create-process-attachment',\n    styles: [require('./create-process-attachment.component.css')],\n    template: require('./create-process-attachment.component.html')\n})\nexport class CreateProcessAttachmentComponent implements OnChanges {\n\n    @Input()\n    processInstanceId: string;\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private activitiContentService: ActivitiContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.processInstanceId = changes['processInstanceId'].currentValue;\n        }\n    }\n\n    onFileUpload(event: any) {\n        let filesList: File[] = event.detail.files.map(obj => obj.file);\n\n        for (let fileInfoObj of filesList) {\n            let file: File = fileInfoObj;\n            let opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/components/create-process-attachment.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n    MdButtonModule,\n    MdCardModule,\n    MdInputModule,\n    MdProgressSpinnerModule,\n    MdSelectModule } from '@angular/material';\nimport { ActivitiFormModule } from 'ng2-activiti-form';\nimport { ActivitiTaskListModule } from 'ng2-activiti-tasklist';\nimport { CardViewUpdateService, CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\nimport { DataTableModule } from 'ng2-alfresco-datatable';\n\nimport { CreateProcessAttachmentComponent } from './src/components/create-process-attachment.component';\nimport { ProcessAttachmentListComponent } from './src/components/process-attachment-list.component';\nimport { ProcessAuditDirective } from './src/components/process-audit.directive';\nimport { ProcessCommentsComponent } from './src/components/process-comments.component';\nimport { ProcessFiltersComponent } from './src/components/process-filters.component';\nimport { ProcessInstanceDetailsComponent } from './src/components/process-instance-details.component';\nimport { ProcessInstanceHeaderComponent } from './src/components/process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './src/components/process-instance-tasks.component';\nimport { ProcessInstanceVariablesComponent } from './src/components/process-instance-variables.component';\nimport { ProcessInstanceListComponent } from './src/components/processlist.component';\nimport { StartProcessInstanceComponent } from './src/components/start-process.component';\nexport {ProcessAttachmentListComponent} from './src/components/process-attachment-list.component';\nexport {ProcessCommentsComponent} from './src/components/process-comments.component';\nexport {ProcessFiltersComponent} from './src/components/process-filters.component';\nexport {ProcessInstanceDetailsComponent} from './src/components/process-instance-details.component';\nexport {ProcessAuditDirective} from './src/components/process-audit.directive';\nexport {ProcessInstanceHeaderComponent} from './src/components/process-instance-header.component';\nexport {ProcessInstanceTasksComponent} from './src/components/process-instance-tasks.component';\nexport {ProcessInstanceVariablesComponent} from './src/components/process-instance-variables.component';\nexport {ProcessInstanceListComponent} from './src/components/processlist.component';\nexport {StartProcessInstanceComponent} from './src/components/start-process.component';\n\nimport { ProcessUploadService } from './src/services/process-upload.service';\nimport { ProcessService } from './src/services/process.service';\nexport { ProcessService } from './src/services/process.service';\nexport { ProcessUploadService } from './src/services/process-upload.service';\n\n// models\nexport * from './src/models/filter-process.model';\nexport * from './src/models/process-definition.model';\nexport * from './src/models/process-instance.model';\nexport * from './src/models/process-instance-filter.model';\nexport * from './src/models/process-instance-variable.model';\n\n// Old derprecate export\nimport {CreateProcessAttachmentComponent as ActivitiCreateProcessAttachmentComponent } from './src/components/create-process-attachment.component';\nimport {ProcessAttachmentListComponent as ActivitiProcessAttachmentListComponent } from './src/components/process-attachment-list.component';\nimport {ProcessCommentsComponent as ActivitiProcessComments } from './src/components/process-comments.component';\nimport {ProcessFiltersComponent as ActivitiProcessFilters } from './src/components/process-filters.component';\nimport {ProcessInstanceDetailsComponent as ActivitiProcessInstanceDetails } from './src/components/process-instance-details.component';\nimport {ProcessInstanceHeaderComponent as ActivitiProcessInstanceHeader } from './src/components/process-instance-header.component';\nimport {ProcessInstanceTasksComponent as ActivitiProcessInstanceTasks } from './src/components/process-instance-tasks.component';\nimport {ProcessInstanceVariablesComponent as ActivitiProcessInstanceVariables } from './src/components/process-instance-variables.component';\nimport {ProcessInstanceListComponent as ActivitiProcessInstanceListComponent } from './src/components/processlist.component';\nimport {StartProcessInstanceComponent as ActivitiStartProcessInstance } from './src/components/start-process.component';\nimport {ProcessService as ActivitiProcessService } from './src/services/process.service';\nexport {CreateProcessAttachmentComponent as ActivitiCreateProcessAttachmentComponent } from './src/components/create-process-attachment.component';\nexport {ProcessAttachmentListComponent as ActivitiProcessAttachmentListComponent} from './src/components/process-attachment-list.component';\nexport {ProcessCommentsComponent as ActivitiProcessComments } from './src/components/process-comments.component';\nexport {ProcessFiltersComponent as ActivitiProcessFilters} from './src/components/process-filters.component';\nexport {ProcessInstanceDetailsComponent as ActivitiProcessInstanceDetails} from './src/components/process-instance-details.component';\nexport {ProcessInstanceHeaderComponent as ActivitiProcessInstanceHeader} from './src/components/process-instance-header.component';\nexport {ProcessInstanceTasksComponent as ActivitiProcessInstanceTasks} from './src/components/process-instance-tasks.component';\nexport {ProcessInstanceVariablesComponent as ActivitiProcessInstanceVariables} from './src/components/process-instance-variables.component';\nexport {ProcessInstanceListComponent as ActivitiProcessInstanceListComponent} from './src/components/processlist.component';\nexport {StartProcessInstanceComponent as ActivitiStartProcessInstance} from './src/components/start-process.component';\nexport {ProcessService as ActivitiProcessService} from './src/services/process.service';\n\nexport const ACTIVITI_PROCESSLIST_DIRECTIVES: [any] = [\n    ProcessInstanceListComponent,\n    ProcessFiltersComponent,\n    ProcessInstanceDetailsComponent,\n    ProcessAuditDirective,\n    ProcessInstanceHeaderComponent,\n    ProcessInstanceTasksComponent,\n    ProcessInstanceVariablesComponent,\n    ProcessCommentsComponent,\n    StartProcessInstanceComponent,\n    ProcessAttachmentListComponent,\n    CreateProcessAttachmentComponent,\n\n    // Old Deprecated export\n    ActivitiProcessInstanceListComponent,\n    ActivitiProcessFilters,\n    ActivitiProcessInstanceHeader,\n    ActivitiProcessInstanceTasks,\n    ActivitiProcessInstanceVariables,\n    ActivitiProcessComments,\n    ActivitiProcessInstanceDetails,\n    ActivitiStartProcessInstance,\n    ActivitiProcessAttachmentListComponent,\n    ActivitiCreateProcessAttachmentComponent\n];\n\nexport const ACTIVITI_PROCESSLIST_PROVIDERS: [any] = [\n    ProcessService,\n    ProcessUploadService,\n    CardViewUpdateService,\n\n    // Old Deprecated import\n    ActivitiProcessService\n];\n\n@NgModule({\n    imports: [\n        CoreModule,\n        DataTableModule,\n        ActivitiFormModule,\n        ActivitiTaskListModule,\n        MdProgressSpinnerModule,\n        MdButtonModule,\n        MdCardModule,\n        MdInputModule,\n        MdSelectModule\n    ],\n    declarations: [\n        ...ACTIVITI_PROCESSLIST_DIRECTIVES\n    ],\n    providers: [\n        ...ACTIVITI_PROCESSLIST_PROVIDERS,\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'ng2-activiti-processlist',\n                source: 'assets/ng2-activiti-processlist'\n            }\n        }\n    ],\n    exports: [\n        ...ACTIVITI_PROCESSLIST_DIRECTIVES\n    ]\n})\nexport class ActivitiProcessListModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ActivitiProcessListModule,\n            providers: [\n                ...ACTIVITI_PROCESSLIST_PROVIDERS\n            ]\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessInstance {\n\n    public businessKey: string;\n    public ended: any;\n    public graphicalNotationDefined: boolean;\n    public id: string;\n    public name: string;\n    public processDefinitionCategory: string;\n    public processDefinitionDeploymentId: string;\n    public processDefinitionDescription: string;\n    public processDefinitionId: string;\n    public processDefinitionKey: string;\n    public processDefinitionName: string;\n    public processDefinitionVersion: number;\n    public startFormDefined: boolean;\n    public started: string;\n    public startedBy: any;\n    public suspended: boolean;\n    public tenantId: string;\n    public variables: any;\n\n    constructor(data?: any) {\n        this.businessKey = data && data.businessKey !== undefined ? data.businessKey : null;\n        this.ended = data && data.ended !== undefined ? data.ended : null;\n        this.graphicalNotationDefined = data && data.graphicalNotationDefined !== undefined ? data.graphicalNotationDefined : null;\n        this.id = data && data.id !== undefined ? data.id : null;\n        this.name = data && data.name !== undefined ? data.name : null;\n        this.processDefinitionCategory = data && data.processDefinitionCategory !== undefined ? data.processDefinitionCategory : null;\n        this.processDefinitionDeploymentId = data && data.processDefinitionDeploymentId !== undefined ? data.processDefinitionDeploymentId : null;\n        this.processDefinitionDescription = data && data.processDefinitionDescription !== undefined ? data.processDefinitionDescription : null;\n        this.processDefinitionId = data && data.processDefinitionId !== undefined ? data.processDefinitionId : null;\n        this.processDefinitionKey = data && data.processDefinitionKey !== undefined ? data.processDefinitionKey : null;\n        this.processDefinitionName = data && data.processDefinitionName !== undefined ? data.processDefinitionName : null;\n        this.processDefinitionVersion = data && data.processDefinitionVersion !== undefined ? data.processDefinitionVersion : null;\n        this.startFormDefined = data && data.startFormDefined !== undefined ? data.startFormDefined : null;\n        this.started = data && data.started !== undefined ? data.started : null;\n        this.startedBy = data && data.startedBy !== undefined ? data.startedBy : null;\n        this.suspended = data && data.suspended !== undefined ? data.suspended : null;\n        this.tenantId = data && data.tenantId !== undefined ? data.tenantId : null;\n        this.variables = data && data.variables !== undefined ? data.variables : null;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-processlist/src/models/process-instance.model.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_86__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-activiti-tasklist\"\n// module id = 86\n// module chunks = 4"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjDA;;;;;;;;;;;;;;;AAeA;;AASA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAxBA;AAiCA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAVA;AAmBA;AAIA;AACA;AACA;AACA;AACA;AAAA;AARA;;;;;;;;;;AC5EA;;;;;;;;;;;;;;;AAeA;;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxBA;;;;;;;;;;ACjBA;;;;;;;;;;;;;;;AAeA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAVA;;;;;;;;;;ACjBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AASA;AA2BA;AAAA;AACA;AAtBA;AAGA;AAGA;AAGA;AAGA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAxFA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAlBA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AA4BA;AA3BA;AAAA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAGA;AAAA;AAIA;AAAA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAjBA;AADA;AAKA;AAJA;AAAA;;;;;;;;;ACrBA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAEA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AAEA;AAAA;AAAA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAzTA;AADA;AAGA;AAFA;AAAA;;;;;;;;;;;ACnCA;;;;;;;;;;;;;;;AAeA;;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAlBA;;;;;;;;ACjBA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAOA;AAAA;AAkDA;AA3CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA/CA;AADA;AACA;AAAA;AAHA;AALA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC1BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAmCA;AAAA;AAAA;AACA;AA9BA;AAGA;AAEA;AACA;AAqxJA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAeA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAjCA;AALA;AACA;AACA;AACA;AACA;AAoCA;AAnCA;AAAA;;;;;;;;;AChCA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACPA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AASA;AAuBA;AAAA;AACA;AACA;AAnBA;AAGA;AAGA;AAGA;AAGA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AA/JA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAlBA;AALA;AACA;AACA;AACA;AACA;AAwBA;AAvBA;AAAA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACPA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAQA;AANA;AAYA;AAGA;AAKA;AAHA;AACA;AACA;AACA;AAAA;AAXA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AATA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAOA;AA8BA;AAAA;AAAA;AAxBA;AAGA;AAGA;AASA;AAOA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AArKA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AArBA;AALA;AACA;AACA;AACA;AACA;AA+BA;AA9BA;AAAA;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAOA;AAoCA;AAAA;AACA;AAzBA;AAGA;AAGA;AAGA;AAGA;AAKA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AA9GA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAKA;AADA;AACA;AAAA;AA7BA;AALA;AACA;AACA;AACA;AACA;AAqCA;AApCA;AAAA;;;;;;;;;;;AChCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AACA;AAUA;AAqCA;AAAA;AA5BA;AAWA;AACA;AACA;AACA;AACA;AAMA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3OA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAlBA;AANA;AACA;AACA;AACA;AACA;AACA;AAsCA;AArCA;AAAA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAyCA;AAAA;AAhBA;AAGA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AArPA;AAAA;AAAA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAKA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AA/BA;AALA;AACA;AACA;AACA;AACA;AA0CA;AAzCA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AAEA;AAOA;AA4BA;AAAA;AAnBA;AAGA;AAGA;AAKA;AAIA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3HA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAlBA;AALA;AACA;AACA;AACA;AACA;AA6BA;AA5BA;AAAA;;;;;;;;;AC7BA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAOA;AAWA;AAAA;AALA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAlCA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AAYA;AAXA;AAAA;;;;;;;;;;;ACzBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAgCA;AAAA;AASA;AARA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AATA;AA9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;;;;;;;;;;;ACxJA;;;;;;;;;;;;;;;AAeA;;AAEA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA1CA;;;;;;;;ACjBA;;;;;","sourceRoot":""}