{"version":3,"file":"ng2-activiti-form/bundles/ng2-activiti-form.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6**","webpack:///webpack/bootstrap b7ef3555f7a1d27de299?877f**","webpack:///external \"@angular/core\"?73d1**","webpack:///external \"ng2-alfresco-core\"?bd09*","webpack:///external \"ng2-alfresco-datatable\"","webpack:///./ng2-activiti-form/src/events/form.event.ts","webpack:///./~/css-loader/lib/css-base.js?da04","webpack:///./ng2-activiti-form/src/events/index.ts","webpack:///./ng2-activiti-form/src/components/form-list.component.ts","webpack:///./ng2-activiti-form/src/services/activiti-content-service.ts","webpack:///external \"moment\"?a88d*","webpack:///./ng2-activiti-form/src/components/widgets/core/container.model.ts","webpack:///./ng2-activiti-form/src/services/activiti-alfresco.service.ts","webpack:///external \"rxjs/Rx\"?3be5**","webpack:///external \"@angular/http\"?f367*","webpack:///external \"rxjs/Observable\"?16be","webpack:///./ng2-activiti-form/src/services/widget-visibility.service.ts","webpack:///external \"@angular/material\"?8d30*","webpack:///./ng2-activiti-form/src/components/form.component.ts","webpack:///./ng2-activiti-form/src/components/widgets/amount/amount.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/attach/attach.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/checkbox/checkbox.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/container/container.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/container-column.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/content-link.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-field.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-outcome.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/tab.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/date/date.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.ts","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.ts","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.ts","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.ts","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.ts","webpack:///./ng2-activiti-form/src/components/widgets/error/error.component.ts","webpack:///./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/number/number.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/people/people.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/tabs/tabs.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/text/text-mask.component.ts","webpack:///./ng2-activiti-form/src/components/widgets/text/text.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/unknown/unknown.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/upload/upload.widget.ts","webpack:///./ng2-activiti-form/src/events/form-field.event.ts","webpack:///./ng2-activiti-form/src/components/form.component.scss?f6e1","webpack:///./ng2-activiti-form/src/components/form-field/form-field.component.ts","webpack:///./ng2-activiti-form/src/components/material.module.ts","webpack:///./ng2-activiti-form/src/services/form.service.ts","webpack:///./ng2-activiti-form/src/components/start-form.component.ts","webpack:///./ng2-activiti-form/src/components/widgets/content/content.widget.ts","webpack:///./ng2-activiti-form/src/components/widgets/attach/attach.widget.css","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.css","webpack:///./ng2-activiti-form/src/components/widgets/attach/attach.widget.css?e98d","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.css?4082","webpack:///./ng2-activiti-form/src/components/widgets/container/container.widget.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-field-metadata.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-field-option.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-field-templates.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-outcome-event.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-values.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form.model.ts","webpack:///./ng2-activiti-form/src/events/form-error.event.ts","webpack:///./ng2-activiti-form/src/events/validate-form-field.event.ts","webpack:///./ng2-activiti-form/src/events/validate-form.event.ts","webpack:///./ng2-activiti-form/src/models/form-definition.model.ts","webpack:///./ng2-activiti-form/src/models/node-metadata.model.ts","webpack:///./ng2-activiti-form/src/components/form-list.component.html","webpack:///./ng2-activiti-form/src/components/form.component.html","webpack:///./ng2-activiti-form/src/components/start-form.component.html","webpack:///./ng2-activiti-form/src/components/widgets/amount/amount.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/attach/attach.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/checkbox/checkbox.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/container/container.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/content/content.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/date/date.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.html","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.html","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.html","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.html","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.html","webpack:///./ng2-activiti-form/src/components/widgets/error/error.component.html","webpack:///./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/number/number.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/people/people.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/tabs/tabs.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/text/text.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.html","webpack:///./ng2-activiti-form/src/components/widgets/upload/upload.widget.html","webpack:///./ng2-activiti-form/src/components/form-list.component.scss","webpack:///./ng2-activiti-form/src/components/form.component.scss","webpack:///./ng2-activiti-form/src/components/widgets/amount/amount.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/container/container.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/content/content.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/date/date.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.scss","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.scss","webpack:///./ng2-activiti-form/src/components/widgets/error/error.component.scss","webpack:///./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/number/number.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/people/people.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/text/text.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/unknown/unknown.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/upload/upload.widget.scss","webpack:///./ng2-activiti-form/src/components/widgets/core/form-widget.model.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/index.ts","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.model.ts","webpack:///./ng2-activiti-form/src/services/ecm-model.service.ts","webpack:///./ng2-activiti-form/src/components/form-list.component.scss?42cd","webpack:///./ng2-activiti-form/src/components/widgets/amount/amount.widget.scss?9498","webpack:///./ng2-activiti-form/src/components/widgets/container/container.widget.scss?9a18","webpack:///./ng2-activiti-form/src/components/widgets/content/content.widget.scss?b003","webpack:///./ng2-activiti-form/src/components/widgets/date/date.widget.scss?8ea3","webpack:///./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.scss?625d","webpack:///./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.scss?c12e","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.scss?a1b9","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss?475b","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.scss?677d","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss?f84c","webpack:///./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.scss?1ea5","webpack:///./ng2-activiti-form/src/components/widgets/error/error.component.scss?1790","webpack:///./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.scss?84fb","webpack:///./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.scss?1f14","webpack:///./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.scss?31f2","webpack:///./ng2-activiti-form/src/components/widgets/number/number.widget.scss?5226","webpack:///./ng2-activiti-form/src/components/widgets/people/people.widget.scss?8e5b","webpack:///./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.scss?3f7e","webpack:///./ng2-activiti-form/src/components/widgets/text/text.widget.scss?685c","webpack:///./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.scss?a9fe","webpack:///./ng2-activiti-form/src/components/widgets/unknown/unknown.widget.scss?5a7a","webpack:///./ng2-activiti-form/src/components/widgets/upload/upload.widget.scss?9451","webpack:///./ng2-activiti-form/src/components/widgets/widget.component.ts","webpack:///external \"@angular/animations\"","webpack:///./ng2-activiti-form/index.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-field-types.ts","webpack:///./ng2-activiti-form/src/components/widgets/core/form-field-validator.ts","webpack:///./ng2-activiti-form/src/components/widgets/index.ts","webpack:///./ng2-activiti-form/src/services/form-rendering.service.ts","webpack:///external \"@angular/forms\"?af17","webpack:///./ng2-activiti-form/src/services/node.service.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"@angular/forms\"), require(\"ng2-alfresco-datatable\"), require(\"moment\"), require(\"@angular/http\"), require(\"rxjs/Observable\"), require(\"@angular/animations\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"ng2-alfresco-core\", \"rxjs/Rx\", \"@angular/material\", \"@angular/forms\", \"ng2-alfresco-datatable\", \"moment\", \"@angular/http\", \"rxjs/Observable\", \"@angular/animations\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-activiti-form\"] = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"@angular/forms\"), require(\"ng2-alfresco-datatable\"), require(\"moment\"), require(\"@angular/http\"), require(\"rxjs/Observable\"), require(\"@angular/animations\"));\n\telse\n\t\troot[\"ng2-activiti-form\"] = factory(root[\"@angular/core\"], root[\"ng2-alfresco-core\"], root[\"rxjs/Rx\"], root[\"@angular/material\"], root[\"@angular/forms\"], root[\"ng2-alfresco-datatable\"], root[\"moment\"], root[\"@angular/http\"], root[\"rxjs/Observable\"], root[\"@angular/animations\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_804__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 818);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b7ef3555f7a1d27de299","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 1\n// module chunks = 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-datatable\"\n// module id = 10\n// module chunks = 2 3 4 6 15","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormModel } from './../components/widgets/core/index';\n\nexport class FormEvent {\n\n    private isDefaultPrevented: boolean = false;\n\n    readonly form: FormModel;\n\n    constructor(form: FormModel) {\n        this.form = form;\n    }\n\n    get defaultPrevented() {\n        return this.isDefaultPrevented;\n    }\n\n    preventDefault() {\n        this.isDefaultPrevented = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/events/form.event.ts","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 11\n// module chunks = 0 2 3 4 8","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { FormEvent } from './form.event';\nexport { FormErrorEvent } from './form-error.event';\nexport { FormFieldEvent } from './form-field.event';\nexport { ValidateFormFieldEvent } from './validate-form-field.event';\nexport { ValidateFormEvent } from './validate-form.event';\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/events/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../services/form.service';\n\n@Component({\n    selector: 'adf-form-list',\n    template: require('./form-list.component.html'),\n    styles: [require('./form-list.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormListComponent implements OnChanges {\n\n    @Input()\n    forms: any [] = [];\n\n    constructor(protected formService: FormService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.getForms();\n    }\n\n    isEmpty(): boolean {\n        return this.forms && this.forms.length === 0;\n    }\n\n    getForms() {\n        this.formService.getForms().subscribe((forms) => {\n            this.forms.push(...forms);\n        });\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/form-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class ActivitiContentService {\n\n    static UNKNOWN_ERROR_MESSAGE: string = 'Unknown error';\n    static GENERIC_ERROR_MESSAGE: string = 'Server error';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    getFileRawContent(contentId: number): Observable<any> {\n        let alfrescoApi = this.apiService.getInstance();\n        return Observable.fromPromise(alfrescoApi.activiti.contentApi.getRawContent(contentId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Return all the related content of the task\n     * @param taskId\n     * @returns {any}\n     */\n    getTaskRelatedContent(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.contentApi.getRelatedContentForTask(taskId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Return all the related content of the process\n     * @param processId\n     * @returns {any}\n     */\n    getProcessRelatedContent(processId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.contentApi.getRelatedContentForProcessInstance(processId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Delete a content by Id\n     * @param contentId\n     * @returns {any}\n     */\n    deleteRelatedContent(contentId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.contentApi.deleteContent(contentId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Return all the related content of the process instance\n     * @param processInstanceId\n     * @returns {any}\n     */\n    createProcessRelatedContent(processInstanceId: string, content: any, opts?: any): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.contentApi.createRelatedContentOnProcessInstance(processInstanceId, content, opts))\n            .catch(err => this.handleError(err));\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    toJsonArray(res: any) {\n        if (res) {\n            return res.data || [];\n        }\n        return [];\n    }\n\n    handleError(error: any): Observable<any> {\n        let errMsg = ActivitiContentService.UNKNOWN_ERROR_MESSAGE;\n        if (error) {\n            errMsg = (error.message) ? error.message :\n                error.status ? `${error.status} - ${error.statusText}` : ActivitiContentService.GENERIC_ERROR_MESSAGE;\n        }\n        this.logService.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n\n    createTaskRelatedContent(taskId: string, file: any, opts?: any) {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.contentApi.createRelatedContentOnTask(taskId, file, opts))\n            .catch(err => this.handleError(err));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/services/activiti-content-service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 14\n// module chunks = 0 1 2 3 5","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormFieldModel } from './form-field.model';\nimport { FormWidgetModel } from './form-widget.model';\n\nexport class ContainerModel extends FormWidgetModel {\n\n    field: FormFieldModel;\n\n    get isVisible(): boolean {\n        return this.field.isVisible;\n    }\n\n    constructor(field: FormFieldModel) {\n        if (field) {\n            super(field.form, field.json);\n            this.field = field;\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/container.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApi } from 'alfresco-js-api';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { ExternalContent } from '../components/widgets/core/external-content';\nimport { ExternalContentLink } from '../components/widgets/core/external-content-link';\n\n@Injectable()\nexport class ActivitiAlfrescoContentService {\n\n    static UNKNOWN_ERROR_MESSAGE: string = 'Unknown error';\n    static GENERIC_ERROR_MESSAGE: string = 'Server error';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Returns a list of child nodes below the specified folder\n     *\n     * @param accountId\n     * @param folderId\n     * @returns {null}\n     */\n    getAlfrescoNodes(accountId: string, folderId: string): Observable<[ExternalContent]> {\n        let apiService: AlfrescoApi = this.apiService.getInstance();\n        let accountShortId = accountId.replace('alfresco-', '');\n        return Observable.fromPromise(apiService.activiti.alfrescoApi.getContentInFolder(accountShortId, folderId))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Returns a list of child nodes below the specified folder\n     *\n     * @param accountId\n     * @param node\n     * @param siteId\n     * @returns {null}\n     */\n    linkAlfrescoNode(accountId: string, node: ExternalContent, siteId: string): Observable<ExternalContentLink> {\n        let apiService: AlfrescoApi = this.apiService.getInstance();\n        return Observable.fromPromise(apiService.activiti.contentApi.createTemporaryRelatedContent({\n            link: true,\n            name: node.title,\n            simpleType: node.simpleType,\n            source: accountId,\n            sourceId: node.id + '@' + siteId\n        })).map(this.toJson).catch(err => this.handleError(err));\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    toJsonArray(res: any) {\n        if (res) {\n            return res.data || [];\n        }\n        return [];\n    }\n\n    handleError(error: any): Observable<any> {\n        let errMsg = ActivitiAlfrescoContentService.UNKNOWN_ERROR_MESSAGE;\n        if (error) {\n            errMsg = (error.message) ? error.message :\n                error.status ? `${error.status} - ${error.statusText}` : ActivitiAlfrescoContentService.GENERIC_ERROR_MESSAGE;\n        }\n        this.logService.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/services/activiti-alfresco.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Rx\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13","module.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/http\"\n// module id = 20\n// module chunks = 0 1 2 7","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Observable\"\n// module id = 23\n// module chunks = 1 2 3 4 6","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport * as moment from 'moment';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { ContainerColumnModel, ContainerModel, FormFieldModel, FormModel, TabModel } from '../components/widgets/core/index';\nimport { TaskProcessVariableModel } from '../models/task-process-variable.model';\nimport { WidgetVisibilityModel } from '../models/widget-visibility.model';\n\n@Injectable()\nexport class WidgetVisibilityService {\n\n    private processVarList: TaskProcessVariableModel[];\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    public refreshVisibility(form: FormModel) {\n        if (form && form.tabs && form.tabs.length > 0) {\n            form.tabs.map(tabModel => this.refreshEntityVisibility(tabModel));\n        }\n\n        if (form) {\n            form.getFormFields().map(field => this.refreshEntityVisibility(field));\n        }\n    }\n\n    refreshEntityVisibility(element: FormFieldModel | TabModel) {\n        let visible = this.evaluateVisibility(element.form, element.visibilityCondition);\n        element.isVisible = visible;\n    }\n\n    evaluateVisibility(form: FormModel, visibilityObj: WidgetVisibilityModel): boolean {\n        let isLeftFieldPresent = visibilityObj && ( visibilityObj.leftFormFieldId || visibilityObj.leftRestResponseId );\n        if (!isLeftFieldPresent || isLeftFieldPresent === 'null') {\n            return true;\n        } else {\n            return this.isFieldVisible(form, visibilityObj);\n        }\n    }\n\n    isFieldVisible(form: FormModel, visibilityObj: WidgetVisibilityModel): boolean {\n        let leftValue = this.getLeftValue(form, visibilityObj);\n        let rightValue = this.getRightValue(form, visibilityObj);\n        let actualResult = this.evaluateCondition(leftValue, rightValue, visibilityObj.operator);\n        if (visibilityObj.nextCondition) {\n            return this.evaluateLogicalOperation(\n                visibilityObj.nextConditionOperator,\n                actualResult,\n                this.isFieldVisible(form, visibilityObj.nextCondition)\n            );\n        } else {\n            return actualResult;\n        }\n    }\n\n    getLeftValue(form: FormModel, visibilityObj: WidgetVisibilityModel) {\n        let leftValue = '';\n        if (visibilityObj.leftRestResponseId && visibilityObj.leftRestResponseId !== 'null') {\n            leftValue = this.getVariableValue(form, visibilityObj.leftRestResponseId, this.processVarList);\n        } else {\n            leftValue = this.getFormValue(form, visibilityObj.leftFormFieldId);\n            leftValue = leftValue ? leftValue : this.getVariableValue(form, visibilityObj.leftFormFieldId, this.processVarList);\n        }\n        return leftValue;\n    }\n\n    getRightValue(form: FormModel, visibilityObj: WidgetVisibilityModel) {\n        let valueFound = '';\n        if (visibilityObj.rightRestResponseId) {\n            valueFound = this.getVariableValue(form, visibilityObj.rightRestResponseId, this.processVarList);\n        } else if (visibilityObj.rightFormFieldId) {\n            valueFound = this.getFormValue(form, visibilityObj.rightFormFieldId);\n        } else {\n            if (moment(visibilityObj.rightValue, 'YYYY-MM-DD', true).isValid()) {\n                valueFound = visibilityObj.rightValue + 'T00:00:00.000Z';\n            } else {\n                valueFound = visibilityObj.rightValue;\n            }\n        }\n        return valueFound;\n    }\n\n    getFormValue(form: FormModel, field: string) {\n        let value = this.getFieldValue(form.values, field);\n        return value ? value : this.searchForm(form, field);\n    }\n\n    getFieldValue(valueList: any, fieldName: string) {\n        let dropDownFilterByName, valueFound = '';\n        if (fieldName && fieldName.indexOf('_LABEL') > 0) {\n            dropDownFilterByName = fieldName.substring(0, fieldName.length - 6);\n            if (valueList[dropDownFilterByName]) {\n                valueFound = valueList[dropDownFilterByName].name;\n            }\n        } else if (valueList[fieldName] && valueList[fieldName].id) {\n            valueFound = valueList[fieldName].id;\n        } else {\n            valueFound = valueList[fieldName];\n        }\n        return valueFound;\n    }\n\n    searchForm(form: FormModel, name: string) {\n        let fieldValue = '';\n        form.fields.forEach((containerModel: ContainerModel) => {\n            containerModel.field.columns.forEach((containerColumnModel: ContainerColumnModel) => {\n                let fieldFound = containerColumnModel.fields.find(field => this.isSearchedField(field, name));\n                if (fieldFound) {\n                    fieldValue = this.getObjectValue(fieldFound);\n                    if (!fieldValue) {\n                        if (fieldFound.value && fieldFound.value.id) {\n                            fieldValue = fieldFound.value.id;\n                        } else {\n                            fieldValue = fieldFound.value;\n                        }\n                    }\n                }\n            });\n        });\n        return fieldValue;\n    }\n\n    private getObjectValue(field: FormFieldModel) {\n        let value = '';\n        if (field.value && field.value.name) {\n            value = field.value.name;\n        } else if (field.options) {\n            let option = field.options.find(opt => opt.id === field.value);\n            if (option) {\n                value = option.name;\n            } else {\n                value = field.value;\n            }\n        }\n        return value;\n    }\n\n    private isSearchedField(field: FormFieldModel, fieldToFind: string) {\n        let forrmattedFieldName = this.removeLabel(field, fieldToFind);\n        return field.name ? field.name.toUpperCase() === forrmattedFieldName.toUpperCase() : false;\n    }\n\n    private removeLabel(field: FormFieldModel, fieldToFind) {\n        let formattedFieldName = fieldToFind || '';\n        if (field.fieldType === 'RestFieldRepresentation' && fieldToFind.indexOf('_LABEL') > 0) {\n            formattedFieldName = fieldToFind.substring(0, fieldToFind.length - 6);\n        }\n        return formattedFieldName;\n    }\n\n    getVariableValue(form: FormModel, name: string, processVarList: TaskProcessVariableModel[]) {\n        return this.getFormVariableValue(form, name) ||\n            this.getProcessVariableValue(name, processVarList);\n    }\n\n    private getFormVariableValue(form: FormModel, name: string) {\n        if (form.json.variables) {\n            let formVariable = form.json.variables.find(formVar => formVar.name === name);\n            return formVariable ? formVariable.value : formVariable;\n        }\n    }\n\n    private getProcessVariableValue(name: string, processVarList: TaskProcessVariableModel[]) {\n        if (this.processVarList) {\n            let processVariable = this.processVarList.find(variable => variable.id === name);\n            return processVariable ? processVariable.value : processVariable;\n        }\n    }\n\n    evaluateLogicalOperation(logicOp, previousValue, newValue): boolean {\n        switch (logicOp) {\n            case 'and':\n                return previousValue && newValue;\n            case 'or' :\n                return previousValue || newValue;\n            case 'and-not':\n                return previousValue && !newValue;\n            case 'or-not':\n                return previousValue || !newValue;\n            default:\n                this.logService.error('NO valid operation! wrong op request : ' + logicOp);\n                break;\n        }\n    }\n\n    evaluateCondition(leftValue, rightValue, operator): boolean {\n        switch (operator) {\n            case '==':\n                return leftValue + '' === rightValue + '';\n            case '<':\n                return leftValue < rightValue;\n            case '!=':\n                return leftValue + '' !== rightValue + '';\n            case '>':\n                return leftValue > rightValue;\n            case '>=':\n                return leftValue >= rightValue;\n            case '<=':\n                return leftValue <= rightValue;\n            case 'empty':\n                return leftValue ? leftValue === '' : true;\n            case '!empty':\n                return leftValue ? leftValue !== '' : false;\n            default:\n                this.logService.error('NO valid operation!');\n                break;\n        }\n        return;\n    }\n\n    cleanProcessVariable() {\n        this.processVarList = [];\n    }\n\n    getTaskProcessVariable(taskId: string): Observable<TaskProcessVariableModel[]> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskFormsApi.getTaskFormVariables(taskId))\n            .map(res => {\n                let jsonRes = this.toJson(res);\n                this.processVarList = <TaskProcessVariableModel[]> jsonRes;\n                return jsonRes;\n            })\n            .catch(err => this.handleError(err));\n    }\n\n    toJson(res: any) {\n        return res || {};\n    }\n\n    private handleError(err) {\n        this.logService.error('Error while performing a call');\n        return Observable.throw('Error while performing a call - Server error');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/services/widget-visibility.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 3\n// module chunks = 1 2 3 4 5 6 7 8 9 11 12 13 14","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable */\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { FormErrorEvent, FormEvent } from './../events/index';\nimport { EcmModelService } from './../services/ecm-model.service';\nimport { FormService } from './../services/form.service';\nimport { NodeService } from './../services/node.service';\nimport { ContentLinkModel } from './widgets/core/content-link.model';\nimport { FormFieldModel, FormModel, FormOutcomeEvent, FormOutcomeModel, FormValues, FormFieldValidator } from './widgets/core/index';\n\nimport { WidgetVisibilityService } from './../services/widget-visibility.service';\n\n@Component({\n    selector: 'adf-form, activiti-form',\n    template: require('./form.component.html'),\n    styles: [require('./form.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnChanges {\n\n    static SAVE_OUTCOME_ID: string = '$save';\n    static COMPLETE_OUTCOME_ID: string = '$complete';\n    static START_PROCESS_OUTCOME_ID: string = '$startProcess';\n    static CUSTOM_OUTCOME_ID: string = '$custom';\n\n    @Input()\n    form: FormModel;\n\n    @Input()\n    taskId: string;\n\n    @Input()\n    nodeId: string;\n\n    @Input()\n    formId: string;\n\n    @Input()\n    formName: string;\n\n    @Input()\n    saveMetadata: boolean = false;\n\n    @Input()\n    data: FormValues;\n\n    @Input()\n    path: string;\n\n    @Input()\n    nameNode: string;\n\n    @Input()\n    showTitle: boolean = true;\n\n    @Input()\n    showCompleteButton: boolean = true;\n\n    @Input()\n    disableCompleteButton: boolean = false;\n\n    @Input()\n    showSaveButton: boolean = true;\n\n    @Input()\n    showDebugButton: boolean = false;\n\n    @Input()\n    readOnly: boolean = false;\n\n    @Input()\n    showRefreshButton: boolean = true;\n\n    @Input()\n    showValidationIcon: boolean = true;\n\n    @Input()\n    fieldValidators: FormFieldValidator[] = [];\n\n    @Output()\n    formSaved: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formCompleted: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    @Output()\n    formLoaded: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formDataRefreshed: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    executeOutcome: EventEmitter<FormOutcomeEvent> = new EventEmitter<FormOutcomeEvent>();\n\n    @Output()\n    onError: EventEmitter<any> = new EventEmitter<any>();\n\n    debugMode: boolean = false;\n\n    constructor(protected formService: FormService,\n                protected visibilityService: WidgetVisibilityService,\n                private ecmModelService: EcmModelService,\n                private nodeService: NodeService) {\n    }\n\n    hasForm(): boolean {\n        return this.form ? true : false;\n    }\n\n    isTitleEnabled(): boolean {\n        if (this.showTitle) {\n            if (this.form && this.form.taskName) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isOutcomeButtonEnabled(outcome: FormOutcomeModel): boolean {\n        if (this.form.readOnly) {\n            return false;\n        }\n\n        if (outcome) {\n            // Make 'Save' button always available\n            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {\n                return true;\n            }\n            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {\n                return this.disableCompleteButton ? false : this.form.isValid;\n            }\n            return this.form.isValid;\n        }\n        return false;\n    }\n\n    isOutcomeButtonVisible(outcome: FormOutcomeModel, isFormReadOnly: boolean): boolean {\n        if (outcome && outcome.name) {\n            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {\n                return this.showCompleteButton;\n            }\n            if (isFormReadOnly) {\n                return outcome.isSelected;\n            }\n            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {\n                return this.showSaveButton;\n            }\n            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    ngOnInit() {\n        this.formService.formContentClicked.subscribe((content: ContentLinkModel) => {\n            this.formContentClicked.emit(content);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let taskId = changes['taskId'];\n        if (taskId && taskId.currentValue) {\n            this.getFormByTaskId(taskId.currentValue);\n            return;\n        }\n\n        let formId = changes['formId'];\n        if (formId && formId.currentValue) {\n            this.getFormDefinitionByFormId(formId.currentValue);\n            return;\n        }\n\n        let formName = changes['formName'];\n        if (formName && formName.currentValue) {\n            this.getFormDefinitionByFormName(formName.currentValue);\n            return;\n        }\n\n        let nodeId = changes['nodeId'];\n        if (nodeId && nodeId.currentValue) {\n            this.loadFormForEcmNode(nodeId.currentValue);\n            return;\n        }\n\n        let data = changes['data'];\n        if (data && data.currentValue) {\n            this.refreshFormData();\n            return;\n        }\n    }\n\n    /**\n     * Invoked when user clicks outcome button.\n     * @param outcome Form outcome model\n     * @returns {boolean} True if outcome action was executed, otherwise false.\n     */\n    onOutcomeClicked(outcome: FormOutcomeModel): boolean {\n        if (!this.readOnly && outcome && this.form) {\n\n            if (!this.onExecuteOutcome(outcome)) {\n                return false;\n            }\n\n            if (outcome.isSystem) {\n                if (outcome.id === FormComponent.SAVE_OUTCOME_ID) {\n                    this.saveTaskForm();\n                    return true;\n                }\n\n                if (outcome.id === FormComponent.COMPLETE_OUTCOME_ID) {\n                    this.completeTaskForm();\n                    return true;\n                }\n\n                if (outcome.id === FormComponent.START_PROCESS_OUTCOME_ID) {\n                    this.completeTaskForm();\n                    return true;\n                }\n\n                if (outcome.id === FormComponent.CUSTOM_OUTCOME_ID) {\n                    this.onTaskSaved(this.form);\n                    this.storeFormAsMetadata();\n                    return true;\n                }\n            } else {\n                // Note: Activiti is using NAME field rather than ID for outcomes\n                if (outcome.name) {\n                    this.onTaskSaved(this.form);\n                    this.completeTaskForm(outcome.name);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Invoked when user clicks form refresh button.\n     */\n    onRefreshClicked() {\n        this.loadForm();\n    }\n\n    loadForm() {\n        if (this.taskId) {\n            this.getFormByTaskId(this.taskId);\n            return;\n        }\n\n        if (this.formId) {\n            this.getFormDefinitionByFormId(this.formId);\n            return;\n        }\n\n        if (this.formName) {\n            this.getFormDefinitionByFormName(this.formName);\n            return;\n        }\n    }\n\n    loadFormProcessVariables(taskId: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            this.formService.getTask(taskId).subscribe(\n                task => {\n                    if (this.isAProcessTask(task)) {\n                        this.visibilityService.getTaskProcessVariable(taskId).subscribe(_ => {\n                            resolve(true);\n                        });\n                    } else {\n                        resolve(true);\n                    }\n                },\n                error => {\n                    this.handleError(error);\n                    resolve(false);\n                }\n            );\n        });\n    }\n\n    isAProcessTask(taskRepresentation) {\n        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';\n    }\n\n    getFormByTaskId(taskId: string): Promise<FormModel> {\n        return new Promise<FormModel>((resolve, reject) => {\n            this.loadFormProcessVariables(this.taskId).then(_ => {\n                this.formService\n                    .getTaskForm(taskId)\n                    .subscribe(\n                        form => {\n                            this.form = this.parseForm(form);\n                            this.onFormLoaded(this.form);\n                            resolve(this.form);\n                        },\n                        error => {\n                            this.handleError(error);\n                            // reject(error);\n                            resolve(null);\n                        }\n                    );\n            });\n        });\n    }\n\n    getFormDefinitionByFormId(formId: string) {\n        this.formService\n            .getFormDefinitionById(formId)\n            .subscribe(\n            form => {\n                this.formName = form.name;\n                this.form = this.parseForm(form);\n                this.onFormLoaded(this.form);\n            },\n            (error) => {\n                this.handleError(error);\n            }\n            );\n    }\n\n    getFormDefinitionByFormName(formName: string) {\n        this.formService\n            .getFormDefinitionByName(formName)\n            .subscribe(\n            id => {\n                this.formService.getFormDefinitionById(id).subscribe(\n                    form => {\n                        this.form = this.parseForm(form);\n                        this.onFormLoaded(this.form);\n                    },\n                    (error) => {\n                        this.handleError(error);\n                    }\n                );\n            },\n            (error) => {\n                this.handleError(error);\n            }\n            );\n    }\n\n    saveTaskForm() {\n        if (this.form && this.form.taskId) {\n            this.formService\n                .saveTaskForm(this.form.taskId, this.form.values)\n                .subscribe(\n                () => {\n                    this.onTaskSaved(this.form);\n                    this.storeFormAsMetadata();\n                },\n                error => this.onTaskSavedError(this.form, error)\n                );\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        if (this.form && this.form.taskId) {\n            this.formService\n                .completeTaskForm(this.form.taskId, this.form.values, outcome)\n                .subscribe(\n                () => {\n                    this.onTaskCompleted(this.form);\n                    this.storeFormAsMetadata();\n                },\n                error => this.onTaskCompletedError(this.form, error)\n                );\n        }\n    }\n\n    handleError(err: any): any {\n        this.onError.emit(err);\n    }\n\n    parseForm(json: any): FormModel {\n        if (json) {\n            let form = new FormModel(json, this.data, this.readOnly, this.formService);\n            if (!json.fields) {\n                form.outcomes = this.getFormDefinitionOutcomes(form);\n            }\n            if (this.fieldValidators && this.fieldValidators.length > 0) {\n                console.log('Applying custom field validators');\n                form.fieldValidators = this.fieldValidators;\n            }\n            return form;\n        }\n        return null;\n    }\n\n    /**\n     * Get custom set of outcomes for a Form Definition.\n     * @param form Form definition model.\n     * @returns {FormOutcomeModel[]} Outcomes for a given form definition.\n     */\n    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[] {\n        return [\n            new FormOutcomeModel(form, { id: '$custom', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })\n        ];\n    }\n\n    checkVisibility(field: FormFieldModel) {\n        if (field && field.form) {\n            this.visibilityService.refreshVisibility(field.form);\n        }\n    }\n\n    private refreshFormData() {\n        this.form = this.parseForm(this.form.json);\n        this.onFormLoaded(this.form);\n        this.onFormDataRefreshed(this.form);\n    }\n\n    private loadFormForEcmNode(nodeId: string): void {\n        this.nodeService.getNodeMetadata(nodeId).subscribe(data => {\n            this.data = data.metadata;\n            this.loadFormFromActiviti(data.nodeType);\n        },\n            this.handleError);\n    }\n\n    loadFormFromActiviti(nodeType: string): any {\n        this.formService.searchFrom(nodeType).subscribe(\n            form => {\n                if (!form) {\n                    this.formService.createFormFromANode(nodeType).subscribe(formMetadata => {\n                        this.loadFormFromFormId(formMetadata.id);\n                    });\n                } else {\n                    this.loadFormFromFormId(form.id);\n                }\n            },\n            (error) => {\n                this.handleError(error);\n            }\n        );\n    }\n\n    private loadFormFromFormId(formId: string) {\n        this.formId = formId;\n        this.loadForm();\n    }\n\n    private storeFormAsMetadata() {\n        if (this.saveMetadata) {\n            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe(type => {\n                this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, this.form.values, this.path, this.nameNode);\n            },\n                (error) => {\n                    this.handleError(error);\n                }\n            );\n        }\n    }\n\n    protected onFormLoaded(form: FormModel) {\n        this.formLoaded.emit(form);\n        this.formService.formLoaded.next(new FormEvent(form));\n    }\n\n    protected onFormDataRefreshed(form: FormModel) {\n        this.formDataRefreshed.emit(form);\n        this.formService.formDataRefreshed.next(new FormEvent(form));\n    }\n\n    protected onTaskSaved(form: FormModel) {\n        this.formSaved.emit(form);\n        this.formService.taskSaved.next(new FormEvent(form));\n    }\n\n    protected onTaskSavedError(form: FormModel, error: any) {\n        this.handleError(error);\n        this.formService.taskSavedError.next(new FormErrorEvent(form, error));\n    }\n\n    protected onTaskCompleted(form: FormModel) {\n        this.formCompleted.emit(form);\n        this.formService.taskCompleted.next(new FormEvent(form));\n    }\n\n    protected onTaskCompletedError(form: FormModel, error: any) {\n        this.handleError(error);\n        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));\n    }\n\n    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean {\n        let args = new FormOutcomeEvent(outcome);\n\n        this.formService.executeOutcome.next(args);\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        this.executeOutcome.emit(args);\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/form.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'amount-widget',\n    template: require('./amount.widget.html'),\n    styles: [require('./amount.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class AmountWidgetComponent extends WidgetComponent implements OnInit {\n\n    static DEFAULT_CURRENCY: string = '$';\n\n    currency: string = AmountWidgetComponent.DEFAULT_CURRENCY;\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.currency) {\n            this.currency = this.field.currency;\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/amount/amount.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ActivitiAlfrescoContentService } from '../../../services/activiti-alfresco.service';\nimport { ExternalContent } from '../core/external-content';\nimport { ExternalContentLink } from '../core/external-content-link';\nimport { FormFieldModel } from '../core/form-field.model';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\ndeclare let dialogPolyfill: any;\n\n@Component({\n    selector: 'attach-widget',\n    template: require('./attach.widget.html'),\n    styles: [require('./attach.widget.css')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachWidgetComponent extends WidgetComponent implements OnInit {\n\n    selectedFolderPathId: string;\n    selectedFolderSiteId: string;\n    selectedFolderSiteName: string;\n    selectedFolderAccountId: string;\n    fileName: string;\n    selectedFolderNodes: [ExternalContent];\n    selectedFile: ExternalContent;\n\n    @Output()\n    fieldChanged: EventEmitter<FormFieldModel> = new EventEmitter<FormFieldModel>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('dialog')\n    dialog: any;\n\n    constructor(public formService: FormService,\n                private contentService: ActivitiAlfrescoContentService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            let params = this.field.params;\n\n            if (params &&\n                params.fileSource &&\n                params.fileSource.selectedFolder) {\n                this.selectedFolderSiteId = params.fileSource.selectedFolder.siteId;\n                this.selectedFolderSiteName = params.fileSource.selectedFolder.site;\n                this.setupFileBrowser();\n                this.getExternalContentNodes();\n            }\n        }\n    }\n\n    setupFileBrowser() {\n        if (this.field) {\n            let params = this.field.params;\n            this.selectedFolderPathId = params.fileSource.selectedFolder.pathId;\n            this.selectedFolderAccountId = params.fileSource.selectedFolder.accountId;\n        }\n    }\n\n    getLinkedFileName(): string {\n        let result = this.fileName;\n\n        if (this.selectedFile &&\n            this.selectedFile.title) {\n            result = this.selectedFile.title;\n        }\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0 &&\n            this.field.value[0].name) {\n            result = this.field.value[0].name;\n        }\n\n        return result;\n    }\n\n    getExternalContentNodes() {\n        this.contentService.getAlfrescoNodes(this.selectedFolderAccountId, this.selectedFolderPathId)\n            .subscribe(\n                nodes => this.selectedFolderNodes = nodes,\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n    }\n\n    selectFile(node: ExternalContent, $event: any) {\n        this.contentService.linkAlfrescoNode(this.selectedFolderAccountId, node, this.selectedFolderSiteId).subscribe(\n            (link: ExternalContentLink) => {\n                this.selectedFile = node;\n                this.field.value = [link];\n                this.field.json.value = [link];\n                this.closeDialog();\n                this.fieldChanged.emit(this.field);\n            }\n        );\n    }\n\n    selectFolder(node: ExternalContent, $event: any) {\n        this.selectedFolderPathId = node.id;\n        this.getExternalContentNodes();\n    }\n\n    showDialog(): boolean {\n        this.setupFileBrowser();\n        this.getExternalContentNodes();\n\n        if (this.dialog) {\n            if (!this.dialog.nativeElement.showModal) {\n                dialogPolyfill.registerDialog(this.dialog.nativeElement);\n            }\n\n            this.dialog.nativeElement.showModal();\n            return true;\n        }\n        return false;\n    }\n\n    private closeDialog() {\n        if (this.dialog) {\n            this.dialog.nativeElement.close();\n        }\n    }\n\n    cancel() {\n        this.closeDialog();\n    }\n\n    reset() {\n        this.field.value = null;\n        this.field.json.value = null;\n    }\n\n    hasFile(): boolean {\n        return this.field && this.field.value;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/attach/attach.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'checkbox-widget',\n    template: require('./checkbox.widget.html'),\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class CheckboxWidgetComponent extends WidgetComponent {\n\n    constructor(private visibilityService: WidgetVisibilityService, public formService: FormService) {\n        super(formService);\n    }\n\n    onChange() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/checkbox/checkbox.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { AfterViewInit, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { FormFieldModel } from './../core/form-field.model';\nimport { baseHost , WidgetComponent } from './../widget.component';\nimport { ContainerWidgetComponentModel } from './container.widget.model';\n\n@Component({\n    selector: 'container-widget',\n    template: require('./container.widget.html'),\n    styles: [require('./container.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContainerWidgetComponent extends WidgetComponent implements OnInit, AfterViewInit {\n\n    content: ContainerWidgetComponentModel;\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n    onExpanderClicked() {\n        if (this.content && this.content.isCollapsible()) {\n            this.content.isExpanded = !this.content.isExpanded;\n        }\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.content = new ContainerWidgetComponentModel(this.field);\n        }\n    }\n\n    /**\n     * Serializes column fields\n     */\n    get fields(): FormFieldModel[] {\n        const fields = [];\n\n        let rowContainsElement = true,\n            rowIndex = 0;\n\n        while (rowContainsElement) {\n            rowContainsElement = false;\n            for (let i = 0; i < this.content.columns.length; i++ ) {\n                let field = this.content.columns[i].fields[rowIndex];\n                if (field) {\n                    rowContainsElement = true;\n                }\n\n                fields.push(field);\n            }\n            rowIndex++;\n        }\n\n        return fields;\n    }\n\n    /**\n     * Calculate the column width based on the numberOfColumns and current field's colspan property\n     *\n     * @param field\n     */\n    getColumnWith(field: FormFieldModel): string {\n        const colspan = field ? field.colspan : 1;\n        return (100 / this.content.json.numberOfColumns) * colspan + '%';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/container/container.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { FormFieldModel } from './form-field.model';\n\nexport class ContainerColumnModel {\n\n    size: number = 12;\n    fields: FormFieldModel[] = [];\n    colspan: number = 1;\n    rowspan: number = 1;\n\n    hasFields(): boolean {\n        return this.fields && this.fields.length > 0;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/container-column.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nexport class ContentLinkModel {\n\n    contentAvailable: boolean;\n    created: string;\n    createdBy: any;\n    id: number;\n    link: boolean;\n    mimeType: string;\n    name: string;\n    previewStatus: string;\n    relatedContent: boolean;\n    simpleType: string;\n    thumbnailUrl: string;\n    contentRawUrl: string;\n    contentBlob: Blob;\n    thumbnailStatus: string;\n\n    constructor(obj?: any) {\n        this.contentAvailable = obj && obj.contentAvailable;\n        this.created = obj && obj.created;\n        this.createdBy = obj && obj.createdBy || {};\n        this.id = obj && obj.id;\n        this.link = obj && obj.link;\n        this.mimeType = obj && obj.mimeType;\n        this.name = obj && obj.name;\n        this.previewStatus = obj && obj.previewStatus;\n        this.relatedContent = obj && obj.relatedContent;\n        this.simpleType = obj && obj.simpleType;\n        this.thumbnailStatus = obj && obj.thumbnailStatus;\n    }\n\n    hasPreviewStatus(): boolean {\n        return this.previewStatus === 'supported' ? true : false;\n    }\n\n    isTypeImage(): boolean {\n        return this.simpleType === 'image' ? true : false;\n    }\n\n    isTypePdf(): boolean {\n        return this.simpleType === 'pdf' ? true : false;\n    }\n\n    isTypeDoc(): boolean {\n        return this.simpleType === 'word' || this.simpleType === 'content' ? true : false;\n    }\n\n    isThumbnailReady(): boolean {\n        return this.thumbnailStatus === 'created';\n    }\n\n    isThumbnailSupported(): boolean {\n        return this.isTypeImage() || ((this.isTypePdf() || this.isTypeDoc()) && this.isThumbnailReady());\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/content-link.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\nimport * as moment from 'moment';\nimport { WidgetVisibilityModel } from '../../../models/widget-visibility.model';\nimport { ContainerColumnModel } from './container-column.model';\nimport { FormFieldMetadata } from './form-field-metadata';\nimport { FormFieldOption } from './form-field-option';\nimport { FormFieldTypes } from './form-field-types';\nimport { NumberFieldValidator } from './form-field-validator';\nimport { FormWidgetModel } from './form-widget.model';\nimport { FormModel } from './form.model';\n\n// Maps to FormFieldRepresentation\nexport class FormFieldModel extends FormWidgetModel {\n\n    private _value: string;\n    private _readOnly: boolean = false;\n    private _isValid: boolean = true;\n    private _required: boolean = false;\n\n    readonly defaultDateFormat: string = 'D-M-YYYY';\n\n    // model members\n    fieldType: string;\n    id: string;\n    name: string;\n    type: string;\n    overrideId: boolean;\n    tab: string;\n    rowspan: number = 1;\n    colspan: number = 1;\n    placeholder: string = null;\n    minLength: number = 0;\n    maxLength: number = 0;\n    minValue: string;\n    maxValue: string;\n    regexPattern: string;\n    options: FormFieldOption[] = [];\n    restUrl: string;\n    restResponsePath: string;\n    restIdProperty: string;\n    restLabelProperty: string;\n    hasEmptyValue: boolean;\n    className: string;\n    optionType: string;\n    params: FormFieldMetadata = {};\n    hyperlinkUrl: string;\n    displayText: string;\n    isVisible: boolean = true;\n    visibilityCondition: WidgetVisibilityModel = null;\n    enableFractions: boolean = false;\n    currency: string = null;\n    dateDisplayFormat: string = this.dateDisplayFormat || this.defaultDateFormat;\n\n    // container model members\n    numberOfColumns: number = 1;\n    fields: FormFieldModel[] = [];\n    columns: ContainerColumnModel[] = [];\n\n    // util members\n    emptyOption: FormFieldOption;\n    validationSummary: string;\n\n    get value(): any {\n        return this._value;\n    }\n\n    set value(v: any) {\n        this._value = v;\n        this.validate();\n        this.updateForm();\n    }\n\n    get readOnly(): boolean {\n        if (this.form && this.form.readOnly) {\n            return true;\n        }\n        return this._readOnly;\n    }\n\n    set readOnly(readOnly: boolean) {\n        this._readOnly = readOnly;\n        this.updateForm();\n    }\n\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = value;\n        this.updateForm();\n    }\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(): boolean {\n        this.validationSummary = null;\n\n        let validators = this.form.fieldValidators || [];\n        for (let validator of validators) {\n            if (!validator.validate(this)) {\n                this._isValid = false;\n                return this._isValid;\n            }\n        }\n\n        this._isValid = true;\n        return this._isValid;\n    }\n\n    constructor(form: FormModel, json?: any) {\n        super(form, json);\n\n        if (json) {\n            this.fieldType = json.fieldType;\n            this.id = json.id;\n            this.name = json.name;\n            this.type = json.type;\n            this._required = <boolean> json.required;\n            this._readOnly = <boolean> json.readOnly || json.type === 'readonly';\n            this.overrideId = <boolean> json.overrideId;\n            this.tab = json.tab;\n            this.restUrl = json.restUrl;\n            this.restResponsePath = json.restResponsePath;\n            this.restIdProperty = json.restIdProperty;\n            this.restLabelProperty = json.restLabelProperty;\n            this.colspan = <number> json.colspan;\n            this.minLength = <number> json.minLength || 0;\n            this.maxLength = <number> json.maxLength || 0;\n            this.minValue = json.minValue;\n            this.maxValue = json.maxValue;\n            this.regexPattern = json.regexPattern;\n            this.options = <FormFieldOption[]> json.options || [];\n            this.hasEmptyValue = <boolean> json.hasEmptyValue;\n            this.className = json.className;\n            this.optionType = json.optionType;\n            this.params = <FormFieldMetadata> json.params || {};\n            this.hyperlinkUrl = json.hyperlinkUrl;\n            this.displayText = json.displayText;\n            this.visibilityCondition = <WidgetVisibilityModel> json.visibilityCondition;\n            this.enableFractions = <boolean> json.enableFractions;\n            this.currency = json.currency;\n            this.dateDisplayFormat = json.dateDisplayFormat || this.defaultDateFormat;\n            this._value = this.parseValue(json);\n\n            if (json.placeholder && json.placeholder !== '' && json.placeholder !== 'null') {\n                this.placeholder = json.placeholder;\n            }\n\n            if (FormFieldTypes.isReadOnlyType(json.type)) {\n                if (json.params && json.params.field && json.params.field.responseVariable) {\n                    this.value = this.getVariablesValue(json.params.field.name, form);\n                }\n            }\n\n            if (FormFieldTypes.isContainerType(json.type)) {\n                this.containerFactory(json, form);\n            }\n        }\n\n        if (this.hasEmptyValue && this.options && this.options.length > 0) {\n            this.emptyOption = this.options[0];\n        }\n\n        this.updateForm();\n    }\n\n    private getVariablesValue(variableName: string, form: FormModel) {\n        let variable = form.json.variables.find((currentVariable) => {\n            return currentVariable.name === variableName;\n        });\n\n        if (variable.type === 'boolean') {\n            return JSON.parse(variable.value);\n        }\n\n        return variable.value;\n    }\n\n    private containerFactory(json: any, form: FormModel): void {\n        this.numberOfColumns = <number> json.numberOfColumns || 1;\n\n        this.fields = json.fields;\n\n        this.rowspan = 1;\n        this.colspan = 1;\n\n        if (json.fields) {\n            for (let currentField in json.fields) {\n                if (json.fields.hasOwnProperty(currentField)) {\n                    let col = new ContainerColumnModel();\n\n                    let fields: FormFieldModel[] = (json.fields[currentField] || []).map(f => new FormFieldModel(form, f));\n                    col.fields = fields;\n                    col.rowspan = json.fields[currentField].length;\n\n                    col.fields.forEach((colFields: any) => {\n                        this.colspan = colFields.colspan > this.colspan ? colFields.colspan : this.colspan;\n                    });\n\n                    this.rowspan = this.rowspan < col.rowspan ? col.rowspan : this.rowspan;\n                    this.columns.push(col);\n                }\n            }\n        }\n    }\n\n    parseValue(json: any): any {\n        let value = json.value;\n\n        /*\n         This is needed due to Activiti issue related to reading dropdown values as value string\n         but saving back as object: { id: <id>, name: <name> }\n         */\n        if (json.type === FormFieldTypes.DROPDOWN) {\n            if (json.hasEmptyValue && json.options) {\n                let options = <FormFieldOption[]> json.options || [];\n                if (options.length > 0) {\n                    let emptyOption = json.options[0];\n                    if (value === '' || value === emptyOption.id || value === emptyOption.name) {\n                        value = emptyOption.id;\n                    }\n                }\n            }\n        }\n\n        /*\n         This is needed due to Activiti issue related to reading radio button values as value string\n         but saving back as object: { id: <id>, name: <name> }\n         */\n        if (json.type === FormFieldTypes.RADIO_BUTTONS) {\n            // Activiti has a bug with default radio button value where initial selection passed as `name` value\n            // so try resolving current one with a fallback to first entry via name or id\n            // TODO: needs to be reported and fixed at Activiti side\n            let entry: FormFieldOption[] = this.options.filter(opt => opt.id === value || opt.name === value);\n            if (entry.length > 0) {\n                value = entry[0].id;\n            }\n        }\n\n        /*\n         This is needed due to Activiti displaying/editing dates in d-M-YYYY format\n         but storing on server in ISO8601 format (i.e. 2013-02-04T22:44:30.652Z)\n         */\n        if (json.type === FormFieldTypes.DATE) {\n            if (value) {\n                let dateValue;\n                if (NumberFieldValidator.isNumber(value)) {\n                    dateValue = moment(value);\n                } else {\n                    dateValue = moment(value.split('T')[0], 'YYYY-M-D');\n                }\n                if (dateValue && dateValue.isValid()) {\n                    value = dateValue.format(this.dateDisplayFormat);\n                }\n            }\n        }\n\n        return value;\n    }\n\n    updateForm() {\n        if (!this.form) {\n            return;\n        }\n\n        switch (this.type) {\n            case FormFieldTypes.DROPDOWN:\n                /*\n                 This is needed due to Activiti reading dropdown values as string\n                 but saving back as object: { id: <id>, name: <name> }\n                 */\n                if (this.value === 'empty' || this.value === '') {\n                    this.form.values[this.id] = {};\n                } else {\n                    let entry: FormFieldOption[] = this.options.filter(opt => opt.id === this.value);\n                    if (entry.length > 0) {\n                        this.form.values[this.id] = entry[0];\n                    }\n                }\n                break;\n            case FormFieldTypes.RADIO_BUTTONS:\n                /*\n                 This is needed due to Activiti issue related to reading radio button values as value string\n                 but saving back as object: { id: <id>, name: <name> }\n                 */\n                let rbEntry: FormFieldOption[] = this.options.filter(opt => opt.id === this.value);\n                if (rbEntry.length > 0) {\n                    this.form.values[this.id] = rbEntry[0];\n                }\n                break;\n            case FormFieldTypes.UPLOAD:\n                if (this.value && this.value.length > 0) {\n                    this.form.values[this.id] = this.value.map(elem => elem.id).join(',');\n                } else {\n                    this.form.values[this.id] = null;\n                }\n                break;\n            case FormFieldTypes.TYPEAHEAD:\n                let taEntry: FormFieldOption[] = this.options.filter(opt => opt.id === this.value);\n                if (taEntry.length > 0) {\n                    this.form.values[this.id] = taEntry[0];\n                } else if (this.options.length > 0) {\n                    this.form.values[this.id] = null;\n                }\n                break;\n            case FormFieldTypes.DATE:\n                let dateValue = moment(this.value, this.dateDisplayFormat, true);\n                if (dateValue && dateValue.isValid()) {\n                    this.form.values[this.id] = `${dateValue.format('YYYY-MM-DD')}T00:00:00.000Z`;\n                } else {\n                    this.form.values[this.id] = null;\n                    this._value = this.value;\n                }\n                break;\n            case FormFieldTypes.NUMBER:\n                this.form.values[this.id] = parseInt(this.value, 10);\n                break;\n            case FormFieldTypes.AMOUNT:\n                this.form.values[this.id] = this.enableFractions ? parseFloat(this.value) : parseInt(this.value, 10);\n                break;\n            default:\n                if (!FormFieldTypes.isReadOnlyType(this.type) && !this.isInvalidFieldType(this.type)) {\n                    this.form.values[this.id] = this.value;\n                }\n        }\n\n        this.form.onFormFieldChanged(this);\n    }\n\n    /**\n     * Skip the invalid field type\n     * @param type\n     */\n    isInvalidFieldType(type: string) {\n        if (type === 'container') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    getOptionName(): string {\n        let option: FormFieldOption = this.options.find(opt => opt.id === this.value);\n        return option ? option.name : null;\n    }\n\n    hasOptions() {\n        return this.options && this.options.length > 0;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-field.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormWidgetModel } from './form-widget.model';\nimport { FormModel } from './form.model';\n\nexport class FormOutcomeModel extends FormWidgetModel {\n\n    static SAVE_ACTION: string = 'Save';            // Activiti 'Save' action name\n    static COMPLETE_ACTION: string = 'Complete';    // Activiti 'Complete' action name\n    static START_PROCESS_ACTION: string = 'Start Process';    // Activiti 'Start Process' action name\n\n    isSystem: boolean = false;\n    isSelected: boolean = false;\n\n    constructor(form: FormModel, json?: any) {\n        super(form, json);\n\n        if (json) {\n            this.isSystem = json.isSystem ? true : false;\n            this.isSelected = form && json.name === form.selectedOutcome ? true : false;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-outcome.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { WidgetVisibilityModel } from '../../../models/widget-visibility.model';\nimport { FormWidgetModel } from './form-widget.model';\nimport { FormModel } from './form.model';\n\nexport class TabModel extends FormWidgetModel {\n\n    title: string;\n    isVisible: boolean = true;\n    visibilityCondition: WidgetVisibilityModel;\n\n    fields: FormWidgetModel[] = [];\n\n    hasContent(): boolean {\n        return this.fields && this.fields.length > 0;\n    }\n\n    constructor(form: FormModel, json?: any) {\n        super(form, json);\n\n        if (json) {\n            this.title = json.title;\n            this.visibilityCondition = <WidgetVisibilityModel> json.visibilityCondition;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/tab.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter, MD_DATE_FORMATS } from '@angular/material';\nimport * as moment from 'moment';\nimport { Moment } from 'moment';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter } from 'ng2-alfresco-core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'date-widget',\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter},\n        {provide: MD_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}],\n    template: require('./date.widget.html'),\n    styles: [require('./date.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DateWidgetComponent extends WidgetComponent implements OnInit {\n\n    minDate: Moment;\n    maxDate: Moment;\n\n    constructor(public formService: FormService, public dateAdapter: DateAdapter<Moment>) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        let momentDateAdapter = <MomentDateAdapter> this.dateAdapter;\n        momentDateAdapter.overrideDisplyaFormat = this.field.dateDisplayFormat;\n\n        if (this.field) {\n            if (this.field.minValue) {\n                this.minDate = moment(this.field.minValue, this.field.dateDisplayFormat);\n            }\n\n            if (this.field.maxValue) {\n                this.maxDate = moment(this.field.maxValue, this.field.dateDisplayFormat);\n            }\n        }\n    }\n\n    onDateChanged(newDateValue) {\n        this.field.validationSummary = '';\n\n        if (newDateValue) {\n            let momentDate = moment(newDateValue, this.field.dateDisplayFormat, true);\n            if (!momentDate.isValid()) {\n                this.field.validationSummary = this.field.dateDisplayFormat;\n                this.field.value = null;\n            }else {\n                this.field.value = newDateValue;\n            }\n        }else {\n            this.field.value = null;\n        }\n        this.checkVisibility(this.field);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/date/date.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'display-text-widget',\n    template: require('./display-text.widget.html'),\n    styles: [require('./display-text.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DisplayTextWidgetComponentComponent extends WidgetComponent {\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from '../../../services/form.service';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormFieldOption } from './../core/form-field-option';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'dropdown-widget',\n    template: require('./dropdown.widget.html'),\n    styles: [require('./dropdown.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DropdownWidgetComponent extends WidgetComponent implements OnInit {\n\n    constructor(public formService: FormService,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.restUrl) {\n            if (this.field.form.taskId) {\n                this.getValuesByTaskId();\n            } else {\n                this.getValuesByProcessDefinitionId();\n            }\n        }\n    }\n\n    getValuesByTaskId() {\n        this.formService\n            .getRestFieldValues(\n                this.field.form.taskId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    let options = [];\n                    if (this.field.emptyOption) {\n                        options.push(this.field.emptyOption);\n                    }\n                    this.field.options = options.concat((result || []));\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getValuesByProcessDefinitionId() {\n        this.formService\n            .getRestFieldValuesByProcessId(\n                this.field.form.processDefinitionId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    let options = [];\n                    if (this.field.emptyOption) {\n                        options.push(this.field.emptyOption);\n                    }\n                    this.field.options = options.concat((result || []));\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getOptionValue(option: FormFieldOption, fieldValue: string): string {\n        let optionValue: string = '';\n        if (option.id === 'empty' || option.name !== fieldValue) {\n            optionValue = option.id;\n        } else {\n            optionValue = option.name;\n        }\n        return optionValue;\n    }\n\n    checkVisibility() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { ChangeDetectorRef, Component, ElementRef, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\nimport { DynamicTableColumn, DynamicTableModel, DynamicTableRow } from './dynamic-table.widget.model';\n\n@Component({\n    selector: 'dynamic-table-widget',\n    template: require('./dynamic-table.widget.html'),\n    styles: [require('./dynamic-table.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DynamicTableWidgetComponent extends WidgetComponent implements OnInit {\n\n    ERROR_MODEL_NOT_FOUND = 'Table model not found';\n\n    content: DynamicTableModel;\n\n    editMode: boolean = false;\n    editRow: DynamicTableRow = null;\n\n    private selectArrayCode = [32, 0, 13];\n\n    constructor(public formService: FormService,\n                public elementRef: ElementRef,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService,\n                private cd: ChangeDetectorRef) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.content = new DynamicTableModel(this.field);\n            this.visibilityService.refreshVisibility(this.field.form);\n        }\n    }\n\n    forceFocusOnAddButton() {\n        if (this.content) {\n            this.cd.detectChanges();\n            let buttonAddRow = <HTMLButtonElement> this.elementRef.nativeElement.querySelector('#' + this.content.id + '-add-row');\n            if (this.isDynamicTableReady(buttonAddRow)) {\n                buttonAddRow.focus();\n            }\n        }\n    }\n\n    private isDynamicTableReady(buttonAddRow) {\n        return this.field && !this.editMode && buttonAddRow;\n    }\n\n    isValid() {\n        let result = true;\n\n        if (this.content && this.content.field) {\n            result = this.content.field.isValid;\n        }\n\n        return result;\n    }\n\n    onRowClicked(row: DynamicTableRow) {\n        if (this.content) {\n            this.content.selectedRow = row;\n        }\n    }\n\n    onKeyPressed($event: KeyboardEvent, row: DynamicTableRow) {\n        if (this.content && this.isEnterOrSpacePressed($event.keyCode)) {\n            this.content.selectedRow = row;\n        }\n    }\n\n    private isEnterOrSpacePressed(keycode) {\n        return this.selectArrayCode.indexOf(keycode) !== -1;\n    }\n\n    hasSelection(): boolean {\n        return !!(this.content && this.content.selectedRow);\n    }\n\n    moveSelectionUp(): boolean {\n        if (this.content && !this.readOnly) {\n            this.content.moveRow(this.content.selectedRow, -1);\n            return true;\n        }\n        return false;\n    }\n\n    moveSelectionDown(): boolean {\n        if (this.content && !this.readOnly) {\n            this.content.moveRow(this.content.selectedRow, 1);\n            return true;\n        }\n        return false;\n    }\n\n    deleteSelection(): boolean {\n        if (this.content && !this.readOnly) {\n            this.content.deleteRow(this.content.selectedRow);\n            return true;\n        }\n        return false;\n    }\n\n    addNewRow(): boolean {\n        if (this.content && !this.readOnly) {\n            this.editRow = <DynamicTableRow> {\n                isNew: true,\n                selected: false,\n                value: {}\n            };\n            this.editMode = true;\n            return true;\n        }\n        return false;\n    }\n\n    editSelection(): boolean {\n        if (this.content && !this.readOnly) {\n            this.editRow = this.copyRow(this.content.selectedRow);\n            this.editMode = true;\n            return true;\n        }\n        return false;\n    }\n\n    getCellValue(row: DynamicTableRow, column: DynamicTableColumn): any {\n        if (this.content) {\n            let result = this.content.getCellValue(row, column);\n            if (column.type === 'Amount') {\n                return (column.amountCurrency || '$') + ' ' + (result || 0);\n            }\n            return result;\n        }\n        return null;\n    }\n\n    onSaveChanges() {\n        if (this.content) {\n            if (this.editRow.isNew) {\n                let row = this.copyRow(this.editRow);\n                this.content.selectedRow = null;\n                this.content.addRow(row);\n                this.editRow.isNew = false;\n            } else {\n                this.content.selectedRow.value = this.copyObject(this.editRow.value);\n            }\n            this.content.flushValue();\n        } else {\n            this.logService.error(this.ERROR_MODEL_NOT_FOUND);\n        }\n        this.editMode = false;\n        this.forceFocusOnAddButton();\n    }\n\n    onCancelChanges() {\n        this.editMode = false;\n        this.editRow = null;\n        this.forceFocusOnAddButton();\n    }\n\n    copyRow(row: DynamicTableRow): DynamicTableRow {\n        return <DynamicTableRow> {\n            value: this.copyObject(row.value)\n        };\n    }\n\n    private copyObject(obj: any): any {\n        let result = obj;\n\n        if (typeof obj === 'object' && obj !== null && obj !== undefined) {\n            result = Object.assign({}, obj);\n            Object.keys(obj).forEach(key => {\n                if (typeof obj[key] === 'object') {\n                    result[key] = this.copyObject(obj[key]);\n                }\n            });\n        }\n\n        return result;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, Input } from '@angular/core';\nimport { DynamicTableColumn, DynamicTableModel, DynamicTableRow } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-boolean-editor',\n    template: require('./boolean.editor.html'),\n    styles: [require('./boolean.editor.scss')]\n})\nexport class BooleanEditorComponent {\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    onValueChanged(row: DynamicTableRow, column: DynamicTableColumn, event: any) {\n        let value: boolean = (<HTMLInputElement> event).checked;\n        row.value[column.id] = value;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { DateAdapter, MD_DATE_FORMATS } from '@angular/material';\nimport * as moment from 'moment';\nimport { Moment } from 'moment';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter } from 'ng2-alfresco-core';\nimport { DynamicTableColumn, DynamicTableModel, DynamicTableRow } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-date-editor',\n    template: require('./date.editor.html'),\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter},\n        {provide: MD_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}],\n    styles: [require('./date.editor.scss')]\n})\nexport class DateEditorComponent implements OnInit {\n\n    DATE_FORMAT: string = 'DD-MM-YYYY';\n\n    value: any;\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    minDate: Moment;\n    maxDate: Moment;\n\n    constructor(public dateAdapter: DateAdapter<Moment>) {\n    }\n\n    ngOnInit() {\n        let momentDateAdapter = <MomentDateAdapter> this.dateAdapter;\n        momentDateAdapter.overrideDisplyaFormat = this.DATE_FORMAT;\n\n        this.value =  moment(this.table.getCellValue(this.row, this.column), this.DATE_FORMAT);\n    }\n\n    onDateChanged(newDateValue) {\n        if (newDateValue) {\n            let momentDate = moment(newDateValue, this.DATE_FORMAT, true);\n\n            if (!momentDate.isValid()) {\n                this.row.value[this.column.id]   = '';\n            }else {\n                this.row.value[this.column.id] = `${momentDate.format('YYYY-MM-DD')}T00:00:00.000Z`;\n                this.table.flushValue();\n            }\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from './../../../../../services/form.service';\nimport { DynamicTableColumn, DynamicTableColumnOption, DynamicTableModel, DynamicTableRow } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-dropdown-editor',\n    template: require('./dropdown.editor.html'),\n    styles: [require('./dropdown.editor.scss')]\n})\nexport class DropdownEditorComponent implements OnInit {\n\n    value: any = null;\n    options: DynamicTableColumnOption[] = [];\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    constructor(public formService: FormService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        let field = this.table.field;\n        if (field) {\n            if (this.column.optionType === 'rest') {\n                if (this.table.form && this.table.form.taskId) {\n                    this.getValuesByTaskId(field);\n                } else {\n                    this.getValuesByProcessDefinitionId(field);\n                }\n            } else {\n                this.options = this.column.options || [];\n                this.value = this.table.getCellValue(this.row, this.column);\n            }\n        }\n    }\n\n    getValuesByTaskId(field) {\n        this.formService\n            .getRestFieldValuesColumn(\n                field.form.taskId,\n                field.id,\n                this.column.id\n            )\n            .subscribe(\n                (result: DynamicTableColumnOption[]) => {\n                    this.column.options = result || [];\n                    this.options = this.column.options;\n                    this.value = this.table.getCellValue(this.row, this.column);\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getValuesByProcessDefinitionId(field) {\n        this.formService\n            .getRestFieldValuesColumnByProcessId(\n                field.form.processDefinitionId,\n                field.id,\n                this.column.id\n            )\n            .subscribe(\n                (result: DynamicTableColumnOption[]) => {\n                    this.column.options = result || [];\n                    this.options = this.column.options;\n                    this.value = this.table.getCellValue(this.row, this.column);\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    onValueChanged(row: DynamicTableRow, column: DynamicTableColumn, event: any) {\n        let value: any = (<HTMLInputElement> event).value;\n        value = column.options.find(opt => opt.name === value);\n        row.value[column.id] = value;\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DynamicRowValidationSummary, DynamicTableColumn, DynamicTableModel, DynamicTableRow } from './../dynamic-table.widget.model';\n\n@Component({\n    selector: 'row-editor',\n    template: require('./row.editor.html'),\n    styles: [require('./row.editor.css')]\n})\nexport class RowEditorComponent {\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    @Output()\n    save: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    cancel: EventEmitter<any> = new EventEmitter<any>();\n\n    validationSummary: DynamicRowValidationSummary = <DynamicRowValidationSummary> { isValid: true, text: null };\n\n    onCancelChanges() {\n        this.cancel.emit({\n            table: this.table,\n            row: this.row,\n            column: this.column\n        });\n    }\n\n    onSaveChanges() {\n        this.validate();\n        if (this.isValid()) {\n            this.save.emit({\n                table: this.table,\n                row: this.row,\n                column: this.column\n            });\n        }\n    }\n\n    private isValid(): boolean {\n        return this.validationSummary && this.validationSummary.isValid;\n    }\n\n    private validate() {\n        this.validationSummary = this.table.validateRow(this.row);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { DynamicTableColumn, DynamicTableModel, DynamicTableRow } from './../../dynamic-table.widget.model';\n\n@Component({\n    selector: 'adf-text-editor',\n    template: require('./text.editor.html'),\n    styles: [require('./text.editor.scss')]\n})\nexport class TextEditorComponent implements OnInit {\n\n    @Input()\n    table: DynamicTableModel;\n\n    @Input()\n    row: DynamicTableRow;\n\n    @Input()\n    column: DynamicTableColumn;\n\n    displayName: string;\n\n    ngOnInit() {\n        this.displayName = this.table.getDisplayText(this.column);\n    }\n\n    onValueChanged(row: DynamicTableRow, column: DynamicTableColumn, event: any) {\n        let value: any = (<HTMLInputElement> event.target).value;\n        row.value[column.id] = value;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'error-widget',\n    template: require('./error.component.html'),\n    styles: [require('./error.component.scss')],\n    animations: [\n        trigger('transitionMessages', [\n            state('enter', style({opacity: 1, transform: 'translateY(0%)'})),\n            transition('void => enter', [\n                style({opacity: 0, transform: 'translateY(-100%)'}),\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n            ])\n        ])\n    ],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ErrorWidgetComponent extends WidgetComponent implements AfterViewInit, OnChanges {\n\n    @Input()\n    error: string;\n\n    @Input()\n    required: string;\n\n    _subscriptAnimationState: string = '';\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n    ngAfterViewInit() {\n        this._subscriptAnimationState = 'enter';\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['required']) {\n            this.required = changes.required.currentValue;\n            this._subscriptAnimationState = 'enter';\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/error/error.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, ElementRef, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from '../../../services/form.service';\nimport { GroupModel } from './../core/group.model';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'functional-group-widget',\n    template: require('./functional-group.widget.html'),\n    styles: [require('./functional-group.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class FunctionalGroupWidgetComponent extends WidgetComponent implements OnInit {\n\n    value: string;\n    popupVisible: boolean = false;\n    groups: GroupModel[] = [];\n    minTermLength: number = 1;\n    groupId: string;\n\n    constructor(public formService: FormService,\n                public elementRef: ElementRef) {\n         super(formService);\n    }\n\n    // TODO: investigate, called 2 times\n    // https://github.com/angular/angular/issues/6782\n    ngOnInit() {\n        if (this.field) {\n            let group = this.field.value;\n            if (group) {\n                this.value = group.name;\n            }\n\n            let params = this.field.params;\n            if (params && params['restrictWithGroup']) {\n                let restrictWithGroup = <GroupModel> params['restrictWithGroup'];\n                this.groupId = restrictWithGroup.id;\n            }\n\n            // Load auto-completion for previously saved value\n            if (this.value) {\n                this.formService\n                    .getWorkflowGroups(this.value, this.groupId)\n                    .subscribe((result: GroupModel[]) => this.groups = result || []);\n            }\n        }\n    }\n\n    onKeyUp(event: KeyboardEvent) {\n        if (this.value && this.value.length >= this.minTermLength) {\n            this.formService.getWorkflowGroups(this.value, this.groupId)\n                .subscribe((result: GroupModel[]) => {\n                    this.groups = result || [];\n                    this.popupVisible = this.groups.length > 0;\n                });\n        } else {\n            this.popupVisible = false;\n        }\n    }\n\n    onBlur() {\n        setTimeout(() => {\n            this.flushValue();\n        }, 200);\n    }\n\n    flushValue() {\n        this.popupVisible = false;\n\n        let option = this.groups.find(item => item.name.toLocaleLowerCase() === this.value.toLocaleLowerCase());\n\n        if (option) {\n            this.field.value = option;\n            this.value = option.name;\n        } else {\n            this.field.value = null;\n            this.value = null;\n        }\n\n        this.field.updateForm();\n    }\n\n    // TODO: still causes onBlur execution\n    onItemClick(item: GroupModel, event: Event) {\n        if (item) {\n            this.field.value = item;\n            this.value = item.name;\n        }\n        if (event) {\n            event.preventDefault();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'hyperlink-widget',\n    template: require('./hyperlink.widget.html'),\n    styles: [require('./hyperlink.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class HyperlinkWidgetComponent extends WidgetComponent implements OnInit {\n\n    linkUrl: string = WidgetComponent.DEFAULT_HYPERLINK_URL;\n    linkText: string = null;\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.linkUrl = this.getHyperlinkUrl(this.field);\n            this.linkText = this.getHyperlinkText(this.field);\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'multiline-text-widget',\n    template: require('./multiline-text.widget.html'),\n    styles: [require('./multiline-text.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class MultilineTextWidgetComponentComponent extends WidgetComponent  {\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'number-widget',\n    template: require('./number.widget.html'),\n    styles: [require('./number.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NumberWidgetComponent extends WidgetComponent {\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/number/number.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { AfterViewInit, Component, ElementRef, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { FormService } from '../../../services/form.service';\nimport { GroupUserModel } from '../core/group-user.model';\nimport { GroupModel } from '../core/group.model';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'people-widget',\n    template: require('./people.widget.html'),\n    styles: [require('./people.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class PeopleWidgetComponent extends WidgetComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('inputValue')\n    input: ElementRef;\n\n    popupVisible: boolean = false;\n    minTermLength: number = 1;\n    value: string;\n    users: GroupUserModel[] = [];\n    groupId: string;\n\n    constructor(public formService: FormService,\n                public elementRef: ElementRef) {\n         super(formService);\n    }\n\n    // TODO: investigate, called 2 times\n    // https://github.com/angular/angular/issues/6782\n    ngOnInit() {\n        if (this.field) {\n            let user: GroupUserModel = this.field.value;\n            if (user) {\n                this.value = this.getDisplayName(user);\n            }\n\n            let params = this.field.params;\n            if (params && params['restrictWithGroup']) {\n                let restrictWithGroup = <GroupModel> params['restrictWithGroup'];\n                this.groupId = restrictWithGroup.id;\n            }\n\n            // Load auto-completion for previously saved value\n            if (this.value) {\n                this.formService\n                    .getWorkflowUsers(this.value, this.groupId)\n                    .subscribe((result: GroupUserModel[]) => this.users = result || []);\n            }\n        }\n    }\n\n    ngAfterViewInit() {\n        let onBlurInputEvent = Observable.fromEvent(this.input.nativeElement, 'blur');\n        onBlurInputEvent.debounceTime(200).subscribe((event) => {\n            this.flushValue();\n        });\n    }\n\n    onKeyUp(event: KeyboardEvent) {\n        if (this.value && this.value.length >= this.minTermLength) {\n            this.formService.getWorkflowUsers(this.value, this.groupId)\n                .subscribe((result: GroupUserModel[]) => {\n                    this.users = result || [];\n                    this.popupVisible = this.users.length > 0;\n                });\n        } else {\n            this.popupVisible = false;\n        }\n    }\n\n    onErrorImageLoad(user) {\n        if (user.userImage) {\n            user.userImage = null;\n        }\n    }\n\n    flushValue() {\n        this.popupVisible = false;\n\n        let option = this.users.find(item => {\n            let fullName = this.getDisplayName(item).toLocaleLowerCase();\n            return (this.value && fullName === this.value.toLocaleLowerCase());\n        });\n\n        if (option) {\n            this.field.value = option;\n            this.value = this.getDisplayName(option);\n        } else {\n            this.field.value = null;\n            this.value = null;\n        }\n\n        this.field.updateForm();\n    }\n\n    getDisplayName(model: GroupUserModel) {\n        if (model) {\n            let displayName = `${model.firstName || ''} ${model.lastName || ''}`;\n            return displayName.trim();\n        }\n\n        return '';\n    }\n\n    onItemClick(item: GroupUserModel, event: Event) {\n        if (item) {\n            this.field.value = item;\n            this.value = this.getDisplayName(item);\n        }\n        if (event) {\n            event.preventDefault();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/people/people.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from '../../../services/form.service';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormFieldOption } from './../core/form-field-option';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'radio-buttons-widget',\n    template: require('./radio-buttons.widget.html'),\n    styles: [require('./radio-buttons.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class RadioButtonsWidgetComponent extends WidgetComponent implements OnInit {\n\n    constructor(public formService: FormService,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.restUrl) {\n            if (this.field.form.taskId) {\n                this.getOptionsByTaskId();\n            } else {\n                this.getOptionsByProcessDefinitionId();\n            }\n        }\n    }\n\n    getOptionsByTaskId() {\n        this.formService\n            .getRestFieldValues(\n                this.field.form.taskId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    this.field.options = result || [];\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getOptionsByProcessDefinitionId() {\n        this.formService\n            .getRestFieldValuesByProcessId(\n                this.field.form.processDefinitionId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    this.field.options = result || [];\n                    this.field.updateForm();\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    onOptionClick(optionSelected: any) {\n        this.field.value = optionSelected;\n        this.checkVisibility();\n    }\n\n    checkVisibility() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { AfterContentChecked, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormFieldModel, TabModel } from './../core/index';\n\n@Component({\n    selector: 'tabs-widget',\n    template: require('./tabs.widget.html'),\n    encapsulation: ViewEncapsulation.None\n})\nexport class TabsWidgetComponent implements AfterContentChecked {\n\n    @Input()\n    tabs: TabModel[] = [];\n\n    @Output()\n    formTabChanged: EventEmitter<FormFieldModel> = new EventEmitter<FormFieldModel>();\n\n    visibleTabs: TabModel[] = [];\n\n    hasTabs() {\n        return this.tabs && this.tabs.length > 0;\n    }\n\n    ngAfterContentChecked() {\n        this.filterVisibleTabs();\n    }\n\n    filterVisibleTabs() {\n        this.visibleTabs = this.tabs.filter(tab => {\n            return tab.isVisible;\n        });\n    }\n\n    tabChanged(field: FormFieldModel) {\n        this.formTabChanged.emit(field);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/tabs/tabs.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport {\n    Directive,\n    ElementRef,\n    forwardRef,\n    HostListener,\n    Input,\n    OnChanges,\n    Renderer,\n    SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputMaskDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[textMask]',\n    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class InputMaskDirective implements OnChanges, ControlValueAccessor {\n\n    @Input('textMask') inputMask: {\n        mask: '',\n        isReversed: false\n    };\n\n    private translationMask = {\n        '0': { pattern: /\\d/ },\n        '9': { pattern: /\\d/, optional: true },\n        '#': { pattern: /\\d/, recursive: true },\n        'A': { pattern: /[a-zA-Z0-9]/ },\n        'S': { pattern: /[a-zA-Z]/ }\n    };\n\n    private byPassKeys = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91];\n    private value;\n    private invalidCharacters = [];\n\n    constructor(private el: ElementRef, private render: Renderer) {\n    }\n\n    _onChange = (_: any) => {\n    }\n\n    _onTouched = () => {\n    }\n\n    @HostListener('input', ['$event'])\n    @HostListener('keyup', ['$event']) onTextInput(event: KeyboardEvent) {\n        if (this.inputMask && this.inputMask.mask) {\n            this.maskValue(this.el.nativeElement.value, this.el.nativeElement.selectionStart,\n                this.inputMask.mask, this.inputMask.isReversed, event.keyCode);\n        } else {\n            this._onChange(this.el.nativeElement.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['inputMask'] && changes['inputMask'].currentValue['mask']) {\n            this.inputMask = changes['inputMask'].currentValue;\n        }\n    }\n\n    writeValue(value: any) {\n        this.el.nativeElement.value = value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => any): void {\n        this._onTouched = fn;\n    }\n\n    private maskValue(actualValue, startCaret, maskToApply, isMaskReversed, keyCode) {\n        if (this.byPassKeys.indexOf(keyCode) === -1) {\n            let value = this.getMasked(false, actualValue, maskToApply, isMaskReversed);\n            let calculatedCaret = this.calculateCaretPosition(startCaret, actualValue, keyCode);\n            this.render.setElementAttribute(this.el.nativeElement, 'value', value);\n            this.el.nativeElement.value = value;\n            this.setValue(value);\n            this._onChange(value);\n            this.setCaretPosition(calculatedCaret);\n        }\n    }\n\n    private setCaretPosition(caretPosition) {\n        this.el.nativeElement.moveStart = caretPosition;\n        this.el.nativeElement.moveEnd = caretPosition;\n    }\n\n    calculateCaretPosition(caretPosition, newValue, keyCode) {\n        let newValueLength = newValue.length;\n        let oldValue = this.getValue() || '';\n        let oldValueLength = oldValue.length;\n\n        if (keyCode === 8 && oldValue !== newValue) {\n            caretPosition = caretPosition - (newValue.slice(0, caretPosition).length - oldValue.slice(0, caretPosition).length);\n        } else if (oldValue !== newValue) {\n            if (caretPosition >= oldValueLength) {\n                caretPosition = newValueLength;\n            } else {\n                caretPosition = caretPosition + (newValue.slice(0, caretPosition).length - oldValue.slice(0, caretPosition).length);\n            }\n        }\n        return caretPosition;\n    }\n\n    getMasked(skipMaskChars, val, mask, isReversed = false) {\n        let buf = [],\n            value = val,\n            maskIndex = 0,\n            maskLen = mask.length,\n            valueIndex = 0,\n            valueLength = value.length,\n            offset = 1,\n            addMethod = 'push',\n            resetPos = -1,\n            lastMaskChar,\n            lastUntranslatedMaskChar,\n            check;\n\n        if (isReversed) {\n            addMethod = 'unshift';\n            offset = -1;\n            lastMaskChar = 0;\n            maskIndex = maskLen - 1;\n            valueIndex = valueLength - 1;\n        } else {\n            lastMaskChar = maskLen - 1;\n        }\n        check = this.isToCheck(isReversed, maskIndex, maskLen, valueIndex, valueLength);\n        while (check) {\n            let maskDigit = mask.charAt(maskIndex),\n                valDigit = value.charAt(valueIndex),\n                translation = this.translationMask[maskDigit];\n\n            if (translation) {\n                if (valDigit.match(translation.pattern)) {\n                    buf[addMethod](valDigit);\n                    if (translation.recursive) {\n                        if (resetPos === -1) {\n                            resetPos = maskIndex;\n                        } else if (maskIndex === lastMaskChar) {\n                            maskIndex = resetPos - offset;\n                        }\n                        if (lastMaskChar === resetPos) {\n                            maskIndex -= offset;\n                        }\n                    }\n                    maskIndex += offset;\n                } else if (valDigit === lastUntranslatedMaskChar) {\n                    lastUntranslatedMaskChar = undefined;\n                } else if (translation.optional) {\n                    maskIndex += offset;\n                    valueIndex -= offset;\n                } else {\n                    this.invalidCharacters.push({\n                        index: valueIndex,\n                        digit: valDigit,\n                        translated: translation.pattern\n                    });\n                }\n                valueIndex += offset;\n            } else {\n                if (!skipMaskChars) {\n                    buf[addMethod](maskDigit);\n                }\n                if (valDigit === maskDigit) {\n                    valueIndex += offset;\n                } else {\n                    lastUntranslatedMaskChar = maskDigit;\n                }\n                maskIndex += offset;\n            }\n            check = this.isToCheck(isReversed, maskIndex, maskLen, valueIndex, valueLength);\n        }\n\n        let lastMaskCharDigit = mask.charAt(lastMaskChar);\n        if (maskLen === valueLength + 1 && !this.translationMask[lastMaskCharDigit]) {\n            buf.push(lastMaskCharDigit);\n        }\n\n        return buf.join('');\n    }\n\n    private isToCheck(isReversed, maskIndex, maskLen, valueIndex, valueLength) {\n        let check = false;\n        if (isReversed) {\n            check = (maskIndex > -1) && (valueIndex > -1);\n        } else {\n            check = (maskIndex < maskLen) && (valueIndex < valueLength);\n        }\n        return check;\n    }\n\n    private setValue(value) {\n        this.value = value;\n    }\n\n    private getValue() {\n        return this.value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/text/text-mask.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'text-widget',\n    template: require('./text.widget.html'),\n    styles: [require('./text.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TextWidgetComponent extends WidgetComponent implements OnInit {\n\n    mask: string;\n    isMaskReversed: boolean;\n\n    constructor(public formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field.params && this.field.params['inputMask']) {\n            this.mask = this.field.params['inputMask'];\n            this.isMaskReversed = this.field.params['inputMaskReversed'] ? this.field.params['inputMaskReversed'] : false;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/text/text.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { WidgetVisibilityService } from '../../../services/widget-visibility.service';\nimport { FormService } from './../../../services/form.service';\nimport { FormFieldOption } from './../core/form-field-option';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'typeahead-widget',\n    template: require('./typeahead.widget.html'),\n    styles: [require('./typeahead.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TypeaheadWidgetComponent extends WidgetComponent implements OnInit {\n\n    popupVisible: boolean = false;\n    minTermLength: number = 1;\n    value: string;\n    options: FormFieldOption[] = [];\n\n    constructor(public formService: FormService,\n                private visibilityService: WidgetVisibilityService,\n                private logService: LogService) {\n         super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field.form.taskId) {\n            this.getValuesByTaskId();\n        } else {\n            this.getValuesByProcessDefinitionId();\n        }\n    }\n\n    getValuesByTaskId() {\n        this.formService\n            .getRestFieldValues(\n                this.field.form.taskId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    let options = result || [];\n                    this.field.options = options;\n\n                    let fieldValue = this.field.value;\n                    if (fieldValue) {\n                        let toSelect = options.find(item => item.id === fieldValue);\n                        if (toSelect) {\n                            this.value = toSelect.name;\n                        }\n                    }\n                    this.field.updateForm();\n                    this.visibilityService.refreshEntityVisibility(this.field);\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getValuesByProcessDefinitionId() {\n        this.formService\n            .getRestFieldValuesByProcessId(\n                this.field.form.processDefinitionId,\n                this.field.id\n            )\n            .subscribe(\n                (result: FormFieldOption[]) => {\n                    let options = result || [];\n                    this.field.options = options;\n\n                    let fieldValue = this.field.value;\n                    if (fieldValue) {\n                        let toSelect = options.find(item => item.id === fieldValue);\n                        if (toSelect) {\n                            this.value = toSelect.name;\n                        }\n                    }\n                    this.field.updateForm();\n                    this.visibilityService.refreshEntityVisibility(this.field);\n                },\n                err => this.handleError(err)\n            );\n    }\n\n    getOptions(): FormFieldOption[] {\n        let val = this.value.toLocaleLowerCase();\n        return this.field.options.filter(item => {\n            let name = item.name.toLocaleLowerCase();\n            return name.indexOf(val) > -1;\n        });\n    }\n\n    onKeyUp(event: KeyboardEvent) {\n        if (this.value && this.value.length >= this.minTermLength) {\n            this.options = this.getOptions();\n            this.popupVisible = this.options.length > 0;\n        } else {\n            this.popupVisible = false;\n        }\n    }\n\n    onBlur() {\n        setTimeout(() => {\n            this.flushValue();\n            this.checkVisibility();\n        }, 200);\n    }\n\n    flushValue() {\n        this.popupVisible = false;\n\n        let options = this.field.options || [];\n        let lValue = this.value ? this.value.toLocaleLowerCase() : null;\n\n        let field = options.find(item => item.name && item.name.toLocaleLowerCase() === lValue);\n        if (field) {\n            this.field.value = field.id;\n            this.value = field.name;\n        } else {\n            this.field.value = null;\n            this.value = null;\n        }\n\n        // TODO: seems to be not needed as field.value setter calls it\n        this.field.updateForm();\n    }\n\n    // TODO: still causes onBlur execution\n    onItemClick(item: FormFieldOption, event: Event) {\n        if (item) {\n            this.field.value = item.id;\n            this.value = item.name;\n            this.checkVisibility();\n        }\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n    checkVisibility() {\n        this.visibilityService.refreshVisibility(this.field.form);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../../services/form.service';\nimport { baseHost , WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'unknown-widget',\n    template: `\n            <md-list class=\"adf-unknown-widget\">\n                <md-list-item>\n                     <md-icon class=\"md-24\">error_outline</md-icon>\n                     <span class=\"adf-unknown-text\">Unknown type: {{field.type}}</span>\n                </md-list-item>\n            </md-list>\n\n    `,\n    styles: [require('./unknown.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class UnknownWidgetComponent extends WidgetComponent {\n\n    constructor(public formService: FormService) {\n         super(formService);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/unknown/unknown.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { LogService, ThumbnailService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { FormService } from '../../../services/form.service';\nimport { ContentLinkModel } from '../core/content-link.model';\nimport { baseHost, WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'upload-widget',\n    template: require('./upload.widget.html'),\n    styles: [require('./upload.widget.scss')],\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadWidgetComponent extends WidgetComponent implements OnInit {\n\n    hasFile: boolean;\n    displayText: string;\n    multipleOption: string = '';\n    mimeTypeIcon: string;\n\n    constructor(public formService: FormService,\n                private logService: LogService,\n                private thumbnailService: ThumbnailService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0) {\n            this.hasFile = true;\n        }\n        this.getMultipleFileParam();\n    }\n\n    reset(file: any) {\n        if (this.field) {\n            this.removeElementFromList(this.field.value, file);\n            this.removeElementFromList(this.field.json.value, file);\n            this.hasFile = this.field.value.length > 0;\n            this.resetFormValueWithNoFiles();\n        }\n    }\n\n    onFileChanged(event: any) {\n        let files = event.target.files;\n        let filesSaved = [];\n        if (files && files.length > 0) {\n            Observable.from(files).\n                flatMap(file => this.uploadRawContent(file)).subscribe((res) => {\n                    filesSaved.push(res);\n                },\n                (error) => {\n                    this.logService.error('Error uploading file. See console output for more details.');\n                },\n                () => {\n                    this.field.value = filesSaved;\n                    this.field.json.value = filesSaved;\n                });\n        }\n    }\n\n    private uploadRawContent(file): Observable<any> {\n        return this.formService.createTemporaryRawRelatedContent(file)\n            .map((response: any) => {\n                this.logService.info(response);\n                return response;\n            });\n    }\n\n    private getMultipleFileParam() {\n        if (this.field &&\n            this.field.params &&\n            this.field.params.multiple) {\n            this.multipleOption = this.field.params.multiple ? 'multiple' : '';\n        }\n    }\n\n    decode(fileName: string): string {\n        return decodeURI(fileName);\n    }\n\n    private removeElementFromList(list, element) {\n        let index = list.indexOf(element);\n        if (index !== -1) {\n            list.splice(index, 1);\n        }\n    }\n\n    private resetFormValueWithNoFiles() {\n        if (this.field.value.length === 0) {\n            this.field.value = null;\n            this.field.json.value = null;\n        }\n    }\n\n    getIcon(mimeType) {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    fileClicked(file: ContentLinkModel): void {\n        this.formService.getFileRawContent(file.id).subscribe(\n            (blob: Blob) => {\n                file.contentBlob = blob;\n                this.formService.formContentClicked.next(file);\n            },\n            (error) => {\n                this.logService.error('Unable to send evento for file ' + file.name);\n            }\n        );\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/upload/upload.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormFieldModel, FormModel } from './../components/widgets/core/index';\nimport { FormEvent } from './form.event';\n\nexport class FormFieldEvent extends FormEvent {\n\n    readonly field: FormFieldModel;\n\n    constructor(form: FormModel, field: FormFieldModel) {\n        super(form);\n        this.field = field;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/events/form-field.event.ts","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./form.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/form.component.scss\n// module id = 347\n// module chunks = 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Compiler,\n    Component, ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Input,\n    ModuleWithComponentFactories,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { CoreModule } from 'ng2-alfresco-core';\n\nimport { FormRenderingService } from './../../services/form-rendering.service';\nimport { WidgetVisibilityService } from './../../services/widget-visibility.service';\nimport { FormFieldModel } from './../widgets/core/index';\nimport { WidgetComponent } from './../widgets/widget.component';\n\ndeclare var adf: any;\n\n@Component({\n    selector: 'adf-form-field, form-field',\n    template: `\n        <div [hidden]=\"!field?.isVisible\"\n            [class.adf-focus]=\"focus\"\n            (focusin)=\"focusToggle()\"\n            (focusout)=\"focusToggle()\">\n            <div #container></div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormFieldComponent implements OnInit, OnDestroy {\n\n    @ViewChild('container', { read: ViewContainerRef })\n    container: ViewContainerRef;\n\n    @Input()\n    field: FormFieldModel = null;\n\n    componentRef: ComponentRef<{}>;\n\n    focus: boolean = false;\n\n    constructor(private formRenderingService: FormRenderingService,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                private visibilityService: WidgetVisibilityService,\n                private compiler: Compiler) {\n    }\n\n    ngOnInit() {\n        let originalField = this.getField();\n        if (originalField) {\n            let customTemplate = this.field.form.customFieldTemplates[originalField.type];\n            if (customTemplate && this.hasController(originalField.type)) {\n                let factory = this.getComponentFactorySync(originalField.type, customTemplate);\n                this.componentRef = this.container.createComponent(factory);\n                let instance: any = this.componentRef.instance;\n                if (instance) {\n                    instance.field = originalField;\n                }\n            } else {\n                let componentType = this.formRenderingService.resolveComponentType(originalField);\n                if (componentType) {\n                    let factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n                    this.componentRef = this.container.createComponent(factory);\n                    let instance = <WidgetComponent> this.componentRef.instance;\n                    instance.field = this.field;\n                    instance.fieldChanged.subscribe(field => {\n                        if (field && this.field.form) {\n                            this.visibilityService.refreshVisibility(this.field.form);\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n            this.componentRef = null;\n        }\n    }\n\n    private getField() {\n        return (this.field.params && this.field.params.field) ? this.field.params.field : this.field;\n    }\n\n    private hasController(type: string): boolean {\n        return (adf && adf.components && adf.components[type]);\n    }\n\n    private getComponentFactorySync(type: string, template: string): ComponentFactory<any> {\n        let componentInfo = adf.components[type];\n\n        if (componentInfo.factory) {\n            return componentInfo.factory;\n        }\n\n        let metadata = {\n            selector: `runtime-component-${type}`,\n            template: template\n        };\n\n        let factory = this.createComponentFactorySync(this.compiler, metadata, componentInfo.class);\n        componentInfo.factory = factory;\n        return factory;\n    }\n\n    private createComponentFactorySync(compiler: Compiler, metadata: Component, componentClass: any): ComponentFactory<any> {\n        const cmpClass = componentClass || class RuntimeComponent {\n        };\n        const decoratedCmp = Component(metadata)(cmpClass);\n\n        @NgModule({ imports: [CoreModule], declarations: [decoratedCmp] })\n        class RuntimeComponentModule {\n        }\n\n        let module: ModuleWithComponentFactories<any> = compiler.compileModuleAndAllComponentsSync(RuntimeComponentModule);\n        return module.componentFactories.find(x => x.componentType === decoratedCmp);\n    }\n\n    focusToggle() {\n        this.focus = !this.focus;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/form-field/form-field.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MD_PLACEHOLDER_GLOBAL_OPTIONS, MdAutocompleteModule, MdButtonModule, MdCardModule,\n    MdCheckboxModule, MdDatepickerModule, MdGridListModule, MdIconModule, MdInputModule,\n    MdListModule, MdOptionModule, MdRadioModule, MdSelectModule, MdSlideToggleModule, MdTableModule,\n    MdTabsModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MdAutocompleteModule, MdButtonModule, MdCardModule, MdCheckboxModule,\n        MdDatepickerModule, MdGridListModule, MdIconModule, MdInputModule, MdListModule,\n        MdOptionModule, MdRadioModule, MdSelectModule, MdSlideToggleModule, MdTableModule, MdTabsModule\n    ];\n}\n\n@NgModule({\n    providers: [\n        {provide: MD_PLACEHOLDER_GLOBAL_OPTIONS, useValue: { float: 'never' }}\n    ],\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/material.module.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { FormDefinitionModel } from '../models/form-definition.model';\nimport { ContentLinkModel } from './../components/widgets/core/content-link.model';\nimport { GroupUserModel } from './../components/widgets/core/group-user.model';\nimport { GroupModel } from './../components/widgets/core/group.model';\nimport { FormModel, FormOutcomeEvent, FormOutcomeModel, FormValues } from './../components/widgets/core/index';\nimport { FormErrorEvent, FormEvent, FormFieldEvent, ValidateFormEvent, ValidateFormFieldEvent } from './../events/index';\nimport { EcmModelService } from './ecm-model.service';\n\n@Injectable()\nexport class FormService {\n\n    static UNKNOWN_ERROR_MESSAGE: string = 'Unknown error';\n    static GENERIC_ERROR_MESSAGE: string = 'Server error';\n\n    formLoaded = new Subject<FormEvent>();\n    formDataRefreshed = new Subject<FormEvent>();\n    formFieldValueChanged = new Subject<FormFieldEvent>();\n    formEvents = new Subject<Event>();\n    taskCompleted = new Subject<FormEvent>();\n    taskCompletedError = new Subject<FormErrorEvent>();\n    taskSaved = new Subject<FormEvent>();\n    taskSavedError = new Subject<FormErrorEvent>();\n    formContentClicked = new Subject<ContentLinkModel>();\n\n    validateForm = new Subject<ValidateFormEvent>();\n    validateFormField = new Subject<ValidateFormFieldEvent>();\n\n    executeOutcome = new Subject<FormOutcomeEvent>();\n\n    constructor(private ecmModelService: EcmModelService,\n                private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    private get contentApi(): any {\n        return this.apiService.getInstance().activiti.contentApi;\n    }\n\n    private get taskApi(): any {\n        return this.apiService.getInstance().activiti.taskApi;\n    }\n\n    private get modelsApi(): any {\n        return this.apiService.getInstance().activiti.modelsApi;\n    }\n\n    private get editorApi(): any {\n        return this.apiService.getInstance().activiti.editorApi;\n    }\n\n    private get processApi(): any {\n        return this.apiService.getInstance().activiti.processApi;\n    }\n\n    private get usersWorkflowApi(): any {\n        return this.apiService.getInstance().activiti.usersWorkflowApi;\n    }\n\n    private get groupsApi(): any {\n        return this.apiService.getInstance().activiti.groupsApi;\n    }\n\n    parseForm(json: any, data?: FormValues, readOnly: boolean = false): FormModel {\n        if (json) {\n            let form = new FormModel(json.formDefinition, data, readOnly, this);\n            if (!json.fields) {\n                form.outcomes = [\n                    new FormOutcomeModel(form, {\n                        id: '$custom',\n                        name: FormOutcomeModel.SAVE_ACTION,\n                        isSystem: true\n                    })\n                ];\n            }\n            return form;\n        }\n        return null;\n    }\n\n    /**\n     * Create a Form with a fields for each metadata properties\n     * @returns {Observable<any>}\n     */\n    createFormFromANode(formName: string): Observable<any> {\n        return Observable.create(observer => {\n            this.createForm(formName).subscribe(\n                form => {\n                    this.ecmModelService.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(\n                        customType => {\n                            let formDefinitionModel = new FormDefinitionModel(form.id, form.name, form.lastUpdatedByFullName, form.lastUpdated, customType.entry.properties);\n                            this.addFieldsToAForm(form.id, formDefinitionModel).subscribe(formData => {\n                                observer.next(formData);\n                                observer.complete();\n                            }, err => this.handleError(err));\n                        },\n                        err => this.handleError(err));\n                },\n                err => this.handleError(err));\n        });\n    }\n\n    /**\n     * Create a Form\n     * @returns {Observable<any>}\n     */\n    createForm(formName: string): Observable<any> {\n        let dataModel = {\n            name: formName,\n            description: '',\n            modelType: 2,\n            stencilSet: 0\n        };\n\n        return Observable.fromPromise(\n            this.modelsApi.createModel(dataModel)\n        );\n    }\n\n    saveForm(formId: string, formModel: FormDefinitionModel): Observable<any> {\n        return Observable.fromPromise(\n            this.editorApi.saveForm(formId, formModel)\n        );\n    }\n\n    /**\n     * @deprecated in 1.7.0, use saveForm API instead\n     * Add Fileds to A form\n     * @returns {Observable<any>}\n     */\n    addFieldsToAForm(formId: string, formModel: FormDefinitionModel): Observable<any> {\n        console.log('addFieldsToAForm is deprecated in 1.7.0, use saveForm API instead');\n        return Observable.fromPromise(\n            this.editorApi.saveForm(formId, formModel)\n        );\n    }\n\n    /**\n     * Search For A Form by name\n     * @returns {Observable<any>}\n     */\n    searchFrom(name: string): Observable<any> {\n        let opts = {\n            'modelType': 2\n        };\n\n        return Observable.fromPromise(\n            this.modelsApi.getModels(opts)\n        )\n        .map(function (forms: any) {\n            return forms.data.find(formdata => formdata.name === name);\n        })\n        .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get All the forms\n     * @returns {Observable<any>}\n     */\n    getForms(): Observable<any> {\n        let opts = {\n            'modelType': 2\n        };\n\n        return Observable.fromPromise(this.modelsApi.getModels(opts))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Process Definitions\n     * @returns {Observable<any>}\n     */\n    getProcessDefinitions(): Observable<any> {\n        return Observable.fromPromise(this.processApi.getProcessDefinitions({}))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get All the Tasks\n     * @returns {Observable<any>}\n     */\n    getTasks(): Observable<any> {\n        return Observable.fromPromise(this.taskApi.listTasks({}))\n            .map(this.toJsonArray)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Task\n     * @param taskId Task Id\n     * @returns {Observable<any>}\n     */\n    getTask(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getTask(taskId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Save Task Form\n     * @param taskId Task Id\n     * @param formValues Form Values\n     * @returns {Observable<any>}\n     */\n    saveTaskForm(taskId: string, formValues: FormValues): Observable<any> {\n        let body = JSON.stringify({values: formValues});\n\n        return Observable.fromPromise(this.taskApi.saveTaskForm(taskId, body))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Complete Task Form\n     * @param taskId Task Id\n     * @param formValues Form Values\n     * @param outcome Form Outcome\n     * @returns {Observable<any>}\n     */\n    completeTaskForm(taskId: string, formValues: FormValues, outcome?: string): Observable<any> {\n        let data: any = {values: formValues};\n        if (outcome) {\n            data.outcome = outcome;\n        }\n        let body = JSON.stringify(data);\n\n        return Observable.fromPromise(this.taskApi.completeTaskForm(taskId, body))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Form related to a taskId\n     * @param taskId Task Id\n     * @returns {Observable<any>}\n     */\n    getTaskForm(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getTaskForm(taskId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get Form Definition\n     * @param formId Form Id\n     * @returns {Observable<any>}\n     */\n    getFormDefinitionById(formId: string): Observable<any> {\n        return Observable.fromPromise(this.editorApi.getForm(formId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Returns form definition by a given name.\n     * @param name\n     * @returns {Promise<T>|Promise<ErrorObservable>}\n     */\n    getFormDefinitionByName(name: string): Observable<any> {\n        let opts = {\n            'filter': 'myReusableForms',\n            'filterText': name,\n            'modelType': 2\n        };\n\n        return Observable.fromPromise(this.modelsApi.getModels(opts))\n            .map(this.getFormId)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get start form instance for a given processId\n     * @param processId Process definition ID\n     * @returns {Observable<any>}\n     */\n    getStartFormInstance(processId: string): Observable<any> {\n        return Observable.fromPromise(\n            this.processApi.getProcessInstanceStartForm(processId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get start form definition for a given process\n     * @param processId Process definition ID\n     * @returns {Observable<any>}\n     */\n    getStartFormDefinition(processId: string): Observable<any> {\n        return Observable.fromPromise(\n            this.processApi.getProcessDefinitionStartForm(processId))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Save File\n     * @param file file\n     * @returns {Observable<any>}\n     */\n    createTemporaryRawRelatedContent(file: any): Observable<any> {\n        return Observable.fromPromise(this.contentApi.createTemporaryRawRelatedContent(file)).catch(err => this.handleError(err));\n    }\n\n    getFileContent(contentId: number): Observable<any> {\n        return Observable.fromPromise(this.contentApi.getContent(contentId)).catch(err => this.handleError(err));\n    }\n\n    getFileRawContent(contentId: number): Observable<any> {\n        return Observable.fromPromise(this.contentApi.getRawContent(contentId)).catch(err => this.handleError(err));\n    }\n\n    getFileRawContentUrl(contentId: number): string {\n        return this.contentApi.getRawContentUrl(contentId);\n    }\n\n    getContentThumbnailUrl(contentId: number): Observable<any> {\n        return Observable.fromPromise(this.contentApi.getContentThumbnailUrl(contentId)).catch(err => this.handleError(err));\n    }\n\n    getRestFieldValues(taskId: string, field: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getRestFieldValues(taskId, field)).catch(err => this.handleError(err));\n    }\n\n    getRestFieldValuesByProcessId(processDefinitionId: string, field: string): Observable<any> {\n        return Observable.fromPromise(this.processApi.getRestFieldValues(processDefinitionId, field)).catch(err => this.handleError(err));\n    }\n\n    getRestFieldValuesColumnByProcessId(processDefinitionId: string, field: string, column?: string): Observable<any> {\n        return Observable.fromPromise(this.processApi.getRestTableFieldValues(processDefinitionId, field, column)).catch(err => this.handleError(err));\n    }\n\n    getRestFieldValuesColumn(taskId: string, field: string, column?: string): Observable<any> {\n        return Observable.fromPromise(this.taskApi.getRestFieldValuesColumn(taskId, field, column)).catch(err => this.handleError(err));\n    }\n\n    private getUserProfileImageApi(userId: string): string {\n        return this.apiService.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);\n    }\n\n    getWorkflowUsers(filter: string, groupId?: string): Observable<GroupUserModel[]> {\n        let option: any = {filter: filter};\n        if (groupId) {\n            option.groupId = groupId;\n        }\n        return Observable.fromPromise(this.usersWorkflowApi.getUsers(option))\n            .switchMap((response: any) => <GroupUserModel[]> response.data || [])\n            .map((user: any) => {\n                    user.userImage = this.getUserProfileImageApi(user.id);\n                    return Observable.of(user);\n                })\n            .combineAll()\n            .catch(err => this.handleError(err));\n    }\n\n    getWorkflowGroups(filter: string, groupId?: string): Observable<GroupModel[]> {\n        let option: any = {filter: filter};\n        if (groupId) {\n            option.groupId = groupId;\n        }\n        return Observable.fromPromise(this.groupsApi.getGroups(option))\n            .map((response: any) => <GroupModel[]> response.data || [])\n            .catch(err => this.handleError(err));\n    }\n\n    getFormId(res: any): string {\n        let result = null;\n\n        if (res && res.data && res.data.length > 0) {\n            result = res.data[0].id;\n        }\n\n        return result;\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    toJsonArray(res: any) {\n        if (res) {\n            return res.data || [];\n        }\n        return [];\n    }\n\n    handleError(error: any): Observable<any> {\n        let errMsg = FormService.UNKNOWN_ERROR_MESSAGE;\n        if (error) {\n            errMsg = (error.message) ? error.message :\n                error.status ? `${error.status} - ${error.statusText}` : FormService.GENERIC_ERROR_MESSAGE;\n        }\n        this.logService.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/services/form.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { FormService } from './../services/form.service';\nimport { WidgetVisibilityService } from './../services/widget-visibility.service';\nimport { FormComponent } from './form.component';\nimport { ContentLinkModel } from './widgets/core/content-link.model';\nimport { FormOutcomeModel } from './widgets/core/index';\n\n/**\n * Displays the start form for a named process definition, which can be used to retrieve values to start a new process.\n *\n * After the form has been completed the form values are available from the attribute component.form.values and\n * component.form.isValid (boolean) can be used to check the if the form is valid or not. Both of these properties are\n * updated as the user types into the form.\n *\n * @Input\n * {processDefinitionId} string: The process definition ID\n * {showOutcomeButtons} boolean: Whether form outcome buttons should be shown, this is now always active to show form outcomes\n *  @Output\n *  {formLoaded} EventEmitter - This event is fired when the form is loaded, it pass all the value in the form.\n *  {formSaved} EventEmitter - This event is fired when the form is saved, it pass all the value in the form.\n *  {formCompleted} EventEmitter - This event is fired when the form is completed, it pass all the value in the form.\n *\n * @returns {FormComponent} .\n */\n@Component({\n    selector: 'adf-start-form, activiti-start-form',\n    template: require('./start-form.component.html'),\n    styles: [require('./form.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartFormComponent extends FormComponent implements OnChanges, OnInit {\n\n    @Input()\n    processDefinitionId: string;\n\n    @Input()\n    processId: string;\n\n    @Input()\n    showOutcomeButtons: boolean = true;\n\n    @Input()\n    showRefreshButton: boolean = true;\n\n    @Input()\n    readOnlyForm: boolean = false;\n\n    @Output()\n    outcomeClick: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    @ViewChild('outcomesContainer', {})\n    outcomesContainer: ElementRef = null;\n\n    constructor(formService: FormService,\n                visibilityService: WidgetVisibilityService,\n                logService: LogService) {\n        super(formService, visibilityService, null, null);\n        this.showTitle = false;\n    }\n\n    ngOnInit() {\n        this.formService.formContentClicked.subscribe((content: ContentLinkModel) => {\n            this.formContentClicked.emit(content);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processDefinitionId = changes['processDefinitionId'];\n        if (processDefinitionId && processDefinitionId.currentValue) {\n            this.visibilityService.cleanProcessVariable();\n            this.getStartFormDefinition(processDefinitionId.currentValue);\n            return;\n        }\n\n        let processId = changes['processId'];\n        if (processId && processId.currentValue) {\n            this.visibilityService.cleanProcessVariable();\n            this.loadStartForm(processId.currentValue);\n            return;\n        }\n    }\n\n    loadStartForm(processId: string) {\n        this.formService\n            .getStartFormInstance(processId)\n            .subscribe(\n                form => {\n                    this.formName = form.name;\n                    form.processDefinitionId = this.processDefinitionId;\n                    this.form = this.parseForm(form);\n                    this.form.readOnly = this.readOnlyForm;\n                    // this.form.processDefinitionId = this.processDefinitionId;\n                    this.onFormLoaded(this.form);\n                },\n                error => this.handleError(error)\n            );\n    }\n\n    getStartFormDefinition(processId: string) {\n        this.formService\n            .getStartFormDefinition(processId)\n            .subscribe(\n                form => {\n                    this.formName = form.processDefinitionName;\n                    this.form = this.parseForm(form);\n                    this.form.readOnly = this.readOnlyForm;\n                    this.onFormLoaded(this.form);\n                },\n                error => this.handleError(error)\n            );\n    }\n\n    /** @override */\n    isOutcomeButtonVisible(outcome: FormOutcomeModel, isFormReadOnly: boolean): boolean {\n        if (outcome && outcome.isSystem && ( outcome.name === FormOutcomeModel.SAVE_ACTION ||\n            outcome.name === FormOutcomeModel.COMPLETE_ACTION )) {\n            return false;\n        } else if (outcome && outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {\n            return true;\n        }\n        return super.isOutcomeButtonVisible(outcome, isFormReadOnly);\n    }\n\n    /** @override */\n    saveTaskForm() {\n        // do nothing\n    }\n\n    /** @override */\n    onRefreshClicked() {\n        if (this.processDefinitionId) {\n            this.visibilityService.cleanProcessVariable();\n            this.getStartFormDefinition(this.processDefinitionId);\n        } else if (this.processId) {\n            this.visibilityService.cleanProcessVariable();\n            this.loadStartForm(this.processId);\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        this.outcomeClick.emit(outcome);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/start-form.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { ContentService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { ContentLinkModel } from '../core/content-link.model';\nimport { FormService } from './../../../services/form.service';\n\n@Component({\n    selector: 'adf-content, activiti-content',\n    template: require('./content.widget.html'),\n    styles: [require('./content.widget.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentWidgetComponent implements OnChanges {\n\n    @Input()\n    id: string;\n\n    @Input()\n    showDocumentContent: boolean = true;\n\n    @Output()\n    contentClick = new EventEmitter();\n\n    @Output()\n    thumbnailLoaded: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    contentLoaded: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    content: ContentLinkModel;\n\n    constructor(protected formService: FormService,\n                private logService: LogService,\n                private contentService: ContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const contentId = changes['id'];\n        if (contentId && contentId.currentValue) {\n            this.loadContent(contentId.currentValue);\n        }\n    }\n\n    loadContent(id: number) {\n        this.formService\n            .getFileContent(id)\n            .subscribe(\n                (response: ContentLinkModel) => {\n                    this.content = new ContentLinkModel(response);\n                    this.contentLoaded.emit(this.content);\n                    this.loadThumbnailUrl(this.content);\n                },\n                (error) => {\n                    this.error.emit(error);\n                }\n            );\n    }\n\n    loadThumbnailUrl(content: ContentLinkModel) {\n        if (this.content.isThumbnailSupported()) {\n            let observable: Observable<any>;\n\n            if (this.content.isTypeImage()) {\n                observable = this.formService.getFileRawContent(content.id);\n            } else {\n                observable = this.formService.getContentThumbnailUrl(content.id);\n            }\n\n            if (observable) {\n                observable.subscribe(\n                    (response: Blob) => {\n                        this.content.thumbnailUrl = this.contentService.createTrustedUrl(response);\n                        this.thumbnailLoaded.emit(this.content.thumbnailUrl);\n                    },\n                    (error) => {\n                        this.error.emit(error);\n\n                    }\n                );\n            }\n        }\n    }\n\n    openViewer(content: ContentLinkModel): void {\n        this.formService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.contentClick.emit(content);\n                this.logService.info('Content clicked' + content.id);\n                this.formService.formContentClicked.next(content);\n            },\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n    }\n\n    /**\n     * Invoke content download.\n     */\n    download(content: ContentLinkModel): void {\n        this.formService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/content/content.widget.ts","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".attach-widget {\\n    width:100%\\n}\\n\\n.attach-widget__icon {\\n    float: left;\\n}\\n\\n.attach-widget__file {\\n    margin-top: 4px;\\n}\\n\\n.attach-widget__reset {\\n    margin-top: 4px;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-form/src/components/widgets/attach/attach.widget.css\n// module id = 412\n// module chunks = 2","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".row-editor {\\n    padding: 8px;\\n}\\n\\n.row-editor__validation-summary {\\n    visibility: hidden;\\n}\\n\\n.row-editor__invalid .row-editor__validation-summary {\\n    padding-left: 16px;\\n    padding-right: 16px;\\n    padding-top: 8px;\\n    padding-bottom: 8px;\\n    color: #d50000;\\n    visibility: visible;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.css\n// module id = 413\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./attach.widget.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/attach/attach.widget.css\n// module id = 428\n// module chunks = 2","\n        var result = require(\"!!../../../../../../node_modules/css-loader/index.js!./row.editor.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.css\n// module id = 429\n// module chunks = 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { ContainerColumnModel } from './../core/container-column.model';\nimport { ContainerModel } from './../core/container.model';\nimport { FormFieldTypes } from './../core/form-field-types';\nimport { FormFieldModel } from './../core/form-field.model';\n\nexport class ContainerWidgetComponentModel extends ContainerModel {\n\n    columns: ContainerColumnModel[] = [];\n    isExpanded: boolean = true;\n    rowspan: number = 1;\n    colspan: number = 1;\n\n    isGroup(): boolean {\n        return this.type === FormFieldTypes.GROUP;\n    }\n\n    isCollapsible(): boolean {\n        let allowCollapse = false;\n\n        if (this.isGroup() && this.field.params['allowCollapse']) {\n            allowCollapse = <boolean> this.field.params['allowCollapse'];\n        }\n\n        return allowCollapse;\n    }\n\n    isCollapsedByDefault(): boolean {\n        let collapseByDefault = false;\n\n        if (this.isCollapsible() && this.field.params['collapseByDefault']) {\n            collapseByDefault = <boolean> this.field.params['collapseByDefault'];\n        }\n\n        return collapseByDefault;\n    }\n\n    constructor(field: FormFieldModel) {\n        super(field);\n\n        if (this.field) {\n            this.columns = this.field.columns || [];\n            this.isExpanded = !this.isCollapsedByDefault();\n            this.colspan = field.colspan;\n            this.rowspan = field.rowspan;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/container/container.widget.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormFieldFileSource } from './form-field-file-source';\n\nexport interface FormFieldMetadata {\n    [key: string]: any;\n    fileSource?: FormFieldFileSource;\n    link?: boolean;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-field-metadata.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nexport interface FormFieldOption {\n    id: string;\n    name: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-field-option.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nexport interface FormFieldTemplates {\n     [key: string]: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-field-templates.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormOutcomeModel } from './form-outcome.model';\n\nexport class FormOutcomeEvent {\n\n    private _outcome: FormOutcomeModel;\n    private _defaultPrevented: boolean = false;\n\n    get outcome(): FormOutcomeModel {\n        return this._outcome;\n    }\n\n    get defaultPrevented() {\n        return this._defaultPrevented;\n    }\n\n    constructor(outcome: FormOutcomeModel) {\n        this._outcome = outcome;\n    }\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-outcome-event.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n/* tslint:disable */\nimport { FormFieldMetadata } from './form-field-metadata';\n\nexport interface FormValues extends FormFieldMetadata {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-values.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormFieldEvent, ValidateFormEvent, ValidateFormFieldEvent } from './../../../events/index';\nimport { FormService } from './../../../services/form.service';\nimport { ContainerModel } from './container.model';\nimport { FormFieldTemplates } from './form-field-templates';\nimport { FormFieldTypes } from './form-field-types';\nimport { FormFieldModel } from './form-field.model';\nimport { FormOutcomeModel } from './form-outcome.model';\nimport { FormValues } from './form-values';\nimport { FormWidgetModel, FormWidgetModelCache } from './form-widget.model';\nimport { TabModel } from './tab.model';\n\nimport {\n    FORM_FIELD_VALIDATORS,\n    FormFieldValidator\n} from './form-field-validator';\n\nexport class FormModel {\n\n    static UNSET_TASK_NAME: string = 'Nameless task';\n    static SAVE_OUTCOME: string = '$save';\n    static COMPLETE_OUTCOME: string = '$complete';\n    static START_PROCESS_OUTCOME: string = '$startProcess';\n\n    readonly id: string;\n    readonly name: string;\n    readonly taskId: string;\n    readonly taskName: string = FormModel.UNSET_TASK_NAME;\n    processDefinitionId: string;\n    private _isValid: boolean = true;\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n\n    className: string;\n    readOnly: boolean = false;\n    tabs: TabModel[] = [];\n    /** Stores root containers */\n    fields: FormWidgetModel[] = [];\n    outcomes: FormOutcomeModel[] = [];\n    customFieldTemplates: FormFieldTemplates = {};\n    fieldValidators: FormFieldValidator[] = [...FORM_FIELD_VALIDATORS];\n    readonly selectedOutcome: string;\n\n    values: FormValues = {};\n\n    readonly json: any;\n\n    hasTabs(): boolean {\n        return this.tabs && this.tabs.length > 0;\n    }\n\n    hasFields(): boolean {\n        return this.fields && this.fields.length > 0;\n    }\n\n    hasOutcomes(): boolean {\n        return this.outcomes && this.outcomes.length > 0;\n    }\n\n    constructor(json?: any, data?: FormValues, readOnly: boolean = false, protected formService?: FormService) {\n        this.readOnly = readOnly;\n\n        if (json) {\n            this.json = json;\n\n            this.id = json.id;\n            this.name = json.name;\n            this.taskId = json.taskId;\n            this.taskName = json.taskName || json.name || FormModel.UNSET_TASK_NAME;\n            this.processDefinitionId = json.processDefinitionId;\n            this.customFieldTemplates = json.customFieldTemplates || {};\n            this.selectedOutcome = json.selectedOutcome || {};\n            this.className = json.className || '';\n\n            let tabCache: FormWidgetModelCache<TabModel> = {};\n\n            this.tabs = (json.tabs || []).map(t => {\n                let model = new TabModel(this, t);\n                tabCache[model.id] = model;\n                return model;\n            });\n\n            this.fields = this.parseRootFields(json);\n\n            if (data) {\n                this.loadData(data);\n            }\n\n            for (let i = 0; i < this.fields.length; i++) {\n                let field = this.fields[i];\n                if (field.tab) {\n                    let tab = tabCache[field.tab];\n                    if (tab) {\n                        tab.fields.push(field);\n                    }\n                }\n            }\n\n            if (json.fields) {\n                let saveOutcome = new FormOutcomeModel(this, { id: FormModel.SAVE_OUTCOME, name: 'Save', isSystem: true });\n                let completeOutcome = new FormOutcomeModel(this, { id: FormModel.COMPLETE_OUTCOME, name: 'Complete', isSystem: true });\n                let startProcessOutcome = new FormOutcomeModel(this, { id: FormModel.START_PROCESS_OUTCOME, name: 'Start Process', isSystem: true });\n\n                let customOutcomes = (json.outcomes || []).map(obj => new FormOutcomeModel(this, obj));\n\n                this.outcomes = [saveOutcome].concat(\n                    customOutcomes.length > 0 ? customOutcomes : [completeOutcome, startProcessOutcome]\n                );\n            }\n        }\n\n        this.validateForm();\n    }\n\n    onFormFieldChanged(field: FormFieldModel) {\n        this.validateField(field);\n        if (this.formService) {\n            this.formService.formFieldValueChanged.next(new FormFieldEvent(this, field));\n        }\n    }\n\n    getFieldById(fieldId: string): FormFieldModel {\n        return this.getFormFields().find(field => field.id === fieldId);\n    }\n\n    // TODO: consider evaluating and caching once the form is loaded\n    getFormFields(): FormFieldModel[] {\n        let result: FormFieldModel[] = [];\n\n        for (let i = 0; i < this.fields.length; i++) {\n            let field = this.fields[i];\n\n            if (field instanceof ContainerModel) {\n                let container = <ContainerModel> field;\n                result.push(container.field);\n\n                container.field.columns.forEach((column) => {\n                    result.push(...column.fields);\n                });\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Validates entire form and all form fields.\n     *\n     * @returns {void}\n     * @memberof FormModel\n     */\n    validateForm(): void {\n        const validateFormEvent = new ValidateFormEvent(this);\n\n        if (this.formService) {\n            this.formService.validateForm.next(validateFormEvent);\n        }\n\n        this._isValid = validateFormEvent.isValid;\n\n        if (validateFormEvent.defaultPrevented) {\n            return;\n        }\n\n        if (validateFormEvent.isValid) {\n            let fields = this.getFormFields();\n            for (let i = 0; i < fields.length; i++) {\n                if (!fields[i].validate()) {\n                    this._isValid = false;\n                    return;\n                }\n            }\n        }\n    }\n\n    /**\n     * Validates a specific form field, triggers form validation.\n     *\n     * @param {FormFieldModel} field Form field to validate.\n     * @returns {void}\n     * @memberof FormModel\n     */\n    validateField(field: FormFieldModel): void {\n        if (!field) {\n            return;\n        }\n\n        const validateFieldEvent = new ValidateFormFieldEvent(this, field);\n\n        if (this.formService) {\n            this.formService.validateFormField.next(validateFieldEvent);\n        }\n\n        if (!validateFieldEvent.isValid) {\n            this._isValid = false;\n            return;\n        }\n\n        if (validateFieldEvent.defaultPrevented) {\n            return;\n        }\n\n        if (!field.validate()) {\n            this._isValid = false;\n            return;\n        }\n        this.validateForm();\n    }\n\n    // Activiti supports 3 types of root fields: container|group|dynamic-table\n    private parseRootFields(json: any): FormWidgetModel[] {\n        let fields = [];\n\n        if (json.fields) {\n            fields = json.fields;\n        } else if (json.formDefinition && json.formDefinition.fields) {\n            fields = json.formDefinition.fields;\n        }\n\n        let result: FormWidgetModel[] = [];\n\n        for (let field of fields) {\n            if (field.type === FormFieldTypes.DISPLAY_VALUE) {\n                // workaround for dynamic table on a completed/readonly form\n                if (field.params) {\n                    let originalField = field.params['field'];\n                    if (originalField.type === FormFieldTypes.DYNAMIC_TABLE) {\n                        result.push(new ContainerModel(new FormFieldModel(this, field)));\n                    }\n                }\n            } else {\n                result.push(new ContainerModel(new FormFieldModel(this, field)));\n            }\n        }\n\n        return result;\n    }\n\n    // Loads external data and overrides field values\n    // Typically used when form definition and form data coming from different sources\n    private loadData(data: FormValues) {\n        for (let field of this.getFormFields()) {\n            if (data[field.id]) {\n                field.json.value = data[field.id];\n                field.value = field.parseValue(field.json);\n                if (field.type === FormFieldTypes.DROPDOWN ||\n                    field.type === FormFieldTypes.RADIO_BUTTONS) {\n                    field.value = data[field.id].id;\n                }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormModel } from './../components/widgets/core/index';\nimport { FormEvent } from './form.event';\n\nexport class FormErrorEvent extends FormEvent {\n\n    readonly error: any;\n\n    constructor(form: FormModel, error: any) {\n        super(form);\n        this.error = error;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/events/form-error.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormFieldModel, FormModel } from './../components/widgets/core/index';\nimport { FormFieldEvent } from './form-field.event';\n\nexport class ValidateFormFieldEvent extends FormFieldEvent {\n\n    isValid = true;\n\n    constructor(form: FormModel, field: FormFieldModel) {\n        super(form, field);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/events/validate-form-field.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormModel } from './../components/widgets/core/index';\nimport { FormEvent } from './form.event';\n\nexport class ValidateFormEvent extends FormEvent {\n\n    isValid = true;\n\n    constructor(form: FormModel) {\n        super(form);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/events/validate-form.event.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class FormDefinitionModel {\n    reusable: boolean = false;\n    newVersion: boolean = false;\n    formRepresentation: any;\n    formImageBase64: string = '';\n\n    constructor(id: string, name: any, lastUpdatedByFullName: string, lastUpdated: string, metadata: any) {\n\n        this.formRepresentation = {\n            id: id,\n            name: name,\n            description: '',\n            version: 1,\n            lastUpdatedBy: 1,\n            lastUpdatedByFullName: lastUpdatedByFullName,\n            lastUpdated: lastUpdated,\n            stencilSetId: 0,\n            referenceId: null,\n            formDefinition: {\n                fields: [{\n                    name: 'Label',\n                    type: 'container',\n                    fieldType: 'ContainerRepresentation',\n                    numberOfColumns: 2,\n                    required: false,\n                    readOnly: false,\n                    sizeX: 2,\n                    sizeY: 1,\n                    row: -1,\n                    col: -1,\n                    fields: {'1': this.metadataToFields(metadata)}\n                }],\n                gridsterForm: false,\n                javascriptEvents: [],\n                metadata: {},\n                outcomes: [],\n                className: '',\n                style: '',\n                tabs: [],\n                variables: []\n            }\n        };\n    }\n\n    private metadataToFields(metadata: any): any[] {\n        let fields = [];\n        if (metadata) {\n            metadata.forEach(function(property) {\n                if (property) {\n                    let field = {\n                        type: 'text',\n                        id: property.name,\n                        name: property.name,\n                        required: false,\n                        readOnly: false,\n                        sizeX: 1,\n                        sizeY: 1,\n                        row: -1,\n                        col: -1,\n                        colspan: 1,\n                        params: {\n                            existingColspan: 1,\n                            maxColspan: 2\n                        },\n                        layout: {\n                            colspan: 1,\n                            row: -1,\n                            column: -1\n                        }\n                    };\n                    fields.push(field);\n                }\n            });\n        }\n\n        return fields;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/models/form-definition.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class NodeMetadata {\n    metadata: any;\n    nodeType: string;\n\n    constructor(metadata: any, nodeType: string) {\n        this.metadata = metadata;\n        this.nodeType = nodeType;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/models/node-metadata.model.ts","module.exports = \"<alfresco-datatable *ngIf=\\\"!isEmpty()\\\"\\n    [rows]=\\\"forms\\\">\\n    <data-columns>\\n        <data-column key=\\\"name\\\" type=\\\"text\\\" title=\\\"Name\\\" class=\\\"ellipsis-cell\\\" [sortable]=\\\"true\\\"></data-column>\\n        <data-column key=\\\"lastUpdatedByFullName\\\" type=\\\"text\\\" title=\\\"User\\\" class=\\\"ellipsis-cell\\\" [sortable]=\\\"true\\\"></data-column>\\n        <data-column key=\\\"lastUpdated\\\" type=\\\"date\\\" format=\\\"shortDate\\\" title=\\\"Date\\\"></data-column>\\n    </data-columns>\\n</alfresco-datatable>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/form-list.component.html\n// module id = 544\n// module chunks = 2","module.exports = \"<div *ngIf=\\\"!hasForm()\\\">\\n    <ng-content select=\\\"[empty-form]\\\">\\n    </ng-content>\\n</div>\\n<div *ngIf=\\\"hasForm()\\\" class=\\\"{{form.className}}\\\">\\n    <md-card>\\n        <md-card-header>\\n            <md-card-title>\\n                <h4 *ngIf=\\\"isTitleEnabled()\\\">\\n                    <div *ngIf=\\\"showRefreshButton\\\" class=\\\"adf-form-reload-button\\\">\\n                        <button md-icon-button (click)=\\\"onRefreshClicked()\\\">\\n                            <md-icon>refresh</md-icon>\\n                        </button>\\n                    </div>\\n                    <md-icon>{{ form.isValid ? 'event_available' : 'event_busy' }}</md-icon>\\n                    <span>{{form.taskName}}</span>\\n\\n                </h4>\\n            </md-card-title>\\n        </md-card-header>\\n        <md-card-content>\\n            <div *ngIf=\\\"form.hasTabs()\\\">\\n                <tabs-widget [tabs]=\\\"form.tabs\\\" (formTabChanged)=\\\"checkVisibility($event);\\\"></tabs-widget>\\n            </div>\\n\\n            <div *ngIf=\\\"!form.hasTabs() && form.hasFields()\\\">\\n                <div *ngFor=\\\"let field of form.fields\\\">\\n                    <form-field [field]=\\\"field.field\\\"></form-field>\\n                </div>\\n            </div>\\n        </md-card-content>\\n        <md-card-actions *ngIf=\\\"form.hasOutcomes()\\\">\\n            <!--[class.mdl-button--colored]=\\\"!outcome.isSystem\\\"-->\\n            <button *ngFor=\\\"let outcome of form.outcomes\\\"\\n                    md-button\\n                    [disabled]=\\\"!isOutcomeButtonEnabled(outcome)\\\"\\n                    [class.adf-form-hide-button]=\\\"!isOutcomeButtonVisible(outcome, form.readOnly)\\\"\\n                    (click)=\\\"onOutcomeClicked(outcome, $event)\\\">\\n                {{outcome.name | uppercase}}\\n            </button>\\n        </md-card-actions>\\n    </md-card>\\n</div>\\n<!--\\nFor debugging and data visualisation purposes,\\nwill be removed during future revisions\\n-->\\n<div *ngIf=\\\"showDebugButton\\\" class=\\\"adf-form-debug-container\\\">\\n    <md-slide-toggle [(ngModel)]=\\\"debugMode\\\">Debug mode</md-slide-toggle>\\n    <div *ngIf=\\\"debugMode && hasForm()\\\">\\n        <h4>Values</h4>\\n        <pre>{{form.values | json}}</pre>\\n\\n        <h4>Form</h4>\\n        <pre>{{form.json | json}}</pre>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/form.component.html\n// module id = 545\n// module chunks = 2","module.exports = \"<div *ngIf=\\\"hasForm()\\\">\\n    <md-card>\\n        <md-card-header>\\n            <md-card-title>\\n                <md-icon>{{ form.isValid ? 'event_available' : 'event_busy' }}</md-icon>\\n                <h2 *ngIf=\\\"isTitleEnabled()\\\" class=\\\"mdl-card__title-text\\\">{{form.taskName}}</h2>\\n            </md-card-title>\\n        </md-card-header>\\n        <md-card-content>\\n            <div *ngIf=\\\"form.hasTabs()\\\">\\n                <tabs-widget [tabs]=\\\"form.tabs\\\" (formTabChanged)=\\\"checkVisibility($event);\\\"></tabs-widget>\\n            </div>\\n\\n            <div *ngIf=\\\"!form.hasTabs() && form.hasFields()\\\">\\n                <div *ngFor=\\\"let field of form.fields\\\">\\n                    <form-field [field]=\\\"field.field\\\"></form-field>\\n                </div>\\n            </div>\\n        </md-card-content>\\n        <md-card-content *ngIf=\\\"showOutcomeButtons && form.hasOutcomes()\\\" #outcomesContainer>\\n            <button *ngFor=\\\"let outcome of form.outcomes\\\"\\n                    md-button\\n                    [disabled]=\\\"!isOutcomeButtonEnabled(outcome)\\\"\\n                    [class.mdl-button--colored]=\\\"!outcome.isSystem\\\"\\n                    [class.adf-form-hide-button]=\\\"!isOutcomeButtonVisible(outcome, form.readOnly)\\\"\\n                    (click)=\\\"onOutcomeClicked(outcome, $event)\\\">\\n                {{outcome.name}}\\n            </button>\\n        </md-card-content>\\n        <md-card-actions *ngIf=\\\"showRefreshButton\\\">\\n            <button md-button\\n                    (click)=\\\"onRefreshClicked()\\\">\\n                <md-icon>refresh</md-icon>\\n            </button>\\n        </md-card-actions>\\n    </md-card>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/start-form.component.html\n// module id = 546\n// module chunks = 2","module.exports = \"<div class=\\\"adf-amount-widget__container adf-amount-widget {{field.className}}\\\" [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <md-input-container floatPlaceholder=\\\"never\\\" class=\\\"adf-amount-widget__input\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <span mdPrefix class=\\\"adf-amount-widget__prefix-spacing\\\"> {{currency }}</span>\\n        <input mdInput\\n                class=\\\"adf-amount-widget\\\"\\n                type=\\\"text\\\"\\n                [id]=\\\"field.id\\\"\\n                [required]=\\\"isRequired()\\\"\\n                [value]=\\\"field.value\\\"\\n                [(ngModel)]=\\\"field.value\\\"\\n                (ngModelChange)=\\\"checkVisibility(field)\\\"\\n                [disabled]=\\\"field.readOnly\\\"\\n                placeholder=\\\"{{field.placeholder}}\\\">\\n    </md-input-container>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/amount/amount.widget.html\n// module id = 547\n// module chunks = 2","module.exports = \"<div class=\\\"attach-widget {{field.className}}\\\">\\n    <label [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <div>\\n        <span *ngIf=\\\"hasFile()\\\" class=\\\"attach-widget__file mdl-chip\\\"><span class=\\\"mdl-chip__text\\\">{{getLinkedFileName()}}</span></span>\\n        <button #browseFile [disabled]=\\\"field.readOnly\\\" (click)=\\\"showDialog();\\\" class=\\\"mdl-button mdl-jsm-button mdl-js-ripple-effect attach-widget__browser\\\">\\n            <i class=\\\"material-icons\\\">image</i>\\n            Browse {{selectedFolderSiteName}}\\n        </button>\\n        <button *ngIf=\\\"hasFile\\\" [disabled]=\\\"field.readOnly\\\" (click)=\\\"reset(file);\\\" class=\\\"mdl-button mdl-js-button mdl-js-ripple-effect attach-widget__reset\\\">Clear</button>\\n    </div>\\n</div>\\n\\n<dialog class=\\\"mdl-dialog\\\" #dialog>\\n    <h4 class=\\\"mdl-dialog__title\\\">Select content</h4>\\n    <div class=\\\"mdl-dialog__content\\\">\\n        <ul class='mdl-list'>\\n            <li class=\\\"mdl-list__item\\\" *ngFor=\\\"let node of selectedFolderNodes\\\">\\n            <span class=\\\"mdl-list__item-primary-content\\\" *ngIf=\\\"node.folder\\\">\\n            <i class=\\\"material-icons mdl-list__item-icon\\\">folder</i>\\n            <a (click)=\\\"selectFolder(node, $event)\\\">{{node.title}}</a>\\n            </span>\\n            <span class=\\\"mdl-list__item-primary-content\\\" *ngIf=\\\"!node.folder\\\">\\n            <i class=\\\"material-icons mdl-list__item-icon\\\">description</i>\\n            <a (click)=\\\"selectFile(node, $event)\\\">{{node.title}}</a>\\n            </span>\\n            </li>\\n        </ul>\\n    </div>\\n    <div class=\\\"mdl-dialog__actions\\\">\\n        <button type=\\\"button\\\" (click)=\\\"cancel()\\\" class=\\\"mdl-button close\\\">Cancel</button>\\n    </div>\\n</dialog>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/attach/attach.widget.html\n// module id = 548\n// module chunks = 2","module.exports = \"<div [ngClass]=\\\"field.className\\\">\\n    <md-checkbox\\n        [id]=\\\"field.id\\\"\\n        color=\\\"primary\\\"\\n        [required]=\\\"field.required\\\"\\n        [disabled]=\\\"field.readOnly || readOnly\\\"\\n        [(ngModel)]=\\\"field.value\\\"\\n        (change)=\\\"onChange()\\\">\\n        {{field.name}}\\n        <span *ngIf=\\\"field.required\\\">*</span>\\n    </md-checkbox>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/checkbox/checkbox.widget.html\n// module id = 549\n// module chunks = 2","module.exports = \"<div [ngClass]=\\\"{'hidden':!(content?.isGroup() && content?.isVisible)}\\\" class=\\\"container-widget__header\\\">\\n    <h4 class=\\\"container-widget__header-text\\\" id=\\\"container-header\\\"\\n        [class.collapsible]=\\\"content?.isCollapsible()\\\">\\n        <button *ngIf=\\\"content?.isCollapsible()\\\"\\n                md-icon-button\\n                class=\\\"mdl-button--icon\\\"\\n                (click)=\\\"onExpanderClicked()\\\">\\n            <md-icon>{{ content?.isExpanded ? 'expand_less' : 'expand_more' }}</md-icon>\\n        </button>\\n        <span (click)=\\\"onExpanderClicked()\\\" id=\\\"container-header-label\\\">{{content.name}}</span>\\n    </h4>\\n</div>\\n\\n<section class=\\\"grid-list\\\" [ngClass]=\\\"{'hidden':!(content?.isVisible && content?.isExpanded)}\\\">\\n    <div class=\\\"grid-list-item\\\" *ngFor=\\\"let field of fields\\\" [style.width]=\\\"getColumnWith(field)\\\">\\n        <form-field *ngIf=\\\"field\\\" [field]=\\\"field\\\"></form-field>\\n    </div>\\n</section>\\n\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/container/container.widget.html\n// module id = 550\n// module chunks = 2","module.exports = \"<md-card class=\\\"example-card\\\" class=\\\"adf-content-container\\\" *ngIf=\\\"content\\\">\\n    <md-card-content *ngIf=\\\"showDocumentContent\\\">\\n        <div *ngIf=\\\"content.isThumbnailSupported()\\\" >\\n            <img id=\\\"thumbnailPreview\\\" class=\\\"adf-img-upload-widget\\\" [src]=\\\"content.thumbnailUrl\\\" alt=\\\"{{content.name}}\\\">\\n        </div>\\n        <div *ngIf=\\\"!content.isThumbnailSupported()\\\">\\n            <i class=\\\"material-icons\\\">image</i>\\n            <div id=\\\"unsupported-thumbnail\\\" class=\\\"adf-content-widget-preview-text\\\">{{ 'FORM.PREVIEW.IMAGE_NOT_AVAILABLE' | translate }}\\n            </div>\\n        </div>\\n        <div class=\\\"mdl-card__supporting-text upload-widget__content-text\\\">{{content.name}}</div>\\n    </md-card-content>\\n\\n    <md-card-actions>\\n        <button md-icon-button id=\\\"view\\\" (click)=\\\"openViewer(content)\\\">\\n            <md-icon class=\\\"md-24\\\">zoom_in</md-icon>\\n        </button>\\n        <button md-icon-button id=\\\"download\\\" (click)=\\\"download(content)\\\">\\n            <md-icon class=\\\"md-24\\\">file_download</md-icon>\\n        </button>\\n    </md-card-actions>\\n</md-card>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/content/content.widget.html\n// module id = 551\n// module chunks = 2","module.exports = \"<div class=\\\"{{field.className}}\\\" *ngIf=\\\"field?.isVisible\\\" id=\\\"data-widget\\\" [class.adf-invalid]=\\\"!field.isValid || field.validationSummary\\\">\\n    <md-input-container class=\\\"adf-date-widget\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}} ({{field.dateDisplayFormat}})<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input mdInput\\n               [id]=\\\"field.id\\\"\\n               [mdDatepicker]=\\\"datePicker\\\"\\n               [(value)]=\\\"field.value\\\"\\n               [required]=\\\"isRequired()\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               [min]=\\\"minDate\\\"\\n               [max]=\\\"maxDate\\\"\\n               (focusout)=\\\"onDateChanged($event.srcElement.value)\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n        <button class=\\\"adf-date-widget-button\\\" mdSuffix [mdDatepickerToggle]=\\\"datePicker\\\"  [disabled]=\\\"field.readOnly\\\"></button>\\n    </md-input-container>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n    <md-datepicker #datePicker [touchUi]=\\\"true\\\" [startAt]=\\\"startAt\\\" (selectedChanged)=\\\"onDateChanged($event)\\\"></md-datepicker>\\n</div>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/date/date.widget.html\n// module id = 552\n// module chunks = 2","module.exports = \"<div class=\\\"adf-display-text-widget {{field.className}}\\\">\\n    <span>{{field.value}}</span>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.html\n// module id = 553\n// module chunks = 2","module.exports = \"<div class=\\\"adf-dropdown-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\" *ngIf=\\\"field?.isVisible\\\">\\n    <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <md-select class=\\\"adf-select\\\"\\n            [id]=\\\"field.id\\\"\\n            [(ngModel)]=\\\"field.value\\\"\\n            [disabled]=\\\"field.readOnly\\\"\\n            (ngModelChange)=\\\"checkVisibility(field)\\\">\\n        <md-option *ngFor=\\\"let opt of field.options\\\"\\n                   [value]=\\\"getOptionValue(opt, field.value)\\\"\\n                   [id]=\\\"opt.id\\\">{{opt.name}}</md-option>\\n    </md-select>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget class=\\\"adf-dropdown-required-message\\\" *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.html\n// module id = 554\n// module chunks = 2","module.exports = \"<div class=\\\"{{field.className}}\\\"\\n    [class.adf-invalid]=\\\"!isValid()\\\" *ngIf=\\\"field?.isVisible\\\">\\n    <div class=\\\"adf-label\\\">{{content.name}}<span *ngIf=\\\"isRequired()\\\">*</span></div>\\n\\n    <div *ngIf=\\\"!editMode\\\">\\n        <div class=\\\"adf-table-container\\\">\\n            <table class=\\\"full-width adf-dynamic-table\\\" id=\\\"dynamic-table-{{content.id}}\\\">\\n                <thead>\\n                    <tr>\\n                        <th *ngFor=\\\"let column of content.visibleColumns\\\">\\n                            {{column.name}}\\n                        </th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr *ngFor=\\\"let row of content.rows; let idx = index\\\" tabindex=\\\"0\\\" id=\\\"{{content.id}}-row-{{idx}}\\\"\\n                        [class.adf-dynamic-table-widget__row-selected]=\\\"row.selected\\\" (keyup)=\\\"onKeyPressed($event, row)\\\">\\n                        <td *ngFor=\\\"let column of content.visibleColumns\\\"\\n                            (click)=\\\"onRowClicked(row)\\\">\\n                            {{ getCellValue(row, column) }}\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n\\n        <div *ngIf=\\\"!readOnly\\\">\\n            <button md-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"moveSelectionUp()\\\">\\n                <i class=\\\"material-icons\\\">arrow_upward</i>\\n            </button>\\n            <button md-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"moveSelectionDown()\\\">\\n                <i class=\\\"material-icons\\\">arrow_downward</i>\\n            </button>\\n            <button md-button\\n                    [disabled]=\\\"field.readOnly\\\"\\n                    id=\\\"{{content.id}}-add-row\\\"\\n                    (click)=\\\"addNewRow()\\\">\\n                <i class=\\\"material-icons\\\">add_circle_outline</i>\\n            </button>\\n            <button md-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"deleteSelection()\\\">\\n                <i class=\\\"material-icons\\\">remove_circle_outline</i>\\n            </button>\\n            <button md-button\\n                    [disabled]=\\\"!hasSelection()\\\"\\n                    (click)=\\\"editSelection()\\\">\\n                <i class=\\\"material-icons\\\">edit</i>\\n            </button>\\n        </div>\\n     </div>\\n\\n     <row-editor *ngIf=\\\"editMode\\\"\\n        [table]=\\\"content\\\"\\n        [row]=\\\"editRow\\\"\\n        [column]=\\\"column\\\"\\n        (save)=\\\"onSaveChanges()\\\"\\n        (cancel)=\\\"onCancelChanges()\\\">\\n     </row-editor>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.html\n// module id = 555\n// module chunks = 2","module.exports = \" <label [attr.for]=\\\"column.id\\\">\\n    <md-checkbox\\n        color=\\\"primary\\\"\\n        [id]=\\\"column.id\\\"\\n        [checked]=\\\"table.getCellValue(row, column)\\\"\\n        [required]=\\\"column.required\\\"\\n        [disabled]=\\\"!column.editable\\\"\\n        (change)=\\\"onValueChanged(row, column, $event)\\\">\\n    <span class=\\\"adf-checkbox-label\\\">{{column.name}}</span>\\n    </md-checkbox>\\n</label>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.html\n// module id = 556\n// module chunks = 2","module.exports = \"<div>\\n    <md-input-container class=\\\"adf-date-editor\\\">\\n        <label [attr.for]=\\\"column.id\\\">{{column.name}} (d-M-yyyy)</label>\\n        <input mdInput\\n            id=\\\"dateInput\\\"\\n            type=\\\"text\\\"\\n            [mdDatepicker]=\\\"datePicker\\\"\\n            [value]=\\\"value\\\"\\n            [id]=\\\"column.id\\\"\\n            [required]=\\\"column.required\\\"\\n            [disabled]=\\\"!column.editable\\\"\\n           (focusout)=\\\"onDateChanged($event.srcElement.value)\\\">\\n            <button mdSuffix *ngIf=\\\"column.editable\\\"\\n            [mdDatepickerToggle]=\\\"datePicker\\\" class=\\\"adf-date-editor-button\\\"></button>\\n    </md-input-container>\\n    <md-datepicker #datePicker (selectedChanged)=\\\"onDateChanged($event)\\\" [touchUi]=\\\"true\\\"></md-datepicker>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.html\n// module id = 557\n// module chunks = 2","module.exports = \"<div class=\\\"dropdown-editor\\\">\\n    <label [attr.for]=\\\"column.id\\\">{{column.name}}</label>\\n    <md-select\\n        floatPlaceholder=\\\"never\\\"\\n        class=\\\"adf-dropdown-editor-select\\\"\\n        [id]=\\\"column.id\\\"\\n        [(ngModel)]=\\\"value\\\"\\n        [required]=\\\"column.required\\\"\\n        [disabled]=\\\"!column.editable\\\"\\n        (change)=\\\"onValueChanged(row, column, $event)\\\">\\n        <md-option></md-option>\\n        <md-option *ngFor=\\\"let opt of options\\\" [value]=\\\"opt.name\\\" [id]=\\\"opt.id\\\">{{opt.name}}</md-option>\\n    </md-select>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.html\n// module id = 558\n// module chunks = 2","module.exports = \"<div class=\\\"row-editor mdl-shadow--2dp\\\"\\n    [class.row-editor__invalid]=\\\"!validationSummary.isValid\\\">\\n    <div class=\\\"mdl-grid\\\" *ngFor=\\\"let column of table.columns\\\">\\n        <div class=\\\"mdl-cell mdl-cell--6-col\\\" [ngSwitch]=\\\"column.type\\\">\\n            <div *ngSwitchCase=\\\"'Dropdown'\\\">\\n                <adf-dropdown-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-dropdown-editor>\\n                </div>\\n                <div *ngSwitchCase=\\\"'Date'\\\">\\n                    <adf-date-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-date-editor>\\n                </div>\\n\\n                <div *ngSwitchCase=\\\"'Boolean'\\\">\\n                <adf-boolean-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-boolean-editor>\\n                </div>\\n                <div *ngSwitchDefault>\\n                <adf-text-editor\\n                    [table]=\\\"table\\\"\\n                    [row]=\\\"row\\\"\\n                    [column]=\\\"column\\\">\\n                </adf-text-editor>\\n            </div>\\n        </div>\\n    </div>\\n    <error-widget [error]=\\\"validationSummary.text\\\"></error-widget>\\n    <div>\\n        <button md-button (click)=\\\"onCancelChanges()\\\">Cancel</button>\\n        <button md-button (click)=\\\"onSaveChanges()\\\">Save</button>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/row.editor.html\n// module id = 559\n// module chunks = 2","module.exports = \"<div class=\\\"adf-text-editor\\\">\\n    <md-input-container>\\n    <label [attr.for]=\\\"column.id\\\">{{displayName}}</label>\\n    <input mdInput\\n        type=\\\"text\\\"\\n        [value]=\\\"table.getCellValue(row, column)\\\"\\n        (keyup)=\\\"onValueChanged(row, column, $event)\\\"\\n        [required]=\\\"column.required\\\"\\n        [disabled]=\\\"!column.editable\\\"\\n        [id]=\\\"column.id\\\">\\n    </md-input-container>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.html\n// module id = 560\n// module chunks = 2","module.exports = \"<div class=\\\"adf-error-text-container\\\">\\n    <div *ngIf=\\\"error\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n        <div class=\\\"adf-error-text\\\">{{error}}</div>\\n        <i class=\\\"material-icons adf-error-icon\\\">warning</i>\\n    </div>\\n    <div *ngIf=\\\"required\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n            <div class=\\\"adf-error-text\\\">{{required}}</div>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/error/error.component.html\n// module id = 561\n// module chunks = 2","module.exports = \"<div class=\\\"adf-group-widget {{field.className}}\\\"\\n     [class.is-dirty]=\\\"value\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\" id=\\\"functional-group-div\\\" *ngIf=\\\"field.isVisible\\\">\\n    <md-input-container>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input mdInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               [id]=\\\"field.id\\\"\\n               [(ngModel)]=\\\"value\\\"\\n               (ngModelChange)=\\\"checkVisibility(field)\\\"\\n               (keyup)=\\\"onKeyUp($event)\\\"\\n               (blur)=\\\"onBlur()\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n    </md-input-container>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n<div class=\\\"adf-group-autocomplete mat-elevation-z2\\\" *ngIf=\\\"popupVisible\\\">\\n    <md-option *ngFor=\\\"let item of groups\\\"\\n               [id]=\\\"field.id +'-'+item.id\\\"\\n               (click)=\\\"onItemClick(item, $event)\\\">\\n        <span>{{item.name}}</span>\\n    </md-option>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.html\n// module id = 562\n// module chunks = 2","module.exports = \"<div class=\\\"adf-hyperlink-widget {{field.className}}\\\">\\n    <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <div>\\n        <a [href]=\\\"linkUrl\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">{{linkText}}</a>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.html\n// module id = 563\n// module chunks = 2","module.exports = \"<div class=\\\"adf-multiline-text-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <md-input-container floatPlaceholder=\\\"never\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <textarea mdInput class=\\\"adf-input\\\"\\n                  md-autosize\\n                  type=\\\"text\\\"\\n                  rows=\\\"3\\\"\\n                  [maxlength]=\\\"field.maxLength\\\"\\n                  [id]=\\\"field.id\\\"\\n                  [required]=\\\"isRequired()\\\"\\n                  [(ngModel)]=\\\"field.value\\\"\\n                  (ngModelChange)=\\\"checkVisibility(field)\\\"\\n                  [disabled]=\\\"field.readOnly || readOnly\\\"\\n                  placeholder=\\\"{{field.placeholder}}\\\">\\n        </textarea>\\n    </md-input-container>\\n    <div *ngIf=\\\"field.maxLength > 0\\\" class=\\\"adf-multiline-word-counter\\\">\\n        <span>{{field?.value?.length || 0}}/{{field.maxLength}}</span>\\n    </div>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget class=\\\"adf-multiline-required-message\\\" *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.html\n// module id = 564\n// module chunks = 2","module.exports = \"<div class=\\\"adf-textfield adf-number-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <md-input-container>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input mdInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               pattern=\\\"-?[0-9]*(\\\\.[0-9]+)?\\\"\\n               [id]=\\\"field.id\\\"\\n               [required]=\\\"isRequired()\\\"\\n               [value]=\\\"field.value\\\"\\n               [(ngModel)]=\\\"field.value\\\"\\n               (ngModelChange)=\\\"checkVisibility(field)\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n    </md-input-container>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/number/number.widget.html\n// module id = 565\n// module chunks = 2","module.exports = \"<div class=\\\"adf-people-widget {{field.className}}\\\"\\n     [class.is-dirty]=\\\"value\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\"\\n     [class.adf-readonly]=\\\"field.readOnly\\\"\\n     id=\\\"people-widget-content\\\"\\n     *ngIf=\\\"field.isVisible\\\">\\n    <md-input-container>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input #inputValue\\n               mdInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               [id]=\\\"field.id\\\"\\n               [(ngModel)]=\\\"value\\\"\\n               (ngModelChange)=\\\"checkVisibility(field)\\\"\\n               (keyup)=\\\"onKeyUp($event)\\\"\\n               [disabled]=\\\"field.readOnly\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n    </md-input-container>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n<div class=\\\"adf-people-autocomplete mat-elevation-z2\\\" [hidden]=\\\"!popupVisible || users.length === 0\\\">\\n    <md-option *ngFor=\\\"let user of users\\\"\\n               [id]=\\\"field.id +'-'+user.id\\\"\\n               (click)=\\\"onItemClick(user, $event)\\\">\\n        <div class=\\\"adf-people-widget-row\\\">\\n            <div *ngIf=\\\"!user.userImage\\\" class=\\\"adf-people-widget-pic\\\">\\n                {{user.firstName[0]}} {{user.lastName[0]}}\\n            </div>\\n            <div *ngIf=\\\"user.userImage\\\" class=\\\"adf-people-widget-image-row\\\">\\n                <img class=\\\"adf-people-widget-image\\\"\\n                    [src]=\\\"user.userImage\\\"\\n                    (error)=\\\"onErrorImageLoad(user)\\\"/>\\n            </div>\\n            <span class=\\\"adf-people-label-name\\\">{{getDisplayName(user)}}</span>\\n        </div>\\n    </md-option>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/people/people.widget.html\n// module id = 566\n// module chunks = 2","module.exports = \"<div class=\\\"adf-radio-buttons-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\" [id]=\\\"field.id\\\" *ngIf=\\\"field?.isVisible\\\">\\n    <div class=\\\"adf-radio-button-container\\\">\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <md-radio-group class=\\\"adf-radio-group\\\" [(ngModel)]=\\\"field.value\\\">\\n            <md-radio-button\\n                [id]=\\\"field.id + '-' + opt.id\\\"\\n                [name]=\\\"field.id\\\"\\n                [value]=\\\"opt.id\\\"\\n                [disabled]=\\\"field.readOnly\\\"\\n                [checked]=\\\"field.value === opt.id\\\"\\n                (change)=\\\"onOptionClick(opt.id)\\\"\\n                color=\\\"primary\\\"\\n                class=\\\"adf-radio-button\\\" *ngFor=\\\"let opt of field.options\\\" >\\n                {{opt.name}}\\n            </md-radio-button>\\n        </md-radio-group>\\n    </div>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.html\n// module id = 567\n// module chunks = 2","module.exports = \"<div *ngIf=\\\"hasTabs()\\\" class=\\\"alfresco-tabs-widget\\\">\\n    <md-tab-group>\\n        <md-tab *ngFor=\\\"let tab of visibleTabs\\\" [label]=\\\"tab.title\\\">\\n            <div *ngFor=\\\"let field of tab.fields\\\">\\n                <form-field [field]=\\\"field.field\\\"></form-field>\\n             </div>\\n        </md-tab>\\n    </md-tab-group>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/tabs/tabs.widget.html\n// module id = 568\n// module chunks = 2","module.exports = \"<div class=\\\"adf-textfield adf-text-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\" [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <md-input-container>\\n        <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n        <input mdInput\\n               class=\\\"adf-input\\\"\\n               type=\\\"text\\\"\\n               [id]=\\\"field.id\\\"\\n               [required]=\\\"isRequired()\\\"\\n               [value]=\\\"field.value\\\"\\n               [(ngModel)]=\\\"field.value\\\"\\n               (ngModelChange)=\\\"onFieldChanged(field)\\\"\\n               [disabled]=\\\"field.readOnly || readOnly\\\"\\n               [textMask]=\\\"{mask: mask, isReversed: isMaskReversed}\\\"\\n               placeholder=\\\"{{field.placeholder}}\\\">\\n    </md-input-container>\\n    <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/text/text.widget.html\n// module id = 569\n// module chunks = 2","module.exports = \"<div class=\\\"adf-typeahead-widget-container\\\">\\n    <div class=\\\"adf-typeahead-widget {{field.className}}\\\"\\n        [class.is-dirty]=\\\"value\\\"\\n        [class.adf-invalid]=\\\"!field.isValid\\\"\\n        [class.adf-readonly]=\\\"field.readOnly\\\"\\n        id=\\\"typehead-div\\\" *ngIf=\\\"field.isVisible\\\">\\n        <md-input-container>\\n            <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\">{{field.name}}</label>\\n            <input mdInput class=\\\"adf-input\\\"\\n                   type=\\\"text\\\"\\n                   [id]=\\\"field.id\\\"\\n                   [(ngModel)]=\\\"value\\\"\\n                   (keyup)=\\\"onKeyUp($event)\\\"\\n                   (blur)=\\\"onBlur()\\\"\\n                   [disabled]=\\\"field.readOnly\\\"\\n                   placeholder=\\\"{{field.placeholder}}\\\">\\n        </md-input-container>\\n        <error-widget [error]=\\\"field.validationSummary\\\"></error-widget>\\n        <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n    </div>\\n    <div class=\\\"adf-typeahead-autocomplete mat-elevation-z2\\\" [hidden]=\\\"options.length <= 0 || !popupVisible\\\">\\n        <md-option *ngFor=\\\"let item of options\\\" (click)=\\\"onItemClick(item, $event)\\\">\\n            <span>{{item.name}}</span>\\n        </md-option>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.html\n// module id = 570\n// module chunks = 2","module.exports = \"<div class=\\\"adf-upload-widget {{field.className}}\\\"\\n     [class.adf-invalid]=\\\"!field.isValid\\\"\\n     [class.adf-readonly]=\\\"field.readOnly\\\">\\n    <label class=\\\"adf-label\\\" [attr.for]=\\\"field.id\\\" >{{field.name}}<span *ngIf=\\\"isRequired()\\\">*</span></label>\\n    <div class=\\\"adf-upload-widget-container\\\">\\n        <div>\\n            <md-list *ngIf=\\\"hasFile\\\">\\n                <md-list-item class=\\\"adf-upload-files-row\\\" *ngFor=\\\"let file of field.value\\\">\\n                    <img md-list-icon class=\\\"adf-upload-widget__icon\\\"\\n                            [id]=\\\"'file-'+file.id+'-icon'\\\"\\n                            [src]=\\\"getIcon(file.mimeType)\\\"\\n                            [alt]=\\\"mimeTypeIcon\\\"\\n                            (click)=\\\"fileClicked(file)\\\"/>\\n                    <span md-line id=\\\"{{'file-'+file.id}}\\\" class=\\\"adf-file\\\">{{decode(file.name)}}</span>\\n                    <button *ngIf=\\\"!field.readOnly\\\" md-icon-button [id]=\\\"'file-'+file.id+'-remove'\\\" (click)=\\\"reset(file);\\\" (keyup.enter)=\\\"reset(file);\\\">\\n                        <md-icon class=\\\"md-24\\\">highlight_off</md-icon>\\n                    </button>\\n                </md-list-item>\\n            </md-list>\\n        </div>\\n        <input *ngIf=\\\"!hasFile\\\"\\n               #file\\n               type=\\\"file\\\"\\n               [multiple]=\\\"multipleOption\\\"\\n               [id]=\\\"field.id\\\"\\n               [disabled]=\\\"field.readOnly || readonly\\\"\\n               class=\\\"adf-file\\\"\\n               (change)=\\\"onFileChanged($event)\\\">\\n    </div>\\n    <error-widget [error]=\\\"field.validationSummary\\\" ></error-widget>\\n    <error-widget *ngIf=\\\"isInvalidFieldRequired()\\\" required=\\\"{{ 'FORM.FIELD.REQUIRED' | translate }}\\\"></error-widget>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/upload/upload.widget.html\n// module id = 571\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/form-list.component.scss\n// module id = 646\n// module chunks = 2","module.exports = \".adf-form-container {\\n  width: 100%;\\n  min-height: 100px;\\n  overflow: visible; }\\n\\n.adf-form-debug-container {\\n  padding: 10px; }\\n\\n.adf-form-debug-container .debug-toggle-text {\\n  padding-left: 15px;\\n  cursor: pointer; }\\n\\n.adf-form-debug-container .debug-toggle-text:hover {\\n  font-weight: bold; }\\n\\n.adf-form-reload-button {\\n  position: absolute;\\n  right: 0;\\n  top: 0; }\\n\\n.adf-form-hide-button {\\n  display: none; }\\n\\n.adf-task-title {\\n  text-align: center; }\\n\\nform-field {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/form.component.scss\n// module id = 647\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-amount-widget {\\n  width: 100%;\\n  vertical-align: baseline !important; }\\n  .adf-amount-widget .mat-input-element {\\n    margin-left: 11px; }\\n  .adf-amount-widget .mat-input-prefix {\\n    position: absolute;\\n    margin-top: 42px; }\\n\\n.adf-amount-widget__container {\\n  max-width: 100%; }\\n  .adf-amount-widget__container .mat-input-placeholder-wrapper {\\n    top: -6px !important; }\\n  .adf-amount-widget__container .mat-input-placeholder-wrapper {\\n    top: 0 !important;\\n    left: 13px; }\\n\\n.adf-amount-widget__input .mat-focused {\\n  transition: none; }\\n\\n.adf-amount-widget__prefix-spacing {\\n  padding-right: 5px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/amount/amount.widget.scss\n// module id = 648\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/container/container.widget.scss\n// module id = 649\n// module chunks = 2","module.exports = \".adf-img-upload-widget {\\n  width: 100%;\\n  height: 100%;\\n  border: 1px solid rgba(117, 117, 117, 0.57);\\n  box-shadow: 1px 1px 2px #dddddd;\\n  background-color: #ffffff; }\\n\\n.adf-content-widget-preview-text {\\n  word-wrap: break-word;\\n  word-break: break-all;\\n  text-align: center; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/content/content.widget.scss\n// module id = 650\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-date-widget .mat-input-suffix {\\n  position: absolute;\\n  margin-top: 42px;\\n  width: 100%; }\\n\\n.adf-date-widget-button {\\n  position: relative;\\n  float: right; }\\n\\n.adf-date-input {\\n  padding-top: 5px;\\n  padding-bottom: 5px; }\\n\\n.adf-grid-date-widget {\\n  align-items: center;\\n  padding: 0; }\\n\\n.adf-date-widget-button__cell {\\n  margin-top: 0;\\n  margin-bottom: 0; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/date/date.widget.scss\n// module id = 651\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.scss\n// module id = 652\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-dropdown-widget {\\n  width: 100%;\\n  padding-top: 16px; }\\n\\n.adf-select {\\n  width: 100%; }\\n\\n.adf-dropdown-required-message .adf-error-text-container {\\n  margin-top: 1px !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.scss\n// module id = 653\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.scss\n// module id = 654\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-checkbox-label {\\n  position: relative;\\n  cursor: pointer;\\n  font-size: 16px;\\n  line-height: 24px;\\n  margin: 0; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss\n// module id = 655\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-date-editor {\\n  width: 100%; }\\n\\n.adf-date-editor-button {\\n  position: relative;\\n  top: 25px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.scss\n// module id = 656\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-dropdown-editor-select {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss\n// module id = 657\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-text-editor {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.scss\n// module id = 658\n// module chunks = 2","module.exports = \".adf-error-text-container {\\n  margin-top: -14px !important;\\n  width: 50%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/error/error.component.scss\n// module id = 659\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-group-widget {\\n  width: 100%; }\\n\\n.adf-group-autocomplete {\\n  background-color: #fff;\\n  position: inherit;\\n  max-height: 200px;\\n  overflow-y: auto;\\n  z-index: 5;\\n  width: 100%;\\n  color: #555;\\n  margin: -15px 0 0 0; }\\n  .adf-group-autocomplete > md-option {\\n    list-style-type: none;\\n    position: static;\\n    height: auto;\\n    width: auto;\\n    min-width: 124px;\\n    padding: 8px 0;\\n    margin: 0;\\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n    border-radius: 2px; }\\n    .adf-group-autocomplete > md-option > span {\\n      opacity: 1; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.scss\n// module id = 660\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.scss\n// module id = 661\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-multiline-text-widget {\\n  width: 100%; }\\n\\n.adf-multiline-word-counter {\\n  float: right;\\n  margin-top: -20px !important;\\n  min-height: 24px;\\n  min-width: 1px;\\n  font-size: 12px;\\n  line-height: 14px;\\n  overflow: hidden;\\n  transition: all 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\\n  opacity: 1;\\n  margin-top: 0;\\n  padding-top: 5px;\\n  text-align: right;\\n  padding-right: 2px;\\n  padding-left: 0; }\\n\\n.adf-multiline-required-message {\\n  display: flex; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.scss\n// module id = 662\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-number-widget {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/number/number.widget.scss\n// module id = 663\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-people-widget {\\n  width: 100%; }\\n\\n.adf-people-autocomplete {\\n  background-color: #fff;\\n  position: inherit;\\n  max-height: 200px;\\n  width: 100%;\\n  overflow-y: auto;\\n  z-index: 5;\\n  border-radius: 3%;\\n  color: #555;\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12); }\\n  .adf-people-autocomplete > md-option {\\n    list-style-type: none;\\n    position: static;\\n    height: auto;\\n    width: auto;\\n    min-width: 124px;\\n    padding: 8px 0 0 20px;\\n    margin: 0;\\n    border-radius: 2px; }\\n    .adf-people-autocomplete > md-option > span {\\n      opacity: 1; }\\n\\n.adf-people-widget-pic {\\n  background: #ff9800;\\n  display: inline-block;\\n  width: 30px;\\n  padding: 0px 9px;\\n  border-radius: 100px;\\n  color: #fff;\\n  text-align: center;\\n  font-weight: bolder;\\n  font-size: 18px;\\n  font-family: Muli;\\n  text-transform: uppercase;\\n  vertical-align: middle; }\\n\\n.adf-people-widget-row {\\n  padding-bottom: 10px; }\\n\\n.adf-people-widget-image {\\n  border-radius: 100px;\\n  width: 50px;\\n  height: 50px;\\n  vertical-align: middle;\\n  display: inline-block;\\n  padding: 0px 0px; }\\n\\n.adf-people-widget-image-row {\\n  display: inline-block; }\\n\\n.adf-people-label-name {\\n  padding-left: 10px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/people/people.widget.scss\n// module id = 664\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-radio-button-container {\\n  margin-bottom: 15px; }\\n\\n.adf-radio-group {\\n  display: inline-flex;\\n  flex-direction: column; }\\n\\n.adf-radio-button {\\n  margin: 5px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.scss\n// module id = 665\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-text-widget {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/text/text.widget.scss\n// module id = 666\n// module chunks = 2","module.exports = \"/* ANIMATION */\\n/* ANIMATION */\\n/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n */\\n/* Theme for the ripple elements.*/\\n/** The mixins below are shared between md-menu and md-select */\\n/**\\n * This mixin adds the correct panel transform styles based\\n * on the direction that the menu panel opens.\\n */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n/**\\n * This mixin contains shared option styles between the select and\\n * autocomplete components.\\n */\\n.adf-typeahead-widget-container {\\n  position: relative;\\n  display: block; }\\n\\n.adf-typeahead-widget {\\n  width: 100%; }\\n\\n.adf-typeahead-autocomplete {\\n  background-color: #fff;\\n  position: absolute;\\n  max-height: 200px;\\n  width: 100%;\\n  overflow-y: auto;\\n  z-index: 5;\\n  color: #555;\\n  margin: -10px 0 0 0;\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12); }\\n  .adf-typeahead-autocomplete > md-option {\\n    list-style-type: none;\\n    position: static;\\n    height: auto;\\n    width: auto;\\n    min-width: 124px;\\n    padding: 8px 0;\\n    margin: 0;\\n    border-radius: 2px; }\\n    .adf-typeahead-autocomplete > md-option > span {\\n      opacity: 1;\\n      padding-left: 23px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.scss\n// module id = 667\n// module chunks = 2","module.exports = \".adf-unknown-text {\\n  margin-left: 10px;\\n  color: red; }\\n\\n.adf-unknown-widget {\\n  margin: 42px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/unknown/unknown.widget.scss\n// module id = 668\n// module chunks = 2","module.exports = \".adf-upload-widget-container {\\n  margin-bottom: 15px; }\\n\\n.adf-upload-widget {\\n  width: 100%;\\n  word-break: break-all;\\n  padding: 0.4375em 0;\\n  border-top: 0.84375em solid transparent; }\\n\\n.adf-upload-widget__icon {\\n  padding: 6px;\\n  float: left;\\n  cursor: pointer; }\\n\\n.adf-adf-file {\\n  float: left;\\n  margin-top: 4px; }\\n\\n.adf-upload-widget__reset {\\n  margin-top: -2px; }\\n\\n.adf-upload-files-row .mat-line {\\n  margin-bottom: 0px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-form/src/components/widgets/upload/upload.widget.scss\n// module id = 669\n// module chunks = 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { FormModel } from './form.model';\n\nexport abstract class FormWidgetModel {\n\n    readonly fieldType: string;\n    readonly id: string;\n    readonly name: string;\n    readonly type: string;\n    readonly tab: string;\n\n    readonly form: FormModel;\n    readonly json: any;\n\n    constructor(form: FormModel, json: any) {\n        this.form = form;\n        this.json = json;\n\n        if (json) {\n            this.fieldType = json.fieldType;\n            this.id = json.id;\n            this.name = json.name;\n            this.type = json.type;\n            this.tab = json.tab;\n        }\n    }\n}\n\nexport interface FormWidgetModelCache<T extends FormWidgetModel> {\n    [key: string]: T;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-widget.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nexport * from './form-field-metadata';\nexport * from './form-values';\nexport * from './form-field-types';\nexport * from './form-field-option';\nexport * from './form-field-templates';\nexport * from './form-widget.model';\nexport * from './form-field.model';\nexport * from './form.model';\nexport * from './container.model';\nexport * from './container-column.model';\nexport * from './tab.model';\nexport * from './form-outcome.model';\nexport * from './form-outcome-event.model';\nexport * from './form-field-validator';\nexport * from './content-link.model';\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport * as moment from 'moment';\nimport { FormFieldModel } from './../core/form-field.model';\nimport { FormWidgetModel } from './../core/form-widget.model';\n\nexport class DynamicTableModel extends FormWidgetModel {\n\n    field: FormFieldModel;\n    columns: DynamicTableColumn[] = [];\n    visibleColumns: DynamicTableColumn[] = [];\n    rows: DynamicTableRow[] = [];\n\n    private _selectedRow: DynamicTableRow;\n    private _validators: CellValidator[] = [];\n\n    get selectedRow(): DynamicTableRow {\n        return this._selectedRow;\n    }\n\n    set selectedRow(value: DynamicTableRow) {\n        if (this._selectedRow && this._selectedRow === value) {\n            this._selectedRow.selected = false;\n            this._selectedRow = null;\n            return;\n        }\n\n        this.rows.forEach(row => row.selected = false);\n\n        this._selectedRow = value;\n\n        if (value) {\n            this._selectedRow.selected = true;\n        }\n    }\n\n    constructor(field: FormFieldModel) {\n        super(field.form, field.json);\n        this.field = field;\n\n        if (field.json) {\n            const columns = this.getColumns(field);\n            if (columns) {\n                this.columns = columns;\n                this.visibleColumns = this.columns.filter(col => col.visible);\n            }\n\n            if (field.json.value) {\n                this.rows = field.json.value.map(obj => <DynamicTableRow> {selected: false, value: obj});\n            }\n        }\n\n        this._validators = [\n            new RequiredCellValidator(),\n            new DateCellValidator(),\n            new NumberCellValidator()\n        ];\n    }\n\n    private getColumns(field: FormFieldModel): DynamicTableColumn[] {\n        if (field && field.json) {\n            let definitions = field.json.columnDefinitions;\n            if (!definitions && field.json.params && field.json.params.field) {\n                definitions = field.json.params.field.columnDefinitions;\n            }\n\n            if (definitions) {\n                return definitions.map(obj => <DynamicTableColumn> obj);\n            }\n        }\n        return null;\n    }\n\n    flushValue() {\n        if (this.field) {\n            this.field.value = this.rows.map(r => r.value);\n            this.field.updateForm();\n        }\n    }\n\n    moveRow(row: DynamicTableRow, offset: number) {\n        let oldIndex = this.rows.indexOf(row);\n        if (oldIndex > -1) {\n            let newIndex = (oldIndex + offset);\n\n            if (newIndex < 0) {\n                newIndex = 0;\n            } else if (newIndex >= this.rows.length) {\n                newIndex = this.rows.length;\n            }\n\n            let arr = this.rows.slice();\n            arr.splice(oldIndex, 1);\n            arr.splice(newIndex, 0, row);\n            this.rows = arr;\n\n            this.flushValue();\n        }\n    }\n\n    deleteRow(row: DynamicTableRow) {\n        if (row) {\n            if (this.selectedRow === row) {\n                this.selectedRow = null;\n            }\n            let idx = this.rows.indexOf(row);\n            if (idx > -1) {\n                this.rows.splice(idx, 1);\n                this.flushValue();\n            }\n        }\n    }\n\n    addRow(row: DynamicTableRow) {\n        if (row) {\n            this.rows.push(row);\n            // this.selectedRow = row;\n        }\n    }\n\n    validateRow(row: DynamicTableRow): DynamicRowValidationSummary {\n        let summary = <DynamicRowValidationSummary> {\n            isValid: true,\n            text: null\n        };\n\n        if (row) {\n            for (let col of this.columns) {\n                for (let validator of this._validators) {\n                    if (!validator.validate(row, col, summary)) {\n                        return summary;\n                    }\n                }\n            }\n        }\n\n        return summary;\n    }\n\n    getCellValue(row: DynamicTableRow, column: DynamicTableColumn): any {\n        let result = row.value[column.id];\n\n        if (column.type === 'Dropdown') {\n            if (result) {\n                return result.name;\n            }\n        }\n\n        if (column.type === 'Boolean') {\n            return result ? true : false;\n        }\n\n        if (column.type === 'Date') {\n            if (result) {\n                return moment(result.split('T')[0], 'YYYY-MM-DD').format('DD-MM-YYYY');\n            }\n        }\n\n        return result || '';\n    }\n\n    getDisplayText(column: DynamicTableColumn): string {\n        let result = column.name;\n        if (column.type === 'Amount') {\n            let currency = column.amountCurrency || '$';\n            result = `${column.name} (${currency})`;\n        }\n        return result;\n    }\n}\n\nexport interface DynamicRowValidationSummary {\n\n    isValid: boolean;\n    text: string;\n\n}\n\nexport interface CellValidator {\n\n    isSupported(column: DynamicTableColumn): boolean;\n    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean;\n\n}\n\nexport class RequiredCellValidator implements CellValidator {\n\n    private supportedTypes: string[] = [\n        'String',\n        'Number',\n        'Amount',\n        'Date',\n        'Dropdown'\n    ];\n\n    isSupported(column: DynamicTableColumn): boolean {\n        return column && column.required && this.supportedTypes.indexOf(column.type) > -1;\n    }\n\n    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean {\n        if (this.isSupported(column)) {\n            let value = row.value[column.id];\n            if (column.required) {\n                if (value === null || value === undefined || value === '') {\n                    if (summary) {\n                        summary.isValid = false;\n                        summary.text = `Field '${column.name}' is required.`;\n                    }\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class DateCellValidator implements CellValidator {\n\n    private supportedTypes: string[] = [\n        'Date'\n    ];\n\n    isSupported(column: DynamicTableColumn): boolean {\n        return column && column.editable && this.supportedTypes.indexOf(column.type) > -1;\n    }\n\n    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean {\n\n        if (this.isSupported(column)) {\n            let value = row.value[column.id];\n            let dateValue = moment(value, 'D-M-YYYY');\n            if (!dateValue.isValid()) {\n                if (summary) {\n                    summary.isValid = false;\n                    summary.text = `Invalid '${column.name}' format.`;\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class NumberCellValidator implements CellValidator {\n\n    private supportedTypes: string[] = [\n        'Number',\n        'Amount'\n    ];\n\n    isSupported(column: DynamicTableColumn): boolean {\n        return column && column.required && this.supportedTypes.indexOf(column.type) > -1;\n    }\n\n    isNumber(value: any): boolean {\n        if (value === null || value === undefined || value === '') {\n            return false;\n        }\n\n        return !isNaN(+value);\n    }\n\n    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean {\n\n        if (this.isSupported(column)) {\n            let value = row.value[column.id];\n            if (value === null ||\n                value === undefined ||\n                value === '' ||\n                this.isNumber(value)) {\n                return true;\n            }\n\n            if (summary) {\n                summary.isValid = false;\n                summary.text = `Field '${column.name}' must be a number.`;\n            }\n            return false;\n        }\n        return true;\n    }\n}\n\n// maps to: com.activiti.model.editor.form.ColumnDefinitionRepresentation\nexport interface DynamicTableColumn {\n\n    id: string;\n    name: string;\n    type: string;\n    value: any;\n    optionType: string;\n    options: DynamicTableColumnOption[];\n    restResponsePath: string;\n    restUrl: string;\n    restIdProperty: string;\n    restLabelProperty: string;\n    amountCurrency: string;\n    amountEnableFractions: boolean;\n    required: boolean;\n    editable: boolean;\n    sortable: boolean;\n    visible: boolean;\n\n    // TODO: com.activiti.domain.idm.EndpointConfiguration.EndpointConfigurationRepresentation\n    endpoint: any;\n    // TODO: com.activiti.model.editor.form.RequestHeaderRepresentation\n    requestHeaders: any;\n}\n\n// maps to: com.activiti.model.editor.form.OptionRepresentation\nexport interface DynamicTableColumnOption {\n    id: string;\n    name: string;\n}\n\nexport interface DynamicTableRow {\n    isNew: boolean;\n    selected: boolean;\n    value: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { FormModel } from '../components/widgets/core/form.model';\n\n@Injectable()\nexport class EcmModelService {\n\n    public static MODEL_NAMESPACE: string = 'activitiForms';\n    public static MODEL_NAME: string = 'activitiFormsModel';\n    public static TYPE_MODEL: string = 'cm:folder';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    public createEcmTypeForActivitiForm(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.searchActivitiEcmModel().subscribe(\n                model => {\n                    if (!model) {\n                        this.createActivitiEcmModel(formName, form).subscribe(typeForm => {\n                            observer.next(typeForm);\n                            observer.complete();\n                        });\n                    } else {\n                        this.saveFomType(formName, form).subscribe(typeForm => {\n                            observer.next(typeForm);\n                            observer.complete();\n                        });\n                    }\n                },\n                err => this.handleError(err)\n            );\n        });\n\n    }\n\n    searchActivitiEcmModel() {\n        return this.getEcmModels().map(function (ecmModels: any) {\n            return ecmModels.list.entries.find(model => model.entry.name === EcmModelService.MODEL_NAME);\n        });\n    }\n\n    createActivitiEcmModel(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.createEcmModel(EcmModelService.MODEL_NAME, EcmModelService.MODEL_NAMESPACE).subscribe(\n                model => {\n                    this.logService.info('model created', model);\n                    this.activeEcmModel(EcmModelService.MODEL_NAME).subscribe(\n                        modelActive => {\n                            this.logService.info('model active', modelActive);\n                            this.createEcmTypeWithProperties(formName, form).subscribe(typeCreated => {\n                                observer.next(typeCreated);\n                                observer.complete();\n                            });\n                        },\n                        err => this.handleError(err)\n                    );\n                },\n                err => this.handleError(err)\n            );\n        });\n    }\n\n    saveFomType(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(\n                ecmType => {\n                    this.logService.info('custom types', ecmType);\n                    if (!ecmType) {\n                        this.createEcmTypeWithProperties(formName, form).subscribe(typeCreated => {\n                            observer.next(typeCreated);\n                            observer.complete();\n                        });\n                    } else {\n                        observer.next(ecmType);\n                        observer.complete();\n                    }\n                },\n                err => this.handleError(err)\n            );\n        });\n    }\n\n    public createEcmTypeWithProperties(formName: string, form: FormModel): Observable<any> {\n        return Observable.create(observer => {\n            this.createEcmType(formName, EcmModelService.MODEL_NAME, EcmModelService.TYPE_MODEL).subscribe(\n                typeCreated => {\n                    this.logService.info('type Created', typeCreated);\n                    this.addPropertyToAType(EcmModelService.MODEL_NAME, formName, form).subscribe(\n                        properyAdded => {\n                            this.logService.info('property Added', properyAdded);\n                            observer.next(typeCreated);\n                            observer.complete();\n                        },\n                        err => this.handleError(err));\n                },\n                err => this.handleError(err));\n        });\n    }\n\n    public searchEcmType(typeName: string, modelName: string): Observable<any> {\n        return this.getEcmType(modelName).map(function (customTypes: any) {\n            return customTypes.list.entries.find(type => type.entry.prefixedName === typeName || type.entry.title === typeName);\n        });\n    }\n\n    public activeEcmModel(modelName: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.activateCustomModel(modelName))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public createEcmModel(modelName: string, nameSpace: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.createCustomModel('DRAFT', '', modelName, modelName, nameSpace))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public getEcmModels(): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.getAllCustomModel())\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public getEcmType(modelName: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.getAllCustomType(modelName))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public createEcmType(typeName: string, modelName: string, parentType: string): Observable<any> {\n        let name = this.cleanNameType(typeName);\n\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.createCustomType(modelName, name, parentType, typeName, ''))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    public addPropertyToAType(modelName: string, typeName: string, formFields: any) {\n        let name = this.cleanNameType(typeName);\n\n        let properties = [];\n        if (formFields && formFields.values) {\n            for (let key in formFields.values) {\n                if (key) {\n                    properties.push({\n                        name: key,\n                        title: key,\n                        description: key,\n                        dataType: 'd:text',\n                        multiValued: false,\n                        mandatory: false,\n                        mandatoryEnforced: false\n                    });\n                }\n            }\n        }\n\n        return Observable.fromPromise(this.apiService.getInstance().core.customModelApi.addPropertyToType(modelName, name, properties))\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n\n    }\n\n    cleanNameType(name: string): string {\n        let cleanName = name;\n        if (name.indexOf(':') !== -1) {\n            cleanName = name.split(':')[1];\n        }\n        return cleanName.replace(/[^a-zA-Z ]/g, '');\n    }\n\n    toJson(res: any) {\n        if (res) {\n            return res || {};\n        }\n        return {};\n    }\n\n    handleError(err: any): any {\n        this.logService.error(err);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/services/ecm-model.service.ts","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./form-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/form-list.component.scss\n// module id = 730\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./amount.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/amount/amount.widget.scss\n// module id = 731\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./container.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/container/container.widget.scss\n// module id = 732\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./content.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/content/content.widget.scss\n// module id = 733\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./date.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/date/date.widget.scss\n// module id = 734\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./display-text.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/display-text/display-text.widget.scss\n// module id = 735\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./dropdown.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dropdown/dropdown.widget.scss\n// module id = 736\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./dynamic-table.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/dynamic-table.widget.scss\n// module id = 737\n// module chunks = 2","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./boolean.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/boolean/boolean.editor.scss\n// module id = 738\n// module chunks = 2","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./date.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/date/date.editor.scss\n// module id = 739\n// module chunks = 2","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./dropdown.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/dropdown/dropdown.editor.scss\n// module id = 740\n// module chunks = 2","\n        var result = require(\"!!../../../../../../../node_modules/raw-loader/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./text.editor.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/dynamic-table/editors/text/text.editor.scss\n// module id = 741\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./error.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/error/error.component.scss\n// module id = 742\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./functional-group.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/functional-group/functional-group.widget.scss\n// module id = 743\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./hyperlink.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/hyperlink/hyperlink.widget.scss\n// module id = 744\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./multiline-text.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/multiline-text/multiline-text.widget.scss\n// module id = 745\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./number.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/number/number.widget.scss\n// module id = 746\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./people.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/people/people.widget.scss\n// module id = 747\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./radio-buttons.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/radio-buttons/radio-buttons.widget.scss\n// module id = 748\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./text.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/text/text.widget.scss\n// module id = 749\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./typeahead.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/typeahead/typeahead.widget.scss\n// module id = 750\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./unknown.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/unknown/unknown.widget.scss\n// module id = 751\n// module chunks = 2","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./upload.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-form/src/components/widgets/upload/upload.widget.scss\n// module id = 752\n// module chunks = 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { AfterViewInit, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormService } from './../../services/form.service';\nimport { FormFieldModel } from './core/index';\n\nexport const baseHost = {\n    '(click)': 'event($event)',\n    '(blur)': 'event($event)',\n    '(change)': 'event($event)',\n    '(focus)': 'event($event)',\n    '(focusin)': 'event($event)',\n    '(focusout)': 'event($event)',\n    '(input)': 'event($event)',\n    '(invalid)': 'event($event)',\n    '(select)': 'event($event)'\n};\n\n/**\n * Base widget component.\n */\n@Component({\n    selector: 'base-widget',\n    template: '',\n    host: baseHost,\n    encapsulation: ViewEncapsulation.None\n})\nexport class WidgetComponent implements AfterViewInit {\n\n    static DEFAULT_HYPERLINK_URL: string = '#';\n    static DEFAULT_HYPERLINK_SCHEME: string = 'http://';\n\n    @Input()\n    readOnly: boolean = false;\n\n    @Input()\n    field: FormFieldModel;\n\n    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */\n    @Output()\n    fieldChanged: EventEmitter<FormFieldModel> = new EventEmitter<FormFieldModel>();\n\n    constructor(public formService?: FormService) {\n    }\n\n    hasField() {\n        return this.field ? true : false;\n    }\n\n    // Note for developers:\n    // returns <any> object to be able binding it to the <element reguired=\"required\"> attribute\n    isRequired(): any {\n        if (this.field && this.field.required) {\n            return true;\n        }\n        return null;\n    }\n\n    isValid(): boolean {\n        return this.field.validationSummary ? true : false;\n    }\n\n    hasValue(): boolean {\n        return this.field &&\n            this.field.value !== null &&\n            this.field.value !== undefined;\n    }\n\n    isInvalidFieldRequired() {\n        return !this.field.isValid && !this.field.validationSummary && this.isRequired();\n    }\n\n    ngAfterViewInit() {\n        this.fieldChanged.emit(this.field);\n    }\n\n    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */\n    checkVisibility(field: FormFieldModel) {\n        console.log('WidgetComponent.checkVisibility was used only to trigger visibility engine, components should do that internally if needed');\n        this.fieldChanged.emit(field);\n    }\n\n    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */\n    onFieldChanged(field: FormFieldModel) {\n        console.log('WidgetComponent.onFieldChanged was used only to trigger visibility engine, components should do that internally if needed');\n        this.fieldChanged.emit(field);\n    }\n\n    protected getHyperlinkUrl(field: FormFieldModel) {\n        let url = WidgetComponent.DEFAULT_HYPERLINK_URL;\n        if (field && field.hyperlinkUrl) {\n            url = field.hyperlinkUrl;\n            if (!/^https?:\\/\\//i.test(url)) {\n                url = `${WidgetComponent.DEFAULT_HYPERLINK_SCHEME}${url}`;\n            }\n        }\n        return url;\n    }\n\n    protected getHyperlinkText(field: FormFieldModel) {\n        if (field) {\n            return field.displayText || field.hyperlinkUrl;\n        }\n        return null;\n    }\n\n    protected event(event: Event): void {\n        console.log(event);\n        this.formService.formEvents.next(event);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/widget.component.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_804__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/animations\"\n// module id = 804\n// module chunks = 2","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\nimport { DataTableModule } from 'ng2-alfresco-datatable';\nimport { FormFieldComponent } from './src/components/form-field/form-field.component';\nimport { FormListComponent } from './src/components/form-list.component';\nimport { FormComponent } from './src/components/form.component';\nimport { MaterialModule } from './src/components/material.module';\nimport { StartFormComponent } from './src/components/start-form.component';\nimport { ContentWidgetComponent } from './src/components/widgets/content/content.widget';\nimport { MASK_DIRECTIVE, WIDGET_DIRECTIVES } from './src/components/widgets/index';\nimport { WidgetComponent } from './src/components/widgets/widget.component';\nimport { ActivitiAlfrescoContentService } from './src/services/activiti-alfresco.service';\nimport { ActivitiContentService } from './src/services/activiti-content-service';\nimport { EcmModelService } from './src/services/ecm-model.service';\nimport { FormRenderingService } from './src/services/form-rendering.service';\nimport { FormService } from './src/services/form.service';\nimport { NodeService } from './src/services/node.service';\nimport { WidgetVisibilityService } from './src/services/widget-visibility.service';\n\nexport * from './src/components/form.component';\nexport * from './src/components/form-list.component';\nexport * from './src/components/widgets/content/content.widget';\nexport * from './src/components/start-form.component';\nexport * from './src/services/form.service';\nexport * from './src/services/activiti-content-service';\nexport * from './src/components/widgets/index';\nexport * from './src/services/ecm-model.service';\nexport * from './src/services/node.service';\nexport * from './src/services/form-rendering.service';\nexport * from './src/events/index';\nexport { FORM_FIELD_VALIDATORS } from './src/components/widgets/core/form-field-validator';\n\n// Old deprecated import\nimport {FormComponent as ActivitiForm } from './src/components/form.component';\nimport {StartFormComponent as ActivitiStartForm } from './src/components/start-form.component';\nimport {ContentWidgetComponent as ActivitiContent } from './src/components/widgets/content/content.widget';\nexport {FormComponent as ActivitiForm} from './src/components/form.component';\nexport {ContentWidgetComponent as ActivitiContent} from './src/components/widgets/content/content.widget';\nexport {StartFormComponent as ActivitiStartForm} from './src/components/start-form.component';\n\nexport const ACTIVITI_FORM_DIRECTIVES: any[] = [\n    FormComponent,\n    FormListComponent,\n    ContentWidgetComponent,\n    StartFormComponent,\n    FormFieldComponent,\n    ...WIDGET_DIRECTIVES\n];\n\nexport const DEPRECATED_FORM_DIRECTIVES: any[] = [\n    ActivitiForm,\n    ActivitiContent,\n    ActivitiStartForm\n];\n\nexport const ACTIVITI_FORM_PROVIDERS: any[] = [\n    FormService,\n    ActivitiContentService,\n    EcmModelService,\n    NodeService,\n    WidgetVisibilityService,\n    ActivitiAlfrescoContentService,\n    FormRenderingService\n];\n\n@NgModule({\n    imports: [\n        CoreModule,\n        DataTableModule,\n        HttpModule,\n        MaterialModule\n    ],\n    declarations: [\n        ...ACTIVITI_FORM_DIRECTIVES,\n        ...DEPRECATED_FORM_DIRECTIVES,\n        ...MASK_DIRECTIVE,\n        WidgetComponent\n    ],\n    entryComponents: [\n        ...WIDGET_DIRECTIVES\n    ],\n    providers: [\n        ...ACTIVITI_FORM_PROVIDERS,\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'ng2-activiti-form',\n                source: 'assets/ng2-activiti-form'\n            }\n        }\n    ],\n    exports: [\n        ...ACTIVITI_FORM_DIRECTIVES,\n        ...DEPRECATED_FORM_DIRECTIVES,\n        MaterialModule\n    ]\n})\nexport class ActivitiFormModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ActivitiFormModule,\n            providers: [\n                ...ACTIVITI_FORM_PROVIDERS\n            ]\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nexport class FormFieldTypes {\n    static CONTAINER: string = 'container';\n    static GROUP: string = 'group';\n    static DYNAMIC_TABLE: string = 'dynamic-table';\n    static TEXT: string = 'text';\n    static MULTILINE_TEXT: string = 'multi-line-text';\n    static DROPDOWN: string = 'dropdown';\n    static HYPERLINK: string = 'hyperlink';\n    static RADIO_BUTTONS: string = 'radio-buttons';\n    static DISPLAY_VALUE: string = 'readonly';\n    static READONLY_TEXT: string = 'readonly-text';\n    static UPLOAD: string = 'upload';\n    static TYPEAHEAD: string = 'typeahead';\n    static FUNCTIONAL_GROUP: string = 'functional-group';\n    static PEOPLE: string = 'people';\n    static BOOLEAN: string = 'boolean';\n    static NUMBER: string = 'integer';\n    static DATE: string = 'date';\n    static AMOUNT: string = 'amount';\n    static DOCUMENT: string = 'document';\n\n    static READONLY_TYPES: string[] = [\n        FormFieldTypes.HYPERLINK,\n        FormFieldTypes.DISPLAY_VALUE,\n        FormFieldTypes.READONLY_TEXT\n    ];\n\n    static isReadOnlyType(type: string) {\n        return FormFieldTypes.READONLY_TYPES.indexOf(type) > -1;\n    }\n\n    static isContainerType(type: string) {\n        return type === FormFieldTypes.CONTAINER || type === FormFieldTypes.GROUP;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-field-types.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport * as moment from 'moment';\nimport { FormFieldTypes } from './form-field-types';\nimport { FormFieldModel } from './form-field.model';\n\nexport interface FormFieldValidator {\n\n    isSupported(field: FormFieldModel): boolean;\n    validate(field: FormFieldModel): boolean;\n\n}\n\nexport class RequiredFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT,\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.TYPEAHEAD,\n        FormFieldTypes.DROPDOWN,\n        FormFieldTypes.PEOPLE,\n        FormFieldTypes.FUNCTIONAL_GROUP,\n        FormFieldTypes.RADIO_BUTTONS,\n        FormFieldTypes.UPLOAD,\n        FormFieldTypes.AMOUNT,\n        FormFieldTypes.DYNAMIC_TABLE,\n        FormFieldTypes.DATE\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            field.required;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field)) {\n\n            if (field.type === FormFieldTypes.DROPDOWN) {\n                if (field.hasEmptyValue && field.emptyOption) {\n                    if (field.value === field.emptyOption.id) {\n                        return false;\n                    }\n                }\n            }\n\n            if (field.type === FormFieldTypes.RADIO_BUTTONS) {\n                let option = field.options.find(opt => opt.id === field.value);\n                return !!option;\n            }\n\n            if (field.type === FormFieldTypes.UPLOAD) {\n                return field.value && field.value.length > 0;\n            }\n\n            if (field.type === FormFieldTypes.DYNAMIC_TABLE) {\n                return field.value && field.value instanceof Array && field.value.length > 0;\n            }\n\n            if (field.value === null || field.value === undefined || field.value === '') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nexport class NumberFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.AMOUNT\n    ];\n\n    static isNumber(value: any): boolean {\n        if (value === null || value === undefined || value === '') {\n            return false;\n        }\n\n        return !isNaN(+value);\n    }\n\n    isSupported(field: FormFieldModel): boolean {\n        return field && this.supportedTypes.indexOf(field.type) > -1;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field)) {\n            if (field.value === null ||\n                field.value === undefined ||\n                field.value === '') {\n                return true;\n            }\n            let valueStr = '' + field.value;\n            let pattern = new RegExp(/^-?\\d+$/);\n            if (field.enableFractions) {\n                pattern = new RegExp(/^-?[0-9]+(\\.[0-9]{1,2})?$/);\n            }\n            if (valueStr.match(pattern)) {\n                return true;\n            }\n            field.validationSummary = 'Incorrect number format';\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class DateFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.DATE\n    ];\n\n    // Validates that the input string is a valid date formatted as <dateFormat> (default D-M-YYYY)\n    static isValidDate(inputDate: string, dateFormat: string = 'D-M-YYYY'): boolean {\n        if (inputDate) {\n            let d = moment(inputDate, dateFormat, true);\n            return d.isValid();\n        }\n\n        return false;\n    }\n\n    isSupported(field: FormFieldModel): boolean {\n        return field && this.supportedTypes.indexOf(field.type) > -1;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (DateFieldValidator.isValidDate(field.value, field.dateDisplayFormat)) {\n                return true;\n            }\n            field.validationSummary = field.dateDisplayFormat;\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class MinDateFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.DATE\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 && !!field.minValue;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            const dateFormat = field.dateDisplayFormat;\n\n            if (!DateFieldValidator.isValidDate(field.value, dateFormat)) {\n                field.validationSummary = 'Invalid date format';\n                return false;\n            }\n\n            // remove time and timezone info\n            let d;\n            if (typeof field.value === 'string') {\n                d = moment(field.value.split('T')[0], dateFormat);\n            } else {\n                d = field.value;\n            }\n            let min = moment(field.minValue, dateFormat);\n\n            if (d.isBefore(min)) {\n                field.validationSummary = `Should not be less than ${field.minValue}`;\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport class MaxDateFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.DATE\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 && !!field.maxValue;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            const dateFormat = field.dateDisplayFormat;\n\n            if (!DateFieldValidator.isValidDate(field.value, dateFormat)) {\n                field.validationSummary = 'Invalid date format';\n                return false;\n            }\n\n            // remove time and timezone info\n            let d;\n            if (typeof field.value === 'string') {\n                d = moment(field.value.split('T')[0], dateFormat);\n            } else {\n                d = field.value;\n            }\n            let max = moment(field.maxValue, dateFormat);\n\n            if (d.isAfter(max)) {\n                field.validationSummary = `Should not be greater than ${field.maxValue}`;\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport class MinLengthFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            field.minLength > 0;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (field.value.length >= field.minLength) {\n                return true;\n            }\n            field.validationSummary = `Should be at least ${field.minLength} characters long.`;\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class MaxLengthFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            field.maxLength > 0;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (field.value.length <= field.maxLength) {\n                return true;\n            }\n            field.validationSummary = `Should be ${field.maxLength} characters maximum.`;\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class MinValueFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.AMOUNT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            NumberFieldValidator.isNumber(field.minValue);\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            let value: number = +field.value;\n            let minValue: number = +field.minValue;\n\n            if (value >= minValue) {\n                return true;\n            }\n            field.validationSummary = `Should not be less than ${field.minValue}`;\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport class MaxValueFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.NUMBER,\n        FormFieldTypes.AMOUNT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 &&\n            NumberFieldValidator.isNumber(field.maxValue);\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            let value: number = +field.value;\n            let maxValue: number = +field.maxValue;\n\n            if (value <= maxValue) {\n                return true;\n            }\n            field.validationSummary = `Should not be greater than ${field.maxValue}`;\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport class RegExFieldValidator implements FormFieldValidator {\n\n    private supportedTypes = [\n        FormFieldTypes.TEXT,\n        FormFieldTypes.MULTILINE_TEXT\n    ];\n\n    isSupported(field: FormFieldModel): boolean {\n        return field &&\n            this.supportedTypes.indexOf(field.type) > -1 && !!field.regexPattern;\n    }\n\n    validate(field: FormFieldModel): boolean {\n        if (this.isSupported(field) && field.value) {\n            if (field.value.length > 0 && field.value.match(new RegExp('^' + field.regexPattern + '$'))) {\n                return true;\n            }\n            field.validationSummary = 'Invalid value format';\n            return false;\n        }\n        return true;\n    }\n\n}\n\nexport const FORM_FIELD_VALIDATORS = [\n    new RequiredFieldValidator(),\n    new NumberFieldValidator(),\n    new MinLengthFieldValidator(),\n    new MaxLengthFieldValidator(),\n    new MinValueFieldValidator(),\n    new MaxValueFieldValidator(),\n    new RegExFieldValidator(),\n    new DateFieldValidator(),\n    new MinDateFieldValidator(),\n    new MaxDateFieldValidator()\n];\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/core/form-field-validator.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerWidgetComponent } from './container/container.widget';\nimport { TabsWidgetComponent } from './tabs/tabs.widget';\nimport { UnknownWidgetComponent } from './unknown/unknown.widget';\n\nimport { AmountWidgetComponent } from './amount/amount.widget';\nimport { AttachWidgetComponent } from './attach/attach.widget';\nimport { CheckboxWidgetComponent } from './checkbox/checkbox.widget';\nimport { DateWidgetComponent } from './date/date.widget';\nimport { DisplayTextWidgetComponentComponent } from './display-text/display-text.widget';\nimport { DropdownWidgetComponent } from './dropdown/dropdown.widget';\nimport { DynamicTableWidgetComponent } from './dynamic-table/dynamic-table.widget';\nimport { BooleanEditorComponent } from './dynamic-table/editors/boolean/boolean.editor';\nimport { DateEditorComponent } from './dynamic-table/editors/date/date.editor';\nimport { DropdownEditorComponent } from './dynamic-table/editors/dropdown/dropdown.editor';\nimport { RowEditorComponent } from './dynamic-table/editors/row.editor';\nimport { TextEditorComponent } from './dynamic-table/editors/text/text.editor';\nimport { ErrorWidgetComponent } from './error/error.component';\nimport { FunctionalGroupWidgetComponent } from './functional-group/functional-group.widget';\nimport { HyperlinkWidgetComponent } from './hyperlink/hyperlink.widget';\nimport { MultilineTextWidgetComponentComponent } from './multiline-text/multiline-text.widget';\nimport { NumberWidgetComponent } from './number/number.widget';\nimport { PeopleWidgetComponent } from './people/people.widget';\nimport { RadioButtonsWidgetComponent } from './radio-buttons/radio-buttons.widget';\nimport { InputMaskDirective } from './text/text-mask.component';\nimport { TextWidgetComponent } from './text/text.widget';\nimport { TypeaheadWidgetComponent } from './typeahead/typeahead.widget';\nimport { UploadWidgetComponent } from './upload/upload.widget';\nimport { WidgetComponent } from './widget.component';\n\n// core\nexport * from './widget.component';\nexport * from './core/index';\n\n// containers\nexport * from './tabs/tabs.widget';\nexport * from './container/container.widget';\n\n// primitives\nexport * from './unknown/unknown.widget';\nexport * from './text/text.widget';\nexport * from './number/number.widget';\nexport * from './checkbox/checkbox.widget';\nexport * from './multiline-text/multiline-text.widget';\nexport * from './dropdown/dropdown.widget';\nexport * from './hyperlink/hyperlink.widget';\nexport * from './radio-buttons/radio-buttons.widget';\nexport * from './display-text/display-text.widget';\nexport * from './upload/upload.widget';\nexport * from './attach/attach.widget';\nexport * from './typeahead/typeahead.widget';\nexport * from './functional-group/functional-group.widget';\nexport * from './people/people.widget';\nexport * from './date/date.widget';\nexport * from './amount/amount.widget';\nexport * from './dynamic-table/dynamic-table.widget';\nexport * from './error/error.component';\n\n// editors (dynamic table)\nexport * from './dynamic-table/editors/row.editor';\nexport * from './dynamic-table/editors/date/date.editor';\nexport * from './dynamic-table/editors/dropdown/dropdown.editor';\nexport * from './dynamic-table/editors/boolean/boolean.editor';\nexport * from './dynamic-table/editors/text/text.editor';\nexport * from './text/text-mask.component';\n\nexport const WIDGET_DIRECTIVES: any[] = [\n    WidgetComponent,\n    UnknownWidgetComponent,\n    TabsWidgetComponent,\n    ContainerWidgetComponent,\n    TextWidgetComponent,\n    NumberWidgetComponent,\n    CheckboxWidgetComponent,\n    MultilineTextWidgetComponentComponent,\n    DropdownWidgetComponent,\n    HyperlinkWidgetComponent,\n    RadioButtonsWidgetComponent,\n    DisplayTextWidgetComponentComponent,\n    UploadWidgetComponent,\n    AttachWidgetComponent,\n    TypeaheadWidgetComponent,\n    FunctionalGroupWidgetComponent,\n    PeopleWidgetComponent,\n    DateWidgetComponent,\n    AmountWidgetComponent,\n    DynamicTableWidgetComponent,\n    DateEditorComponent,\n    DropdownEditorComponent,\n    BooleanEditorComponent,\n    TextEditorComponent,\n    RowEditorComponent,\n    ErrorWidgetComponent\n];\n\nexport const MASK_DIRECTIVE: any[] = [\n    InputMaskDirective\n];\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/components/widgets/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Type } from '@angular/core';\n\nimport {\n    AmountWidgetComponent,\n    AttachWidgetComponent,\n    CheckboxWidgetComponent,\n    ContainerWidgetComponent,\n    DateWidgetComponent,\n    DisplayTextWidgetComponentComponent,\n    DropdownWidgetComponent,\n    DynamicTableWidgetComponent,\n    FormFieldModel,\n    FunctionalGroupWidgetComponent,\n    HyperlinkWidgetComponent,\n    MultilineTextWidgetComponentComponent,\n    NumberWidgetComponent,\n    PeopleWidgetComponent,\n    RadioButtonsWidgetComponent,\n    TextWidgetComponent,\n    TypeaheadWidgetComponent,\n    UnknownWidgetComponent,\n    UploadWidgetComponent\n} from './../components/widgets/index';\n\n@Injectable()\nexport class FormRenderingService {\n\n    private types: { [key: string]: ComponentTypeResolver } = {\n        'text': DefaultTypeResolver.fromType(TextWidgetComponent),\n        'integer': DefaultTypeResolver.fromType(NumberWidgetComponent),\n        'multi-line-text': DefaultTypeResolver.fromType(MultilineTextWidgetComponentComponent),\n        'boolean': DefaultTypeResolver.fromType(CheckboxWidgetComponent),\n        'dropdown': DefaultTypeResolver.fromType(DropdownWidgetComponent),\n        'date': DefaultTypeResolver.fromType(DateWidgetComponent),\n        'amount': DefaultTypeResolver.fromType(AmountWidgetComponent),\n        'radio-buttons': DefaultTypeResolver.fromType(RadioButtonsWidgetComponent),\n        'hyperlink': DefaultTypeResolver.fromType(HyperlinkWidgetComponent),\n        'readonly-text': DefaultTypeResolver.fromType(DisplayTextWidgetComponentComponent),\n        'typeahead': DefaultTypeResolver.fromType(TypeaheadWidgetComponent),\n        'people': DefaultTypeResolver.fromType(PeopleWidgetComponent),\n        'functional-group': DefaultTypeResolver.fromType(FunctionalGroupWidgetComponent),\n        'dynamic-table': DefaultTypeResolver.fromType(DynamicTableWidgetComponent),\n        'container': DefaultTypeResolver.fromType(ContainerWidgetComponent),\n        'group': DefaultTypeResolver.fromType(ContainerWidgetComponent)\n    };\n\n    constructor() {\n        this.types['upload'] = (field: FormFieldModel): Type<{}> => {\n            if (field) {\n                let params = field.params;\n                if (params && params.link) {\n                    return AttachWidgetComponent;\n                }\n                return UploadWidgetComponent;\n            }\n            return UnknownWidgetComponent;\n        };\n    }\n\n    getComponentTypeResolver(fieldType: string, defaultValue: Type<{}> = UnknownWidgetComponent): ComponentTypeResolver {\n        if (fieldType) {\n            return this.types[fieldType] || DefaultTypeResolver.fromType(defaultValue);\n        }\n        return DefaultTypeResolver.fromType(defaultValue);\n    }\n\n    setComponentTypeResolver(fieldType: string, resolver: ComponentTypeResolver, override: boolean = false) {\n        if (!fieldType) {\n            throw new Error(`fieldType is null or not defined`);\n        }\n\n        if (!resolver) {\n            throw new Error(`resolver is null or not defined`);\n        }\n\n        let existing = this.types[fieldType];\n        if (existing && !override) {\n            throw new Error(`already mapped, use override option if you intend replacing existing mapping.`);\n        }\n\n        this.types[fieldType] = resolver;\n    }\n\n    resolveComponentType(field: FormFieldModel, defaultValue: Type<{}> = UnknownWidgetComponent): Type<{}> {\n        if (field) {\n            let resolver = this.getComponentTypeResolver(field.type, defaultValue);\n            return resolver(field);\n        }\n        return defaultValue;\n    }\n\n}\n\nexport type ComponentTypeResolver = (field: FormFieldModel) => Type<{}>;\n\nexport class DefaultTypeResolver {\n    static fromType(type: Type<{}>): ComponentTypeResolver {\n        return (field: FormFieldModel) => {\n            return type;\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/services/form-rendering.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/forms\"\n// module id = 9\n// module chunks = 1 2 3 5 10 14","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { NodeMetadata } from '../models/node-metadata.model';\n\n@Injectable()\nexport class NodeService {\n\n    constructor(private apiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Get All the metadata and the nodeType for a nodeId cleaned by the prefix\n     * @param nodeId Node Id\n     * @returns NodeMetadata\n     */\n    public getNodeMetadata(nodeId: string): Observable<NodeMetadata> {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.getNodeInfo(nodeId)).map(this.cleanMetadataFromSemicolon);\n    }\n\n    /**\n     * Create a new Node from form metadata\n     * @param path path\n     * @param nodeType node type\n     * @param nameSpace namespace node\n     * @param data data to store\n     * @returns NodeMetadata\n     */\n    public createNodeMetadata(nodeType: string, nameSpace: any, data: any, path: string, name?: string): Observable<any> {\n        let properties = {};\n        for (let key in data) {\n            if (data[key]) {\n                properties[nameSpace + ':' + key] = data[key];\n            }\n        }\n\n        return this.createNode(name || this.generateUuid(), nodeType, properties, path);\n    }\n\n    /**\n     * Create a new Node from form metadata\n     * @param name path\n     * @param nodeType node type\n     * @param properties namespace node\n     * @param path path\n     * @returns NodeMetadata\n     */\n    public createNode(name: string, nodeType: string, properties: any, path: string): Observable<any> {\n        let body = {\n            name: name,\n            nodeType: nodeType,\n            properties: properties,\n            relativePath: path\n        };\n\n        // TODO: requires update to alfresco-js-api typings\n        let apiService: any = this.apiService.getInstance();\n        return Observable.fromPromise(apiService.nodes.addNode('-root-', body, {}));\n    }\n\n    private generateUuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    private cleanMetadataFromSemicolon(data: any): NodeMetadata {\n        let metadata = {};\n\n        if (data && data.properties) {\n            for (let key in data.properties) {\n                if (key) {\n                    if (key.indexOf(':') !== -1) {\n                        metadata [key.split(':')[1]] = data.properties[key];\n                    } else {\n                        metadata [key] = data.properties[key];\n                    }\n                }\n            }\n        }\n\n        return new NodeMetadata(metadata, data.nodeType);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-form/src/services/node.service.ts"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;AAIA;AAMA;AAJA;AAKA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAjBA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjDA;;;;;;;;;;;;;;;AAeA;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAQA;AAKA;AAAA;AAFA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;;AACA;AACA;AAEA;AAAA;AAnBA;AADA;;AACA;AAHA;AANA;AACA;AACA;AACA;AACA;AACA;AAMA;AALA;AAAA;;;;;;;;;;;AC1BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAGA;AAKA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAjFA;AACA;AAHA;AADA;AAMA;AALA;AAAA;;;;;;;;;ACtBA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAKA;AAEA;AAAA;AAQA;AAAA;AACA;AACA;AACA;AACA;;AACA;AATA;AAAA;AACA;AACA;;;AAAA;AASA;AAAA;AAfA;;;;;;;;;;ACtBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AAKA;AAKA;AAAA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAhEA;AACA;AAHA;AADA;AAMA;AALA;AAAA;;;;;;;;;ACzBA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAMA;AAIA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAhOA;AADA;AAKA;AAJA;AAAA;;;;;;;;;AC1BA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAoFA;AAAA;AACA;AACA;AACA;AAhEA;AAYA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AApeA;AACA;AACA;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAhFA;AANA;AACA;AACA;AACA;AACA;AACA;AAqFA;AApFA;AAAA;;;;;;;;;;;AClCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AASA;AAAA;AAMA;AAAA;AAAA;AAFA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAdA;AAFA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAIA;AACA;AAWA;AAAA;AAmBA;AAAA;AAAA;AACA;AATA;AAGA;;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAlHA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAjBA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAnBA;AAAA;;;;;;;;;;;ACpCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAVA;AANA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAEA;AACA;AASA;AAAA;AAIA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAtDA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAJA;AAAA;;;;;;;;;;;AChCA;;;;;;;;;;;;;;;AAeA;;AAMA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AAHA;AACA;AACA;AACA;AAAA;AAVA;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;AAeA;;AAIA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAtDA;;;;;;;;;;ACnBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAGA;AAEA;AAGA;AACA;AACA;AAIA;AAAA;AAoGA;AAAA;AAjGA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AAIA;AAQA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AAzGA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AANA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AALA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AALA;AAOA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA2DA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AApVA;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAIA;AAGA;AAAA;AASA;AAAA;AAHA;AACA;AAKA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAfA;AACA;AACA;AAJA;;;;;;;;;;ACtBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAKA;AAGA;AAAA;AAYA;AAAA;AATA;AAGA;AASA;AACA;AACA;AACA;;AACA;AAXA;AACA;AACA;AAUA;AAAA;AApBA;;;;;;;;;;ACvBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAAA;AAKA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAzCA;AAVA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AALA;AAAA;;;;;;;;;;;ACrCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AASA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAEA;AAAA;AANA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AA1EA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAIA;AACA;AAEA;;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA3KA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAXA;AAAA;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AACA;AAOA;AAAA;AAgBA;AALA;AACA;AACA;AACA;AAEA;AAAA;AAbA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AACA;AACA;AAEA;AACA;AAUA;AAkBA;AAAA;AAhBA;AAiBA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAlCA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAbA;AARA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAmBA;AAlBA;AAAA;;;;;;;;;;;AClCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAOA;AAcA;AAAA;AACA;AAbA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAvEA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAZA;AALA;AACA;AACA;AACA;AACA;AAeA;AAdA;AAAA;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AACA;AAOA;AALA;AAiBA;AAGA;AAEA;AA6BA;AA3BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AA3CA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAfA;AALA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AACA;AAOA;AAAA;AAsBA;AATA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAnBA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAkBA;AAAA;AAUA;AAAA;AAAA;AAFA;;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAtBA;AADA;;AACA;AAGA;AADA;;AACA;AANA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAVA;AAAA;;;;;;;;;;;ACxCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAEA;AASA;AAAA;AAQA;AAAA;AAAA;AACA;AANA;AACA;AACA;;AAMA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjFA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AARA;AAAA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AASA;AAAA;AAKA;AAAA;AAAA;AAHA;AACA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAhBA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AALA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AASA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAEA;AAAA;AANA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AASA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAEA;AAAA;AANA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AAGA;AASA;AAAA;AAWA;AAAA;AAAA;AACA;AAPA;AACA;AAEA;;AAMA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnGA;AADA;AACA;AAAA;AAHA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAXA;AAAA;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AA7DA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AAQA;AALA;AAQA;AAGA;AAEA;AAoBA;AAlBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAzBA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AANA;AALA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAmBA;AAAA;AAAA;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AANA;AASA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAvLA;AAAA;;AAGA;AAwBA;AADA;AACA;;;;AAOA;AApCA;AAJA;AACA;AACA;AACA;AAoBA;AAnBA;AAAA;;;;;;;;;;;ACzCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AASA;AAAA;AAKA;AAAA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAfA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AALA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AAPA;AACA;AAEA;;AAMA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAtIA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAPA;AAAA;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AAiBA;AAAA;AAEA;AAAA;AAAA;;AAEA;AACA;AAAA;AALA;AAfA;AACA;AACA;AASA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;ACtCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AALA;;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAnGA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAPA;AAAA;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAGA;AAEA;AAAA;AAIA;AAAA;AAEA;;AACA;AAEA;AAAA;AATA;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAeA;AAEA;AACA;AACA;AAiBA;AAYA;AAAA;AACA;AACA;AACA;AATA;AAIA;AAMA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AADA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA3FA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AANA;AAZA;AACA;AACA;AAQA;AACA;AAaA;AAZA;AAAA;;;;;;;;;;;ACrDA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;ACxCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAIA;AAEA;AAGA;AAoBA;AAAA;AACA;AACA;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAGA;AAOA;AACA;AACA;AAGA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAEA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjYA;AACA;AAHA;AADA;AAqBA;AApBA;AAAA;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAyBA;AAAA;AA0BA;AAAA;AAjBA;AAGA;AAGA;AAGA;AAGA;AAGA;AAMA;;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAhHA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAxBA;AANA;AACA;AACA;AACA;AACA;AACA;AA2BA;AA1BA;AAAA;;;;;;;;;;;AChDA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AAQA;AAsBA;AAAA;AACA;AACA;AAlBA;AAGA;AAGA;AAGA;AAGA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAhGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAlBA;AANA;AACA;AACA;AACA;AACA;AACA;AAuBA;AAtBA;AAAA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAKA;AACA;AAGA;AAAA;AA+BA;AAAA;AA7BA;AACA;AACA;AACA;AA6BA;AACA;AACA;AACA;AACA;AACA;;AACA;AAjCA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAYA;AAAA;AAzCA;;;;;;;;;;ACxBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;AAeA;;AAMA;AAaA;AAVA;AAWA;AACA;AAVA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAMA;AACA;AACA;AAEA;AAAA;AArBA;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;AAeA;;AAIA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAKA;AA4CA;AAAA;AAAA;AAAA;AAlCA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAiBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AAnFA;AAAA;AACA;AACA;;;AAAA;AAgBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAyDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3OA;AACA;AACA;AACA;AALA;;;;;;;;;;ACnCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAGA;AAEA;AAAA;AAIA;AAAA;AAEA;;AACA;AAEA;AAAA;AATA;;;;;;;;;;ACpBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAGA;AAEA;AAAA;AAIA;AAAA;AAFA;;AAIA;AAEA;AAAA;AARA;;;;;;;;;;ACpBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAGA;AAEA;AAAA;AAIA;AAAA;AAFA;;AAIA;AACA;AAAA;AAPA;;;;;;;;;;ACpBA;;;;;;;;;;;;;;;AAeA;;AAEA;AAMA;AALA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA7EA;;;;;;;;;;ACjBA;;;;;;;;;;;;;;;AAeA;;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AARA;;;;;;;;ACjBA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;AAMA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvBA;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;AAeA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAIA;AAEA;AAEA;AAAA;AA8BA;AAAA;AA3BA;AACA;AACA;AAGA;AAwBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AAzCA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;AAhBA;AAyCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnKA;AAmLA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AApBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA9BA;AAgCA;AAAA;AAEA;AACA;AACA;AAsBA;AApBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA1BA;AA4BA;AAAA;AAEA;AACA;AACA;AACA;AAiCA;AA/BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtCA;;;;;;;;;;ACtQA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAIA;AAMA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAhLA;AACA;AACA;AAJA;AADA;AAOA;AANA;AAAA;;;;;;;;;ACveA;;;;;;;;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAeA;AAAA;AATA;AAOA;AAGA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAjFA;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAIA;AADA;AACA;AAAA;AAbA;AANA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAfA;AAAA;;;;;;;;;AC5CA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmCA;AAAA;AASA;AARA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AATA;AAjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACpHA;;;;;;;;;;;;;;;AAeA;;AAIA;AAAA;AAkCA;AAPA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzBA;;;;;;;;;;ACnBA;;;;;;;;;;;;;;;AAeA;;AAIA;AACA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuCA;AArCA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAtDA;AAwDA;AAAA;AAEA;AACA;AACA;AACA;AAkCA;AAhCA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvCA;AAyCA;AAAA;AAEA;AACA;AACA;AA0BA;AAvBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA9BA;AAgCA;AAAA;AAEA;AACA;AACA;AAgCA;AA9BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AApCA;AAsCA;AAAA;AAEA;AACA;AACA;AAgCA;AA9BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AApCA;AAsCA;AAAA;AAEA;AACA;AACA;AACA;AAkBA;AAhBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvBA;AAyBA;AAAA;AAEA;AACA;AACA;AACA;AAkBA;AAhBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvBA;AAyBA;AAAA;AAEA;AACA;AACA;AACA;AAsBA;AApBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA3BA;AA6BA;AAAA;AAEA;AACA;AACA;AACA;AAsBA;AApBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA3BA;AA6BA;AAAA;AAEA;AACA;AACA;AACA;AAkBA;AAhBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3XA;;;;;;;;;;;;;;;AAeA;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;ACjHA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AAuBA;AAqBA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAlEA;AADA;;AACA;AAAA;AAsEA;AAAA;AAMA;AALA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;;;;;;;;AChHA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AAOA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA9EA;AADA;AAGA;AAFA;AAAA;;;;;;;","sourceRoot":""}