{"version":3,"file":"ng2-activiti-analytics/bundles/ng2-activiti-analytics.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6*****","webpack:///webpack/bootstrap b7ef3555f7a1d27de299?877f*****","webpack:///external \"@angular/core\"?73d1*****","webpack:///external \"ng2-alfresco-core\"?bd09****","webpack:///./ng2-activiti-analytics/src/components/analytics-report-list.component.ts","webpack:///./ng2-activiti-analytics/src/components/analytics-report-parameters.component.ts","webpack:///./ng2-activiti-analytics/src/components/analytics.component.ts","webpack:///./ng2-activiti-analytics/src/components/widgets/index.ts","webpack:///external \"moment\"?a88d***","webpack:///./ng2-activiti-analytics/src/components/widgets/number/number.widget.ts","webpack:///./ng2-activiti-analytics/src/components/widgets/widget.component.ts","webpack:///external \"rxjs/Rx\"?3be5*****","webpack:///./ng2-activiti-analytics/src/components/widgets/checkbox/checkbox.widget.ts","webpack:///./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.ts","webpack:///./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.ts","webpack:///./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.ts","webpack:///external \"@angular/material\"?8d30****","webpack:///./ng2-activiti-analytics/src/components/analytics-report-heat-map.component.ts","webpack:///./ng2-activiti-analytics/src/material.module.ts","webpack:///./ng2-activiti-analytics/src/services/analytics.service.ts","webpack:///external \"ng2-charts\"","webpack:///./ng2-activiti-analytics/src/components/analytics-generator.component.html","webpack:///./ng2-activiti-analytics/src/components/analytics-report-heat-map.component.html","webpack:///./ng2-activiti-analytics/src/components/analytics-report-list.component.html","webpack:///./ng2-activiti-analytics/src/components/analytics-report-parameters.component.html","webpack:///./ng2-activiti-analytics/src/components/analytics.component.html","webpack:///./ng2-activiti-analytics/src/components/widgets/checkbox/checkbox.widget.html","webpack:///./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.html","webpack:///./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.html","webpack:///./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.html","webpack:///./ng2-activiti-analytics/src/components/widgets/number/number.widget.html","webpack:///./ng2-activiti-analytics/src/components/analytics-generator.component.scss","webpack:///./ng2-activiti-analytics/src/components/analytics-report-list.component.scss","webpack:///./ng2-activiti-analytics/src/components/analytics-report-parameters.component.scss","webpack:///external \"ng2-activiti-diagrams\"","webpack:///./ng2-activiti-analytics/src/components/analytics.component.scss","webpack:///./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.scss","webpack:///./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.scss","webpack:///./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.scss","webpack:///./ng2-activiti-analytics/src/components/widgets/number/number.widget.scss","webpack:///./ng2-activiti-analytics/src/components/analytics-generator.component.scss?d52a","webpack:///./ng2-activiti-analytics/src/components/analytics-report-list.component.scss?80c2","webpack:///./ng2-activiti-analytics/src/components/analytics-report-parameters.component.scss?fec9","webpack:///./ng2-activiti-analytics/src/components/analytics.component.scss?aaff","webpack:///./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.scss?30dd","webpack:///./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.scss?ca43","webpack:///./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.scss?1109","webpack:///./ng2-activiti-analytics/src/components/widgets/number/number.widget.scss?1104","webpack:///./ng2-activiti-analytics/index.ts","webpack:///./ng2-activiti-analytics/src/components/analytics-generator.component.ts","webpack:///external \"@angular/forms\"?af17**"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"@angular/forms\"), require(\"moment\"), require(\"ng2-activiti-diagrams\"), require(\"ng2-charts\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"ng2-alfresco-core\", \"rxjs/Rx\", \"@angular/material\", \"@angular/forms\", \"moment\", \"ng2-activiti-diagrams\", \"ng2-charts\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-activiti-analytics\"] = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"@angular/forms\"), require(\"moment\"), require(\"ng2-activiti-diagrams\"), require(\"ng2-charts\"));\n\telse\n\t\troot[\"ng2-activiti-analytics\"] = factory(root[\"@angular/core\"], root[\"ng2-alfresco-core\"], root[\"rxjs/Rx\"], root[\"@angular/material\"], root[\"@angular/forms\"], root[\"moment\"], root[\"ng2-activiti-diagrams\"], root[\"ng2-charts\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_389__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 816);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b7ef3555f7a1d27de299","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 1\n// module chunks = 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { ReportParametersModel } from 'ng2-activiti-diagrams';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { AnalyticsService } from '../services/analytics.service';\n\n@Component({\n    selector: ' adf-analytics-report-list, analytics-report-list',\n    template: require('./analytics-report-list.component.html'),\n    styles: [require('./analytics-report-list.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AnalyticsReportListComponent implements OnInit {\n\n    public static LAYOUT_LIST: string = 'LIST';\n    public static LAYOUT_GRID: string = 'GRID';\n\n    @Input()\n    layoutType: string = AnalyticsReportListComponent.LAYOUT_LIST;\n\n    @Input()\n    appId: string;\n\n    @Input()\n    selectFirst: boolean = false;\n\n    @Output()\n    reportClick: EventEmitter<ReportParametersModel> = new EventEmitter<ReportParametersModel>();\n\n    @Output()\n    onSuccess = new EventEmitter();\n\n    @Output()\n    onError = new EventEmitter();\n\n    private reportObserver: Observer<any>;\n    report$: Observable<any>;\n\n    currentReport: any;\n\n    reports: ReportParametersModel[] = [];\n\n    constructor(private analyticsService: AnalyticsService) {\n        this.report$ = new Observable<ReportParametersModel>(observer => this.reportObserver = observer).share();\n    }\n\n    ngOnInit() {\n        this.initObserver();\n\n        this.getReportList(this.appId);\n    }\n\n    initObserver() {\n        this.report$.subscribe((report: ReportParametersModel) => {\n            this.reports.push(report);\n        });\n    }\n\n    /**\n     * Reload the component\n     */\n    reload(reportId?) {\n        this.reset();\n        this.getReportList(this.appId, reportId);\n    }\n\n    /**\n     * Get the report list\n     */\n    getReportList(appId: string, reportId?: string) {\n        this.analyticsService.getReportList(appId).subscribe(\n            (res: ReportParametersModel[]) => {\n                if (res && res.length === 0) {\n                    this.createDefaultReports();\n                } else {\n                    res.forEach((report) => {\n                        this.reportObserver.next(report);\n                    });\n                    if (reportId) {\n                        this.selectReportByReportId(reportId);\n                    }\n                    if (this.selectFirst) {\n                        this.selectFirstReport();\n                    }\n                    this.onSuccess.emit(res);\n                }\n            },\n            (err: any) => {\n                this.onError.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Create the default reports and return the report list\n     */\n    createDefaultReports() {\n        this.analyticsService.createDefaultReports().subscribe(\n            () => {\n                this.analyticsService.getReportList(this.appId).subscribe(\n                    (response: ReportParametersModel[]) => {\n                        response.forEach((report) => {\n                            this.reportObserver.next(report);\n                        });\n                        this.onSuccess.emit(response);\n                    }\n                );\n            }\n        );\n    }\n\n    /**\n     * Check if the report list is empty\n     * @returns {boolean|ReportParametersModel[]}\n     */\n    isReportsEmpty(): boolean {\n        return this.reports === undefined || (this.reports && this.reports.length === 0);\n    }\n\n    /**\n     * Reset the list\n     */\n    private reset() {\n        if (!this.isReportsEmpty()) {\n            this.reports = [];\n        }\n    }\n\n    /**\n     * Select the current report\n     * @param report\n     */\n    public selectReport(report: any) {\n        this.currentReport = report;\n        this.reportClick.emit(report);\n    }\n\n    public selectReportByReportId(reportId) {\n        let reportFound = this.reports.find(report => report.id === reportId);\n        if (reportFound) {\n            this.currentReport = reportFound;\n            this.reportClick.emit(reportFound);\n        }\n    }\n\n    selectFirstReport() {\n        this.selectReport(this.reports[0]);\n        this.selectFirst = false;\n    }\n\n    isSelected(report: any) {\n        return this.currentReport === report ? true : false;\n    }\n\n    isList() {\n        return this.layoutType === AnalyticsReportListComponent.LAYOUT_LIST;\n    }\n\n    isGrid() {\n        return this.layoutType === AnalyticsReportListComponent.LAYOUT_GRID;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/analytics-report-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentChecked,\n    AfterViewChecked,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as moment from 'moment';\nimport { ParameterValueModel, ReportParameterDetailsModel, ReportParametersModel, ReportQuery } from 'ng2-activiti-diagrams';\nimport { ContentService, LogService } from 'ng2-alfresco-core';\nimport { AnalyticsService } from '../services/analytics.service';\n\ndeclare var componentHandler;\ndeclare let dialogPolyfill: any;\n\n@Component({\n    selector: 'adf-analytics-report-parameters, analytics-report-parameters',\n    template: require('./analytics-report-parameters.component.html'),\n    styles: [require('./analytics-report-parameters.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AnalyticsReportParametersComponent implements OnInit, OnChanges, OnDestroy, AfterViewChecked, AfterContentChecked {\n\n    public static FORMAT_DATE_ACTIVITI: string = 'YYYY-MM-DD';\n\n    @Input()\n    appId: string;\n\n    @Input()\n    reportId: string;\n\n    @Input()\n    hideComponent: boolean = false;\n\n    @Output()\n    onSuccess = new EventEmitter();\n\n    @Output()\n    onError = new EventEmitter();\n\n    @Output()\n    onEdit = new EventEmitter();\n\n    @Output()\n    onFormValueChanged = new EventEmitter();\n\n    @Output()\n    saveReportSuccess = new EventEmitter();\n\n    @Output()\n    deleteReportSuccess = new EventEmitter();\n\n    @ViewChild('reportNameDialog')\n    reportNameDialog: any;\n\n    onDropdownChanged = new EventEmitter();\n\n    onSuccessReportParams = new EventEmitter();\n\n    onSuccessParamOpt = new EventEmitter();\n\n    reportParameters: ReportParametersModel;\n\n    reportForm: FormGroup;\n\n    action: string;\n\n    isEditable: boolean = false;\n\n    reportName: string;\n\n    private dropDownSub;\n    private reportParamsSub;\n    private paramOpts;\n    private reportParamQuery: ReportQuery;\n    private hideParameters: boolean = true;\n    private formValidState: boolean = false;\n\n    constructor(private analyticsService: AnalyticsService,\n                private formBuilder: FormBuilder,\n                private logService: LogService,\n                private contentService: ContentService) {\n    }\n\n    ngOnInit() {\n        this.dropDownSub = this.onDropdownChanged.subscribe((field) => {\n            let paramDependOn: ReportParameterDetailsModel = this.reportParameters.definition.parameters.find(p => p.dependsOn === field.id);\n            if (paramDependOn) {\n                this.retrieveParameterOptions(this.reportParameters.definition.parameters, this.appId, this.reportId, field.value);\n            }\n        });\n\n        this.paramOpts = this.onSuccessReportParams.subscribe((report: ReportParametersModel) => {\n            if (report.hasParameters()) {\n                this.retrieveParameterOptions(report.definition.parameters, this.appId);\n                this.generateFormGroupFromParameter(report.definition.parameters);\n            }\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.isEditable = false;\n        if (this.reportForm) {\n            this.reportForm.reset();\n        }\n        let reportId = changes['reportId'];\n        if (reportId && reportId.currentValue) {\n            this.getReportParams(reportId.currentValue);\n        }\n\n        let appId = changes['appId'];\n        if (appId && (appId.currentValue || appId.currentValue === null)) {\n            this.getReportParams(this.reportId);\n        }\n    }\n\n    private generateFormGroupFromParameter(parameters: ReportParameterDetailsModel[]) {\n        let formBuilderGroup: any = {};\n        parameters.forEach((param: ReportParameterDetailsModel) => {\n            switch (param.type) {\n                case 'dateRange' :\n                    formBuilderGroup.dateRange = new FormGroup({}, Validators.required);\n                    break;\n                case 'processDefinition':\n                    formBuilderGroup.processDefGroup = new FormGroup({\n                        processDefinitionId: new FormControl(null, Validators.required, null)\n                    },                                               Validators.required);\n                    break;\n                case 'duration':\n                    formBuilderGroup.durationGroup = new FormGroup({\n                        duration: new FormControl(null, Validators.required, null)\n                    },                                             Validators.required);\n                    break;\n                case 'dateInterval':\n                    formBuilderGroup.dateIntervalGroup = new FormGroup({\n                        dateRangeInterval: new FormControl(null, Validators.required, null)\n                    },                                                 Validators.required);\n                    break;\n                case 'boolean':\n                    formBuilderGroup.typeFilteringGroup = new FormGroup({\n                        typeFiltering: new FormControl(null, Validators.required, null)\n                    },                                                  Validators.required);\n                    break;\n                case 'task':\n                    formBuilderGroup.taskGroup = new FormGroup({\n                        taskName: new FormControl(null, Validators.required, null)\n                    },                                         Validators.required);\n                    break;\n                case 'integer':\n                    formBuilderGroup.processInstanceGroup = new FormGroup({\n                        slowProcessInstanceInteger: new FormControl(null, Validators.required, null)\n                    },                                                    Validators.required);\n                    break;\n                case 'status':\n                    formBuilderGroup.statusGroup = new FormGroup({\n                        status: new FormControl(null, Validators.required, null)\n                    },                                           Validators.required);\n                    break;\n                default:\n                    return;\n            }\n        });\n        this.reportForm = this.formBuilder.group(formBuilderGroup);\n        this.reportForm.valueChanges.subscribe(data => this.onValueChanged(data));\n        this.reportForm.statusChanges.subscribe(data => this.onStatusChanged(data));\n    }\n\n    public getReportParams(reportId: string) {\n        this.reportParamsSub = this.analyticsService.getReportParams(reportId).subscribe(\n            (res: ReportParametersModel) => {\n                this.reportParameters = res;\n                if (this.reportParameters.hasParameters()) {\n                    this.onSuccessReportParams.emit(res);\n                } else {\n                    this.reportForm = this.formBuilder.group({});\n                    this.onSuccess.emit();\n                }\n            },\n            (err: any) => {\n                this.onError.emit(err);\n            }\n        );\n    }\n\n    private retrieveParameterOptions(parameters: ReportParameterDetailsModel[], appId: string, reportId?: string, processDefinitionId?: string) {\n        parameters.forEach((param) => {\n            this.analyticsService.getParamValuesByType(param.type, appId, reportId, processDefinitionId).subscribe(\n                (opts: ParameterValueModel[]) => {\n                    param.options = opts;\n                    this.onSuccessParamOpt.emit(opts);\n                },\n                (err: any) => {\n                    this.onError.emit(err);\n                }\n            );\n        });\n    }\n\n    onProcessDefinitionChanges(field: any) {\n        if (field.value) {\n            this.onDropdownChanged.emit(field);\n        }\n    }\n\n    public submit(values: any) {\n        this.reportParamQuery = this.convertFormValuesToReportParamQuery(values);\n        this.onSuccess.emit(this.reportParamQuery);\n    }\n\n    onValueChanged(values: any) {\n        this.onFormValueChanged.emit(values);\n        if (this.reportForm && this.reportForm.valid) {\n            this.submit(values);\n        }\n    }\n\n    onStatusChanged(status: any) {\n        if (this.reportForm && !this.reportForm.pending && this.reportForm.dirty) {\n            this.formValidState = this.reportForm.valid;\n        }\n    }\n\n    public convertMomentDate(date: string) {\n        return moment(date, AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI, true)\n                .format(AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI) + 'T00:00:00.000Z';\n    }\n\n    public getTodayDate() {\n        return moment().format(AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI);\n    }\n\n    public convertNumber(value: string): number {\n        return value != null ? parseInt(value, 10) : 0;\n    }\n\n    convertFormValuesToReportParamQuery(values: any): ReportQuery {\n        let reportParamQuery: ReportQuery = new ReportQuery();\n        if (values.dateRange) {\n            reportParamQuery.dateRange.startDate = this.convertMomentDate(values.dateRange.startDate);\n            reportParamQuery.dateRange.endDate = this.convertMomentDate(values.dateRange.endDate);\n        }\n        if (values.statusGroup) {\n            reportParamQuery.status = values.statusGroup.status;\n        }\n        if (values.processDefGroup) {\n            reportParamQuery.processDefinitionId = values.processDefGroup.processDefinitionId;\n        }\n        if (values.taskGroup) {\n            reportParamQuery.taskName = values.taskGroup.taskName;\n        }\n        if (values.durationGroup) {\n            reportParamQuery.duration = values.durationGroup.duration;\n        }\n        if (values.dateIntervalGroup) {\n            reportParamQuery.dateRangeInterval = values.dateIntervalGroup.dateRangeInterval;\n        }\n        if (values.processInstanceGroup) {\n            reportParamQuery.slowProcessInstanceInteger = this.convertNumber(values.processInstanceGroup.slowProcessInstanceInteger);\n        }\n        if (values.typeFilteringGroup) {\n            reportParamQuery.typeFiltering = values.typeFilteringGroup.typeFiltering;\n        }\n        return reportParamQuery;\n    }\n\n    ngOnDestroy() {\n        this.dropDownSub.unsubscribe();\n        this.paramOpts.unsubscribe();\n        if (this.reportParamsSub) {\n            this.reportParamsSub.unsubscribe();\n        }\n    }\n\n    public editEnable() {\n        this.isEditable = true;\n    }\n\n    public editDisable() {\n        this.isEditable = false;\n    }\n\n    public editTitle() {\n        this.reportParamsSub = this.analyticsService.updateReport(this.reportParameters.id, this.reportParameters.name).subscribe(\n            (res: ReportParametersModel) => {\n                this.editDisable();\n                this.onEdit.emit(this.reportParameters.name);\n            },\n            (err: any) => {\n                this.onError.emit(err);\n            }\n        );\n    }\n\n    public showDialog(event: string) {\n        if (!this.reportNameDialog.nativeElement.showModal) {\n            dialogPolyfill.registerDialog(this.reportNameDialog.nativeElement);\n        }\n        this.reportNameDialog.nativeElement.showModal();\n        this.action = event;\n        this.reportName = this.reportParameters.name + ' ( ' + this.getTodayDate() + ' )';\n    }\n\n    closeDialog() {\n        if (this.reportNameDialog) {\n            this.reportNameDialog.nativeElement.close();\n        }\n    }\n\n    performAction(action: string, reportParamQuery: ReportQuery) {\n        reportParamQuery.reportName = this.reportName;\n        this.closeDialog();\n        if (action === 'Save') {\n            this.doSave(reportParamQuery);\n        } else if (action === 'Export') {\n            this.doExport(reportParamQuery);\n        }\n        this.resetActions();\n    }\n\n    resetActions() {\n        this.action = '';\n        this.reportName = '';\n    }\n\n    isSaveAction() {\n        return this.action === 'Save';\n    }\n\n    isFormValid() {\n        return this.reportForm && this.reportForm.dirty && this.reportForm.valid;\n    }\n\n    doExport(paramQuery: ReportQuery) {\n        this.analyticsService.exportReportToCsv(this.reportId, paramQuery).subscribe(\n            (data: any) => {\n                let blob: Blob = new Blob([data], {type: 'text/csv'});\n                this.contentService.downloadBlob(blob, paramQuery.reportName + '.csv');\n            });\n    }\n\n    doSave(paramQuery: ReportQuery) {\n        this.analyticsService.saveReport(this.reportId, paramQuery).subscribe(() => {\n            this.saveReportSuccess.emit(this.reportId);\n        });\n    }\n\n    deleteReport(reportId: string) {\n        this.analyticsService.deleteReport(reportId).subscribe(() => {\n            this.deleteReportSuccess.emit(reportId);\n        },                                                     error => this.logService.error(error));\n    }\n\n    ngAfterViewChecked() {\n        if (componentHandler) {\n            componentHandler.upgradeAllRegistered();\n        }\n    }\n\n    ngAfterContentChecked() {\n        if (this.reportForm && this.reportForm.valid) {\n            this.reportForm.markAsDirty();\n        }\n    }\n\n    toggleParameters() {\n        this.hideParameters = !this.hideParameters;\n    }\n\n    isParametersHide() {\n        return this.hideParameters;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/analytics-report-parameters.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ReportQuery } from 'ng2-activiti-diagrams';\nimport { AnalyticsGeneratorComponent } from './analytics-generator.component';\n\n@Component({\n    selector: 'adf-analytics, activiti-analytics',\n    template: require('./analytics.component.html'),\n    styles: [require('./analytics.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AnalyticsComponent implements OnChanges {\n\n    @Input()\n    appId: number;\n\n    @Input()\n    reportId: number;\n\n    @Input()\n    hideParameters: boolean = false;\n\n    @Output()\n    editReport = new EventEmitter();\n\n    @Output()\n    reportSaved = new EventEmitter();\n\n    @Output()\n    reportDeleted = new EventEmitter();\n\n    @ViewChild('analyticsgenerator')\n    analyticsgenerator: AnalyticsGeneratorComponent;\n\n    reportParamQuery: ReportQuery;\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.analyticsgenerator.reset();\n    }\n\n    public showReport($event) {\n        this.analyticsgenerator.generateReport(this.reportId, $event);\n    }\n\n    public reset() {\n        this.analyticsgenerator.reset();\n    }\n\n    public onEditReport(name: string) {\n        this.editReport.emit(name);\n    }\n\n    public onSaveReportSuccess(reportId) {\n        this.reportSaved.emit(reportId);\n    }\n\n    public onDeleteReportSuccess() {\n        this.reportDeleted.emit();\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/analytics.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CheckboxWidgetComponent } from './checkbox/checkbox.widget';\nimport { DateRangeWidgetComponent } from './date-range/date-range.widget';\nimport { DropdownWidgetComponent } from './dropdown/dropdown.widget';\nimport { DurationWidgetComponent } from './duration/duration.widget';\nimport { NumberWidgetComponent } from './number/number.widget';\n\n// primitives\nexport * from './dropdown/dropdown.widget';\nexport * from './number/number.widget';\nexport * from './duration/duration.widget';\nexport * from './checkbox/checkbox.widget';\nexport * from './date-range/date-range.widget';\n\nexport const WIDGET_DIRECTIVES: any[] = [\n    DropdownWidgetComponent,\n    NumberWidgetComponent,\n    DurationWidgetComponent,\n    CheckboxWidgetComponent,\n    DateRangeWidgetComponent\n];\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/widgets/index.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 14\n// module chunks = 0 1 2 3 5","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n/* tslint:disable::no-access-missing-member */\nimport { Component, ElementRef, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'number-widget',\n    template: require('./number.widget.html'),\n    styles: [require('./number.widget.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class NumberWidgetComponent extends WidgetComponent implements OnInit {\n\n    @Input()\n    field: any;\n\n    @Input('group')\n    public formGroup: FormGroup;\n\n    @Input('controllerName')\n    public controllerName: string;\n\n    @Input()\n    required: boolean = false;\n\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    ngOnInit() {\n        if (this.required) {\n            this.formGroup.get(this.controllerName).setValidators(Validators.required);\n        }\n    }\n\n    setupMaterialComponents(handler: any): boolean {\n        // workaround for MDL issues with dynamic components\n        if (handler) {\n            handler.upgradeAllRegistered();\n            if (this.elementRef && this.hasValue()) {\n                let container = this.elementRef.nativeElement.querySelector('.mdl-textfield');\n                if (container && container.MaterialTextfield) {\n                    container.MaterialTextfield.change(this.field.value.toString());\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/widgets/number/number.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterViewInit, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nlet componentHandler: any;\n\n/**\n * Base widget component.\n */\nexport class WidgetComponent implements AfterViewInit, OnChanges {\n\n    @Input()\n    field: any;\n\n    @Output()\n    fieldChanged: EventEmitter<any> = new EventEmitter<any>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        let field = changes['field'];\n        if (field && field.currentValue) {\n            this.fieldChanged.emit(field.currentValue.value);\n            return;\n        }\n    }\n\n    hasField() {\n        return this.field ? true : false;\n    }\n\n    hasValue(): boolean {\n        return this.field &&\n            this.field.value !== null &&\n            this.field.value !== undefined;\n    }\n\n    changeValue(field: any) {\n        this.fieldChanged.emit(field);\n    }\n\n    ngAfterViewInit() {\n        this.setupMaterialComponents(componentHandler);\n    }\n\n    setupMaterialComponents(handler?: any): boolean {\n        // workaround for MDL issues with dynamic components\n        if (handler) {\n            handler.upgradeAllRegistered();\n            return true;\n        }\n        return false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/widgets/widget.component.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Rx\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n/* tslint:disable:no-access-missing-member */\nimport { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'checkbox-widget',\n    template: require('./checkbox.widget.html'),\n    encapsulation: ViewEncapsulation.None\n})\nexport class CheckboxWidgetComponent extends WidgetComponent {\n\n    @Input()\n    field: any;\n\n    @Input('group')\n    public formGroup: FormGroup;\n\n    @Input('controllerName')\n    public controllerName: string;\n\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/widgets/checkbox/checkbox.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DateAdapter, MD_DATE_FORMATS } from '@angular/material';\nimport * as moment from 'moment';\nimport { Moment } from 'moment';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter } from 'ng2-alfresco-core';\n\n@Component({\n    selector: 'adf-date-range-widget',\n    template: require('./date-range.widget.html'),\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter},\n        {provide: MD_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}],\n    styles: [require('./date-range.widget.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DateRangeWidgetComponent implements OnInit {\n\n    public FORMAT_DATE_ACTIVITI: string = 'YYYY-MM-DD';\n    public SHOW_FORMAT: string = 'DD/MM/YYYY';\n\n    @Input('group')\n    public dateRange: FormGroup;\n\n    @Input()\n    field: any;\n\n    @Output()\n    dateRangeChanged: EventEmitter<any> = new EventEmitter<any>();\n\n    minDate: Moment;\n    maxDate: Moment;\n    startDatePicker: Moment;\n    endDatePicker: Moment;\n\n    constructor(public dateAdapter: DateAdapter<Moment>) {\n    }\n\n    ngOnInit() {\n        let momentDateAdapter = <MomentDateAdapter> this.dateAdapter;\n        momentDateAdapter.overrideDisplyaFormat = this.SHOW_FORMAT;\n\n        if (this.field) {\n            if (this.field.value && this.field.value.startDate) {\n                this.startDatePicker = moment(this.field.value.startDate, this.FORMAT_DATE_ACTIVITI);\n            }\n\n            if (this.field.value && this.field.value.endDate) {\n                this.endDatePicker = moment(this.field.value.endDate, this.FORMAT_DATE_ACTIVITI);\n            }\n        }\n\n        let startDateControl = new FormControl(this.startDatePicker);\n        startDateControl.setValidators(Validators.required);\n        this.dateRange.addControl('startDate', startDateControl);\n\n        let endDateControl = new FormControl(this.endDatePicker);\n        endDateControl.setValidators(Validators.required);\n        this.dateRange.addControl('endDate', endDateControl);\n\n        this.dateRange.setValidators(this.dateCheck);\n        this.dateRange.valueChanges.subscribe(() => this.onGroupValueChanged());\n    }\n\n    onGroupValueChanged() {\n        if (this.dateRange.valid) {\n            let dateStart = this.convertToMomentDateWithTime(this.dateRange.controls.startDate.value);\n            let endStart = this.convertToMomentDateWithTime(this.dateRange.controls.endDate.value);\n            this.dateRangeChanged.emit({startDate: dateStart, endDate: endStart});\n        }\n    }\n\n    convertToMomentDateWithTime(date: string) {\n        return moment(date, this.FORMAT_DATE_ACTIVITI, true).format(this.FORMAT_DATE_ACTIVITI) + 'T00:00:00.000Z';\n    }\n\n    dateCheck(formControl: AbstractControl) {\n        let startDate = moment(formControl.get('startDate').value);\n        let endDate = moment(formControl.get('endDate').value);\n        let result = startDate.isAfter(endDate);\n        return result ? {'greaterThan': true} : null;\n    }\n\n    isStartDateGreaterThanEndDate() {\n        return this.dateRange && this.dateRange.errors && this.dateRange.errors.greaterThan;\n    }\n\n    isStartDateEmpty() {\n        return this.dateRange && this.dateRange.controls.startDate && !this.dateRange.controls.startDate.valid;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n/* tslint:disable::no-access-missing-member */\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { WidgetComponent } from './../widget.component';\n\n@Component({\n    selector: 'dropdown-widget',\n    template: require('./dropdown.widget.html'),\n    styles: [require('./dropdown.widget.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DropdownWidgetComponent extends WidgetComponent implements OnInit {\n\n    @Input()\n    field: any;\n\n    @Input('group')\n    public formGroup: FormGroup;\n\n    @Input('controllerName')\n    public controllerName: string;\n\n    @Output()\n    fieldChanged: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    showDefaultOption: boolean = true;\n\n    @Input()\n    required: boolean = false;\n\n    @Input()\n    defaultOptionText: string = 'Choose One';\n\n    constructor() {\n        super();\n    }\n\n    ngOnInit() {\n        if (this.required) {\n            this.formGroup.get(this.controllerName).setValidators(Validators.compose(this.buildValidatorList()));\n        }\n    }\n\n    validateDropDown(controller: FormControl) {\n        return controller.value !== 'null' ? null : { controllerName: false };\n    }\n\n    buildValidatorList() {\n        let validatorList = [];\n        validatorList.push(Validators.required);\n        if (this.showDefaultOption) {\n            validatorList.push(this.validateDropDown);\n        }\n        return validatorList;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n/* tslint:disable::no-access-missing-member */\nimport { Component, ElementRef, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ParameterValueModel, ReportParameterDetailsModel } from 'ng2-activiti-diagrams';\nimport { NumberWidgetComponent } from './../number/number.widget';\n\n@Component({\n    selector: 'duration-widget',\n    template: require('./duration.widget.html'),\n    styles: [require('./duration.widget.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DurationWidgetComponent extends NumberWidgetComponent implements OnInit {\n\n    @Input()\n    field: any;\n\n    @Input('group')\n    public formGroup: FormGroup;\n\n    @Input('controllerName')\n    public controllerName: string;\n\n    @Input()\n    required: boolean = false;\n\n    duration: ReportParameterDetailsModel;\n    currentValue: number;\n\n    public selectionGroup: FormGroup;\n\n    constructor(public elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        let timeType = new FormControl();\n        this.formGroup.addControl('timeType', timeType);\n\n        if (this.required) {\n            this.formGroup.get(this.controllerName).setValidators(Validators.required);\n        }\n        if (this.field.value === null) {\n            this.field.value = 0;\n        }\n\n        let paramOptions: ParameterValueModel[] = [];\n        paramOptions.push(new ParameterValueModel({id: '1', name: 'Seconds'}));\n        paramOptions.push(new ParameterValueModel({id: '60', name: 'Minutes'}));\n        paramOptions.push(new ParameterValueModel({id: '3600', name: 'Hours'}));\n        paramOptions.push(new ParameterValueModel({id: '86400', name: 'Days', selected: true}));\n\n        this.duration = new ReportParameterDetailsModel({id: 'duration', name: 'duration', options: paramOptions});\n        this.duration.value = paramOptions[0].id;\n    }\n\n    public calculateDuration() {\n        if (this.field && this.duration.value ) {\n            this.currentValue = parseInt(this.field.value, 10) * parseInt(this.duration.value, 10);\n            this.formGroup.get(this.controllerName).setValue(this.currentValue);\n            this.fieldChanged.emit({value: this.currentValue});\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 3\n// module chunks = 1 2 3 4 5 6 7 8 9 11 12 13 14","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { AnalyticsService } from '../services/analytics.service';\n\n@Component({\n    selector: 'adf-analytics-report-heat-map, analytics-report-heat-map',\n    template: require('./analytics-report-heat-map.component.html')\n})\nexport class AnalyticsReportHeatMapComponent implements  OnInit {\n\n    @Input()\n    report: any;\n\n    @Output()\n    onSuccess = new EventEmitter();\n\n    @Output()\n    onError = new EventEmitter();\n\n    field: any = {};\n\n    metricForm: FormGroup;\n    currentMetric: string;\n    currentMetricColors: string;\n    metricType: string;\n\n    constructor(private analyticsService: AnalyticsService,\n                private formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.initForm();\n        this.field.id = 'metrics';\n        this.field.value = 'totalCount';\n\n        this.analyticsService.getMetricValues().subscribe(\n            (opts: any[]) => {\n                this.field.options = opts;\n                this.onSuccess.emit(opts);\n            }\n        );\n    }\n\n    onMetricChanges(field: any) {\n        if (field.value === 'totalCount') {\n            this.currentMetric = this.report.totalCountValues;\n            this.currentMetricColors = this.report.totalCountsPercentages;\n            this.metricType = 'times';\n        } else if (field.value === 'totalTime') {\n            this.currentMetric = this.report.totalTimeValues;\n            this.currentMetricColors = this.report.totalTimePercentages;\n            this.metricType = 'hours';\n        } else if (field.value === 'avgTime') {\n            this.currentMetric = this.report.avgTimeValues;\n            this.currentMetricColors = this.report.avgTimePercentages;\n            this.metricType = 'hours';\n        }\n    }\n\n    initForm() {\n        this.metricForm = this.formBuilder.group({\n            metricGroup: new FormGroup({\n                metric: new FormControl()\n            })\n        });\n    }\n\n    hasMetric() {\n        return (this.report.totalCountsPercentages ||\n        this.report.totalTimePercentages ||\n        this.report.avgTimePercentages) ? true : false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/analytics-report-heat-map.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MdButtonModule, MdDatepickerModule, MdGridListModule,\n    MdIconModule, MdInputModule, MdNativeDateModule, MdTooltipModule } from '@angular/material';\n\nexport function modules() {\n    return [\n        MdButtonModule,\n        MdInputModule,\n        MdIconModule,\n        MdTooltipModule,\n        MdNativeDateModule,\n        MdDatepickerModule,\n        MdGridListModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/material.module.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { ParameterValueModel, ReportParametersModel } from 'ng2-activiti-diagrams';\nimport {\n    BarChart,\n    Chart,\n    DetailsTableChart,\n    HeatMapChart,\n    MultiBarChart,\n    PieChart,\n    TableChart\n} from 'ng2-activiti-diagrams';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class AnalyticsService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Retrive all the Deployed app\n     * @returns {Observable<any>}\n     */\n    getReportList(appId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getReportList())\n            .map((res: any) => {\n                let reports: ReportParametersModel[] = [];\n                res.forEach((report: ReportParametersModel) => {\n                    let reportModel = new ReportParametersModel(report);\n                    if (this.isReportValid(appId, report)) {\n                        reports.push(reportModel);\n                    }\n                });\n                return reports;\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrive Report by name\n     * @param reportName - string - The name of report\n     * @returns {Observable<any>}\n     */\n    getReportByName(reportName: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getReportList())\n            .map((response: any) => {\n                return response.find(report => report.name === reportName);\n            }).catch(err => this.handleError(err));\n    }\n\n    private isReportValid(appId: string, report: ReportParametersModel) {\n        let isValid: boolean = true;\n        if (appId && appId !== '0' && report.name.includes('Process definition overview')) {\n            isValid = false;\n        }\n        return isValid;\n    }\n\n    getReportParams(reportId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getReportParams(reportId))\n            .map((res: any) => {\n                return new ReportParametersModel(res);\n            }).catch(err => this.handleError(err));\n    }\n\n    getParamValuesByType(type: string, appId: string, reportId?: string, processDefinitionId?: string) {\n        if (type === 'status') {\n            return this.getProcessStatusValues();\n        } else if (type === 'processDefinition') {\n            if (appId === null || appId === undefined) {\n                return this.getProcessDefinitionsValuesNoApp();\n            } else {\n                return this.getProcessDefinitionsValues(appId);\n            }\n        } else if (type === 'dateInterval') {\n            return this.getDateIntervalValues();\n        } else if (type === 'task' && reportId && processDefinitionId) {\n            return this.getTasksByProcessDefinitionId(reportId, processDefinitionId);\n        } else {\n            return Observable.create(observer => {\n                observer.next(null);\n                observer.complete();\n            });\n        }\n    }\n\n    getProcessStatusValues(): Observable<any> {\n        let paramOptions: ParameterValueModel[] = [];\n\n        paramOptions.push(new ParameterValueModel({id: 'All', name: 'All'}));\n        paramOptions.push(new ParameterValueModel({id: 'Active', name: 'Active'}));\n        paramOptions.push(new ParameterValueModel({id: 'Complete', name: 'Complete'}));\n\n        return Observable.create(observer => {\n            observer.next(paramOptions);\n            observer.complete();\n        });\n    }\n\n    getDateIntervalValues(): Observable<any> {\n        let paramOptions: ParameterValueModel[] = [];\n\n        paramOptions.push(new ParameterValueModel({id: 'byHour', name: 'By hour'}));\n        paramOptions.push(new ParameterValueModel({id: 'byDay', name: 'By day'}));\n        paramOptions.push(new ParameterValueModel({id: 'byWeek', name: 'By week'}));\n        paramOptions.push(new ParameterValueModel({id: 'byMonth', name: 'By month'}));\n        paramOptions.push(new ParameterValueModel({id: 'byYear', name: 'By year'}));\n\n        return Observable.create(observer => {\n            observer.next(paramOptions);\n            observer.complete();\n        });\n    }\n\n    getMetricValues(): Observable<any> {\n        let paramOptions: ParameterValueModel[] = [];\n\n        paramOptions.push(new ParameterValueModel({id: 'totalCount', name: 'Number of times a step is executed'}));\n        paramOptions.push(new ParameterValueModel({id: 'totalTime', name: 'Total time spent in a process step'}));\n        paramOptions.push(new ParameterValueModel({id: 'avgTime', name: 'Average time spent in a process step'}));\n\n        return Observable.create(observer => {\n            observer.next(paramOptions);\n            observer.complete();\n        });\n    }\n\n    getProcessDefinitionsValuesNoApp(): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getProcessDefinitions())\n            .map((res: any) => {\n                let paramOptions: ParameterValueModel[] = [];\n                res.forEach((opt) => {\n                    paramOptions.push(new ParameterValueModel(opt));\n                });\n                return paramOptions;\n            }).catch(err => this.handleError(err));\n    }\n\n    getProcessDefinitionsValues(appId: string): Observable<any> {\n        let options = {'appDefinitionId': appId};\n        return Observable.fromPromise(this.apiService.getInstance().activiti.processDefinitionsApi.getProcessDefinitions(options))\n            .map((res: any) => {\n                let paramOptions: ParameterValueModel[] = [];\n                res.data.forEach((opt) => {\n                    paramOptions.push(new ParameterValueModel(opt));\n                });\n                return paramOptions;\n            }).catch(err => this.handleError(err));\n    }\n\n    getTasksByProcessDefinitionId(reportId: string, processDefinitionId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getTasksByProcessDefinitionId(reportId, processDefinitionId))\n            .map((res: any) => {\n                let paramOptions: ParameterValueModel[] = [];\n                res.forEach((opt) => {\n                    paramOptions.push(new ParameterValueModel({id: opt, name: opt}));\n                });\n                return paramOptions;\n            }).catch(err => this.handleError(err));\n    }\n\n    getReportsByParams(reportId: number, paramsQuery: any): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getReportsByParams(reportId, paramsQuery))\n            .map((res: any) => {\n                let elements: Chart[] = [];\n                res.elements.forEach((chartData) => {\n                    if (chartData.type === 'pieChart') {\n                        elements.push(new PieChart(chartData));\n                    } else if (chartData.type === 'table') {\n                        elements.push(new TableChart(chartData));\n                    } else if (chartData.type === 'processDefinitionHeatMap') {\n                        elements.push(new HeatMapChart(chartData));\n                    } else if (chartData.type === 'masterDetailTable') {\n                        elements.push(new DetailsTableChart(chartData));\n                    } else if (chartData.type === 'barChart') {\n                        elements.push(new BarChart(chartData));\n                    } else if (chartData.type === 'multiBarChart') {\n                        elements.push(new MultiBarChart(chartData));\n                    }\n                });\n\n                return elements;\n            }).catch(err => this.handleError(err));\n    }\n\n    createDefaultReports(): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.createDefaultReports())\n            .map(this.toJson)\n            .catch(err => this.handleError(err));\n    }\n\n    updateReport(reportId: number, name: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.updateReport(reportId, name))\n            .map((res: any) => {\n                this.logService.info('upload');\n            }).catch(err => this.handleError(err));\n    }\n\n    exportReportToCsv(reportId: string, paramsQuery: any): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.exportToCsv(reportId, paramsQuery))\n            .map((res: any) => {\n                this.logService.info('export');\n                return res;\n            }).catch(err => this.handleError(err));\n    }\n\n    saveReport(reportId: string, paramsQuery: any): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.saveReport(reportId, paramsQuery))\n            .map(() => {\n                this.logService.info('save');\n            }).catch(err => this.handleError(err));\n    }\n\n    deleteReport(reportId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.deleteReport(reportId))\n            .map(() => {\n                this.logService.info('delete');\n            }).catch(err => this.handleError(err));\n    }\n\n    private handleError(error: Response) {\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n\n    toJson(res: any) {\n        return res || {};\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/services/analytics.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_389__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-charts\"\n// module id = 389\n// module chunks = 5","module.exports = \"<div *ngIf=\\\"reports\\\">\\n    <div class=\\\"report-icons\\\">\\n        <button md-icon-button\\n                *ngFor=\\\"let report of reports; let idx = index\\\"\\n                [mdTooltip]=\\\"report.title\\\"\\n                [color]=\\\"isCurrent(idx) ? 'primary' : null\\\"\\n                (click)=\\\"selectCurrent(idx)\\\">\\n            <md-icon>{{report.icon}}</md-icon>\\n        </button>\\n    </div>\\n    <div class=\\\"clear-both\\\"> </div>\\n    <div *ngFor=\\\"let report of reports; let idx = index\\\">\\n        <div [ngSwitch]=\\\"report.type\\\">\\n            <div *ngSwitchCase=\\\"'pie'\\\">\\n                <div class=\\\"col-md-6\\\" *ngIf=\\\"isCurrent(idx)\\\">\\n                    <h4>{{report.title}}</h4>\\n                    <div *ngIf=\\\"!report.hasData()\\\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\\n                    <div *ngIf=\\\"report.hasData()\\\">\\n                        <div *ngIf=\\\"report.hasZeroValues()\\\">{{'ANALYTICS.MESSAGES.ZERO-DATA-FOUND' | translate}}</div>\\n                        <canvas baseChart *ngIf=\\\"!report.hasZeroValues()\\\" class=\\\"chart\\\"\\n                                [data]=\\\"report.data\\\"\\n                                [labels]=\\\"report.labels\\\"\\n                                [chartType]=\\\"report.type\\\">\\n                        </canvas>\\n                    </div>\\n                </div>\\n            </div>\\n            <div *ngSwitchCase=\\\"'table'\\\" >\\n                <div *ngIf=\\\"isCurrent(idx)\\\">\\n                    <h4>{{report.title}}</h4>\\n                    <div *ngIf=\\\"!report.hasDatasets()\\\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\\n                    <div [attr.id]=\\\"'chart-table-' + report.id\\\" *ngIf=\\\"report.hasDatasets()\\\">\\n                        <table class=\\\"table table-responsive table-condensed\\\" class=\\\"partial-width\\\">\\n                            <tr>\\n                                <th *ngFor=\\\"let label of report.labels\\\">{{label | translate}}</th>\\n                            </tr>\\n                            <tr *ngFor=\\\"let rows of report.datasets\\\">\\n                                <td *ngFor=\\\"let row of rows\\\">{{row | translate }}</td>\\n                            </tr>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n            <div *ngSwitchCase=\\\"'masterDetailTable'\\\" >\\n                <div *ngIf=\\\"isCurrent(idx)\\\">\\n                    <h4>{{report.title}}</h4>\\n                    <div *ngIf=\\\"!report.hasDatasets()\\\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\\n                    <div [attr.id]=\\\"'chart-master-detail-table-' + report.id\\\" *ngIf=\\\"report.hasDatasets()\\\">\\n                        <table class=\\\"table table-responsive table-condensed\\\" class=\\\"full-width\\\">\\n                            <tr>\\n                                <th *ngFor=\\\"let label of report.labels\\\">{{label | translate}}</th>\\n                            </tr>\\n                            <tr *ngFor=\\\"let rows of report.datasets\\\" class=\\\"analytics-row__entry\\\">\\n                                <td *ngFor=\\\"let row of rows\\\" (click)=\\\"toggleDetailsTable()\\\">{{row | translate }}</td>\\n                            </tr>\\n                        </table>\\n                    </div>\\n                    <div [attr.id]=\\\"'chart-master-detail-' + report.id\\\" *ngIf=\\\"isShowDetails()\\\">\\n                        <table class=\\\"table table-responsive table-condensed\\\" class=\\\"full-width\\\">\\n                            <tr>\\n                                <th *ngFor=\\\"let label of report.detailsTable.labels\\\">{{label | translate}}</th>\\n                            </tr>\\n                            <tr *ngFor=\\\"let rows of report.detailsTable.datasets\\\">\\n                                <td *ngFor=\\\"let row of rows\\\">{{row | translate }}</td>\\n                            </tr>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n            <div *ngSwitchCase=\\\"'bar'\\\">\\n                <div class=\\\"col-md-6\\\" *ngIf=\\\"isCurrent(idx)\\\">\\n                    <h4>{{report.title}}</h4>\\n                    <div *ngIf=\\\"!report.hasDatasets()\\\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\\n                    <canvas baseChart *ngIf=\\\"report.hasDatasets()\\\" class=\\\"chart\\\"\\n                            [datasets]=\\\"report.datasets\\\"\\n                            [labels]=\\\"report.labels\\\"\\n                            [options]=\\\"report.options\\\"\\n                            [chartType]=\\\"report.type\\\">\\n                    </canvas>\\n                </div>\\n            </div>\\n            <div *ngSwitchCase=\\\"'multiBar'\\\">\\n                <div class=\\\"col-md-6\\\" *ngIf=\\\"isCurrent(idx)\\\">\\n                    <h4>{{report.title}}</h4>\\n                    <div *ngIf=\\\"!report.hasDatasets()\\\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\\n                    <div *ngIf=\\\"report.hasDatasets()\\\">\\n                        <label class=\\\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\\\" [attr.for]=\\\"'stacked-id'\\\">\\n                            <input type=\\\"checkbox\\\" [attr.id]=\\\"'stacked-id'\\\" class=\\\"mdl-checkbox__input\\\"\\n                                   [checked]=\\\"report.options.scales.xAxes[0].stacked\\\"\\n                                   [(ngModel)]=\\\"report.options.scales.xAxes[0].stacked\\\"\\n                                   (change)=\\\"refresh(report)\\\">\\n                            <span class=\\\"mdl-checkbox__label\\\">Stacked</span>\\n                        </label>\\n                        <canvas baseChart class=\\\"chart\\\"\\n                                [datasets]=\\\"report.datasets\\\"\\n                                [labels]=\\\"report.labels\\\"\\n                                [options]=\\\"report.options\\\"\\n                                [chartType]=\\\"'bar'\\\">\\n                        </canvas>\\n                    </div>\\n                </div>\\n            </div>\\n            <div *ngSwitchCase=\\\"'HeatMap'\\\">\\n                <div *ngIf=\\\"isCurrent(idx)\\\">\\n                    <h4>{{report.title}}</h4>\\n                    <analytics-report-heat-map [report]=\\\"report\\\"></analytics-report-heat-map>\\n                </div>\\n            </div>\\n            <div *ngSwitchDefault>\\n                <span>{{'ANALYTICS.MESSAGES.UNKNOWN-WIDGET-TYPE' | translate}}: {{report.type}}</span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<br><br><br>\\n<div *ngIf=\\\"!reports\\\">{{'ANALYTICS.MESSAGES.FILL-PARAMETER' | translate}}</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics-generator.component.html\n// module id = 481\n// module chunks = 5","module.exports = \"<h4>Process Heat map</h4>\\n<div *ngIf=\\\"hasMetric()\\\">\\n    <form [formGroup]=\\\"metricForm\\\" novalidate>\\n        <dropdown-widget [field]=\\\"field\\\" [group]=\\\"metricForm.controls.metricGroup\\\" [controllerName]=\\\"'metric'\\\"\\n                         (fieldChanged)=\\\"onMetricChanges(field)\\\" [showDefaultOption]=\\\"false\\\"></dropdown-widget>\\n    </form>\\n    <adf-diagram *ngIf=\\\"currentMetric\\\" [processDefinitionId]=\\\"report.processDefinitionId\\\" [metricPercentages]=\\\"currentMetric\\\" [metricColor]=\\\"currentMetricColors\\\" [metricType]=\\\"metricType\\\"></adf-diagram>\\n</div>\\n<div *ngIf=\\\"!hasMetric()\\\">No metric found</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics-report-heat-map.component.html\n// module id = 482\n// module chunks = 5","module.exports = \"<div class=\\\"adf-analytics-report-list menu-container\\\">\\n    <ul class='mdl-list' *ngIf=\\\"isList()\\\">\\n        <li class=\\\"mdl-list__item activiti-filters__entry\\\" (click)=\\\"selectReport(report)\\\" *ngFor=\\\"let report of reports; let idx = index\\\"\\n            [class.active]=\\\"currentReport === report\\\">\\n            <span [attr.id]=\\\"'report-list-' + idx\\\" class=\\\"mdl-list__item-primary-content\\\">\\n            <i class=\\\"material-icons mdl-list__item-icon activiti-filters__entry-icon\\\" [attr.data-automation-id]=\\\"report.name + '_filter'\\\">assignment</i>\\n            <span class=\\\"text\\\">{{report.name}}</span>\\n            </span>\\n        </li>\\n    </ul>\\n    <div class=\\\"mdl-grid\\\" *ngIf=\\\"isGrid()\\\">\\n        <div (click)=\\\"selectReport(report)\\\" [ngClass]=\\\"['mdl-card mdl-cell', 'theme-1']\\\" *ngFor=\\\"let report of reports;\\\">\\n            <div class=\\\"logo\\\"><i class=\\\"material-icons\\\">equalizer</i></div>\\n            <div class=\\\"mdl-card__title\\\">\\n                <h1 class=\\\"mdl-card__title-text application-title\\\">{{report.name}}</h1>\\n            </div>\\n            <div class=\\\"mdl-card__supporting-text\\\">\\n                <p>{{report.description}}</p>\\n            </div>\\n            <div class=\\\"mdl-card__actions mdl-card--border\\\">\\n                <i class=\\\"material-icons selectedIcon\\\" *ngIf=\\\"isSelected(report)\\\">done</i>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics-report-list.component.html\n// module id = 483\n// module chunks = 5","module.exports = \"<div [class.hide]=\\\"hideComponent\\\">\\n    <div class=\\\"adf-report-report-container\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <div *ngIf=\\\"reportParameters\\\">\\n                <form [formGroup]=\\\"reportForm\\\" novalidate>\\n                    <adf-toolbar>\\n                        <adf-toolbar-title class=\\\"adf-report-title-container\\\">\\n                            <div *ngIf=\\\"isEditable\\\">\\n                                <md-input-container class=\\\"adf-full-width-input\\\">\\n                                    <input\\n                                        mdInput\\n                                        type=\\\"text\\\"\\n                                        class=\\\"adf-edit-report-title\\\"\\n                                        id=\\\"reportName\\\"\\n                                        autofocus\\n                                        data-automation-id=\\\"reportName\\\"\\n                                        [value]=\\\"reportParameters.name\\\"\\n                                        (input)=\\\"reportParameters.name=$event.target.value\\\"\\n                                        (blur)=\\\"editTitle($event)\\\"\\n                                        (keyup.enter)=\\\"editTitle($event)\\\"\\n                                    />\\n                                </md-input-container>\\n                            </div>\\n                            <div class=\\\"adf-report-title\\\" *ngIf=\\\"!isEditable\\\" (click)=\\\"editEnable()\\\">\\n                                <md-icon class=\\\"adf-report-icon\\\" >mode_edit</md-icon>\\n                                <h4>{{reportParameters.name}}</h4>\\n                            </div>\\n                        </adf-toolbar-title>\\n                        <div *ngIf=\\\"!isEditable\\\">\\n                            <button md-button mdTooltip=\\\"{{'ANALYTICS.MESSAGES.ICON-SETTING' | translate}}\\\"\\n                                    (click)=\\\"toggleParameters()\\\">\\n                                <md-icon>settings</md-icon>\\n                            </button>\\n                            <button md-button id=\\\"delete-button\\\" (click)=\\\"deleteReport(reportId)\\\"\\n                                    mdTooltip=\\\"{{'ANALYTICS.MESSAGES.ICON-DELETE' | translate}}\\\">\\n                                <md-icon>delete</md-icon>\\n                            </button>\\n                            <span *ngIf=\\\"isFormValid()\\\">\\n                                <button md-button id=\\\"export-button\\\" (click)=\\\"showDialog('Export')\\\"\\n                                        mdTooltip=\\\"{{'ANALYTICS.MESSAGES.ICON-EXPORT-CSV' | translate}}\\\">\\n                                    <md-icon>file_download</md-icon>\\n                                </button>\\n                                <button md-button id=\\\"save-button\\\" (click)=\\\"showDialog('Save')\\\"\\n                                        mdTooltip=\\\"{{'ANALYTICS.MESSAGES.ICON-SAVE' | translate}}\\\">\\n                                    <md-icon>save</md-icon>\\n                                </button>\\n                            </span>\\n                        </div>\\n                    </adf-toolbar>\\n                    <div *ngFor=\\\"let field of reportParameters.definition.parameters\\\"\\n                         [class.is-hide]=\\\"isParametersHide()\\\">\\n                        <div [ngSwitch]=\\\"field.type\\\">\\n                            <div *ngSwitchCase=\\\"'integer'\\\">\\n                                <br>\\n                                <number-widget [field]=\\\"field\\\" [group]=\\\"reportForm.controls.processInstanceGroup\\\"\\n                                               [controllerName]=\\\"'slowProcessInstanceInteger'\\\"\\n                                               [required]=\\\"true\\\"></number-widget>\\n                            </div>\\n                            <div *ngSwitchCase=\\\"'duration'\\\">\\n                                <br>\\n                                <duration-widget [field]=\\\"field\\\" [group]=\\\"reportForm.controls.durationGroup\\\"\\n                                                 [controllerName]=\\\"'duration'\\\"></duration-widget>\\n                            </div>\\n                            <div *ngSwitchCase=\\\"'boolean'\\\">\\n                                <br>\\n                                <checkbox-widget [field]=\\\"field\\\" [group]=\\\"reportForm.controls.typeFilteringGroup\\\"\\n                                                 [controllerName]=\\\"'typeFiltering'\\\"></checkbox-widget>\\n                            </div>\\n                            <div *ngSwitchCase=\\\"'status'\\\">\\n                                <br>\\n                                <dropdown-widget [field]=\\\"field\\\" [group]=\\\"reportForm.controls.statusGroup\\\"\\n                                                 [controllerName]=\\\"'status'\\\"\\n                                                 [required]=\\\"true\\\"></dropdown-widget>\\n                            </div>\\n                            <div *ngSwitchCase=\\\"'processDefinition'\\\">\\n                                <br>\\n                                <dropdown-widget [field]=\\\"field\\\" [group]=\\\"reportForm.controls.processDefGroup\\\"\\n                                                 [controllerName]=\\\"'processDefinitionId'\\\"\\n                                                 [required]=\\\"true\\\"\\n                                                 (fieldChanged)=\\\"onProcessDefinitionChanges(field)\\\"></dropdown-widget>\\n                            </div>\\n                            <div *ngSwitchCase=\\\"'task'\\\">\\n                                <br>\\n                                <dropdown-widget [field]=\\\"field\\\" [group]=\\\"reportForm.controls.taskGroup\\\"\\n                                                 [controllerName]=\\\"'taskName'\\\"\\n                                                 [required]=\\\"true\\\"></dropdown-widget>\\n                            </div>\\n                            <div *ngSwitchCase=\\\"'dateRange'\\\">\\n                                <br>\\n                                <adf-date-range-widget [field]=\\\"field\\\"\\n                                                       [group]=\\\"reportForm.controls.dateRange\\\"></adf-date-range-widget>\\n                            </div>\\n                            <div *ngSwitchCase=\\\"'dateInterval'\\\">\\n                                <br>\\n                                <dropdown-widget [field]=\\\"field\\\" [group]=\\\"reportForm.controls.dateIntervalGroup\\\"\\n                                                 [controllerName]=\\\"'dateRangeInterval'\\\"\\n                                                 [required]=\\\"true\\\" [showDefaultOption]=\\\"false\\\"></dropdown-widget>\\n                            </div>\\n                            <div *ngSwitchDefault>\\n                                <span>{{'ANALYTICS.MESSAGES.UNKNOWN-WIDGET-TYPE' | translate}}: {{field.type}}</span>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <dialog id=\\\"report-dialog\\\" class=\\\"mdl-dialog options-name-dialog\\\" #reportNameDialog>\\n                        <h5 id=\\\"report-dialog-title\\\" class=\\\"mdl-dialog__title\\\">{{action}} report</h5>\\n                        <div class=\\\"mdl-dialog__content\\\">\\n                            <div *ngIf=\\\"isSaveAction()\\\" id=\\\"save-title-submessage\\\" class=\\\"export-message\\\">\\n                                {{'DIALOG.SAVE_MESSAGE' | translate}}\\n                            </div>\\n                            <div class=\\\"mdl-textfield mdl-js-textfield save-export-input\\\">\\n                                <label id=\\\"report-name-label\\\" [attr.for]=\\\"reportName\\\">Report Name</label>\\n                                <input class=\\\"mdl-textfield__input\\\"\\n                                       type=\\\"text\\\"\\n                                       id=\\\"repName\\\"\\n                                       [attr.value]=\\\"reportName\\\"\\n                                       [(ngModel)]=\\\"reportName\\\"\\n                                       [ngModelOptions]=\\\"{standalone: true}\\\"\\n                                       placeholder=\\\"report name\\\">\\n                            </div>\\n                        </div>\\n                        <div class=\\\"mdl-dialog__actions\\\">\\n                            <button type=\\\"button\\\" id=\\\"close-dialog-button\\\" (click)=\\\"closeDialog()\\\"\\n                                    class=\\\"mdl-button close\\\">Close\\n                            </button>\\n                            <button type=\\\"button\\\" id=\\\"action-dialog-button\\\"\\n                                    (click)=\\\"performAction(action, reportParamQuery)\\\"\\n                                    class=\\\"mdl-button close\\\">{{action}}\\n                            </button>\\n                        </div>\\n                    </dialog>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics-report-parameters.component.html\n// module id = 484\n// module chunks = 5","module.exports = \"<div class=\\\"col-md-6\\\">\\n    <analytics-report-parameters [appId]=\\\"appId\\\" [reportId]=\\\"reportId\\\"\\n                                 [hideComponent]=\\\"hideParameters\\\"\\n                                 (onFormValueChanged)=\\\"reset()\\\"\\n                                 (onSuccess)=\\\"showReport($event)\\\"\\n                                 (saveReportSuccess)=\\\"onSaveReportSuccess($event)\\\"\\n                                 (deleteReportSuccess)=\\\"onDeleteReportSuccess()\\\"\\n                                 (onEdit)=\\\"onEditReport($event)\\\">\\n    </analytics-report-parameters>\\n\\n    <adf-analytics-generator [reportId]=\\\"reportId\\\"\\n                                  [reportParamQuery]=\\\"reportParamQuery\\\"\\n                                  #analyticsgenerator>\\n    </adf-analytics-generator>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics.component.html\n// module id = 485\n// module chunks = 5","module.exports = \"<label class=\\\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\\\" [attr.for]=\\\"field.id\\\" [formGroup]=\\\"formGroup\\\">\\n    <input formControlName=\\\"{{controllerName}}\\\" type=\\\"checkbox\\\"\\n           [attr.id]=\\\"field.id\\\"\\n           class=\\\"mdl-checkbox__input\\\"\\n           [checked]=\\\"field.value\\\"\\n           [(ngModel)]=\\\"field.value\\\"\\n           (ngModelChange)=\\\"changeValue(field)\\\">\\n    <span class=\\\"mdl-checkbox__label\\\">{{field.nameKey | translate}}</span>\\n</label>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/checkbox/checkbox.widget.html\n// module id = 486\n// module chunks = 5","module.exports = \"<label>{{field.nameKey | translate}}</label><br>\\n<div [formGroup]=\\\"dateRange\\\">\\n    <small *ngIf=\\\"isStartDateGreaterThanEndDate()\\\" class=\\\"adf-text-danger\\\">\\n       {{'DATE-WIDGET.MESSAGES.START-LESS-THAN-END-DATE' | translate}}\\n    </small>\\n    <small *ngIf=\\\"isStartDateEmpty()\\\" class=\\\"adf-text-danger\\\">\\n       {{'DATE-WIDGET.MESSAGES.START-DATE-REQUIRED' | translate}}\\n    </small>\\n\\n            <md-grid-list cols=\\\"2\\\" rowHeight=\\\"80px\\\">\\n                <md-grid-tile>\\n                    <md-input-container>\\n                        <input\\n                            mdInput\\n                            [min]=\\\"minDate\\\"\\n                            [max]=\\\"maxDate\\\"\\n                            formControlName=\\\"startDate\\\"\\n                            [mdDatepicker]=\\\"startDatePicker\\\"\\n                            [value]=\\\"startDatePicker\\\"\\n                            (keydown)=\\\"true\\\"\\n                            placeholder=\\\"{{'DATE-WIDGET.START-DATE' | translate}}\\\"\\n                            id=\\\"startDate_id\\\"\\n                            required>\\n                        <button mdSuffix [mdDatepickerToggle]=\\\"startDatePicker\\\"></button>\\n                    </md-input-container>\\n                    <md-datepicker\\n                        #startDatePicker\\n                        [touchUi]=\\\"true\\\"\\n                        (selectedChanged)=\\\"onGroupValueChanged()\\\">\\n                    </md-datepicker>\\n                </md-grid-tile>\\n                <md-grid-tile>\\n                    <md-input-container class=\\\"adf-start-task-input-container\\\">\\n                        <input\\n                            mdInput\\n                            [min]=\\\"minDate\\\"\\n                            [max]=\\\"maxDate\\\"\\n                            formControlName=\\\"endDate\\\"\\n                            [mdDatepicker]=\\\"endDatePicker\\\"\\n                            [value]=\\\"endDatePicker\\\"\\n                            (keydown)=\\\"true\\\"\\n                            placeholder=\\\"{{'DATE-WIDGET.END-DATE' | translate}}\\\"\\n                            id=\\\"endDate_id\\\"\\n                            required>\\n                        <button mdSuffix [mdDatepickerToggle]=\\\"endDatePicker\\\"></button>\\n                    </md-input-container>\\n                    <md-datepicker\\n                        #endDatePicker\\n                        [touchUi]=\\\"true\\\"\\n                        (selectedChanged)=\\\"onGroupValueChanged()\\\">\\n                    </md-datepicker>\\n                </md-grid-tile>\\n            </md-grid-list>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.html\n// module id = 487\n// module chunks = 5","module.exports = \"<div class=\\\"adf-dropdown-widget\\\" [formGroup]=\\\"formGroup\\\">\\n    <label class=\\\"adf-dropdown-widget__label\\\" [attr.for]=\\\"field.id\\\">{{field.nameKey | translate}}</label>\\n    <select [formControlName]=\\\"controllerName\\\"\\n            [attr.id]=\\\"'select-' + field.id\\\"\\n            class=\\\"adf-dropdown-widget__select\\\"\\n            [(ngModel)]=\\\"field.value\\\"\\n            (ngModelChange)=\\\"changeValue($event)\\\">\\n        <option *ngIf=\\\"showDefaultOption\\\" value=\\\"null\\\">{{defaultOptionText}}</option>\\n        <option *ngFor=\\\"let opt of field.options\\\" [value]=\\\"opt.id\\\">{{opt.label}}</option>\\n    </select>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.html\n// module id = 488\n// module chunks = 5","module.exports = \"<div class=\\\"mdl-grid\\\">\\n    <div class=\\\"mdl-cell mdl-cell--6-col\\\">\\n        <div class=\\\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label adf-number-widget\\\">\\n            <input class=\\\"mdl-textfield__input\\\"\\n                   type=\\\"text\\\"\\n                   pattern=\\\"-?[0-9]*(\\\\.[0-9]+)?\\\"\\n                   [attr.id]=\\\"field.id\\\"\\n                   [value]=\\\"field.value\\\"\\n                   [(ngModel)]=\\\"field.value\\\"\\n                   (ngModelChange)=\\\"calculateDuration()\\\">\\n            <label class=\\\"mdl-textfield__label\\\" [attr.for]=\\\"field.id\\\">{{field.nameKey | translate}}</label>\\n        </div>\\n    </div>\\n    <div class=\\\"mdl-cell mdl-cell--6-col\\\">\\n        <div class=\\\"dropdown-container\\\">\\n            <dropdown-widget [field]=\\\"duration\\\" [group]=\\\"formGroup\\\" [controllerName]=\\\"'timeType'\\\"\\n                             [showDefaultOption]=\\\"false\\\"\\n                             (fieldChanged)=\\\"calculateDuration()\\\"></dropdown-widget>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.html\n// module id = 489\n// module chunks = 5","module.exports = \"<div class=\\\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label adf-number-widget\\\" [formGroup]=\\\"formGroup\\\">\\n    <input formControlName=\\\"{{controllerName}}\\\" class=\\\"mdl-textfield__input\\\"\\n           type=\\\"text\\\"\\n           pattern=\\\"-?[0-9]*(\\\\.[0-9]+)?\\\"\\n           [attr.id]=\\\"field.id\\\"\\n           [value]=\\\"field.value\\\"\\n           [(ngModel)]=\\\"field.value\\\"\\n           (ngModelChange)=\\\"changeValue(field)\\\">\\n    <label class=\\\"mdl-textfield__label\\\" [attr.for]=\\\"field.id\\\">{{field.nameKey | translate}}</label>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/number/number.widget.html\n// module id = 490\n// module chunks = 5","module.exports = \".chart {\\n  display: block;\\n  width: 100%; }\\n\\n.analytics-row__entry {\\n  cursor: pointer; }\\n\\n.report-icons {\\n  margin: 20px 0;\\n  float: left; }\\n\\n.full-width {\\n  width: 100%; }\\n\\n.partial-width {\\n  width: 80%;\\n  margin-left: 20px; }\\n\\n.clear-both {\\n  clear: both; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/analytics-generator.component.scss\n// module id = 637\n// module chunks = 5","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/analytics-report-list.component.scss\n// module id = 638\n// module chunks = 5","module.exports = \".dropdown-widget {\\n  width: 100%; }\\n\\n.dropdown-widget__select {\\n  width: 100%; }\\n\\n.dropdown-widget__invalid .dropdown-widget__select {\\n  border-color: #d50000; }\\n\\n.dropdown-widget__invalid .dropdown-widget__label {\\n  color: #d50000; }\\n\\n.dropdown-widget__invalid .dropdown-widget__label:after {\\n  background-color: #d50000; }\\n\\n.dropdown-widget__invalid .mdl-textfield__error {\\n  visibility: visible !important; }\\n\\n.adf-edit-report-title {\\n  float: left;\\n  font-size: 20px !important;\\n  padding-top: 19px; }\\n\\n.adf-report-icon {\\n  float: left;\\n  padding: 5px 5px 0 0;\\n  visibility: hidden; }\\n\\n.adf-report-title-container {\\n  cursor: pointer;\\n  width: 100%;\\n  margin-bottom: 12px; }\\n  .adf-report-title-container :hover .adf-report-icon {\\n    color: #448aff;\\n    visibility: visible; }\\n\\n.adf-report-title {\\n  padding-top: 10px; }\\n\\n.adf-full-width-input {\\n  width: 100%; }\\n\\n.is-hide {\\n  height: 0;\\n  overflow: hidden;\\n  transition: height 0.5s; }\\n\\n.adf-report-report-container {\\n  border-bottom: solid 1px #d4d4d4;\\n  padding-top: 10px; }\\n  .adf-report-report-container .mat-toolbar {\\n    border: 0 !important;\\n    padding: 0 !important; }\\n\\n.report-container-setting {\\n  padding-left: 10px; }\\n\\n.option_button_details {\\n  padding-top: 20px; }\\n\\n.mdl-dialog__title.choose_name {\\n  padding: 0px; }\\n\\n.mdl-dialog.options-name-dialog {\\n  width: 30%; }\\n\\n.export-message {\\n  background-color: lightgray; }\\n\\n.save-export-input {\\n  width: 100%; }\\n\\n.delete-parameter {\\n  position: absolute;\\n  margin-left: 60%;\\n  padding-top: 5px; }\\n\\n.hide {\\n  display: none; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/analytics-report-parameters.component.scss\n// module id = 639\n// module chunks = 5","module.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-activiti-diagrams\"\n// module id = 64\n// module chunks = 5","module.exports = \".chart {\\n  display: block;\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/analytics.component.scss\n// module id = 640\n// module chunks = 5","module.exports = \".adf-text-danger {\\n  color: #D8000C; }\\n  .adf-text-danger .mat-input-container {\\n    width: 80% !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.scss\n// module id = 641\n// module chunks = 5","module.exports = \".adf-dropdown-widget {\\n  width: 100%; }\\n\\n.adf-dropdown-widget__select {\\n  width: 100%; }\\n\\n.adf-dropdown-widget__invalid .adf-dropdown-widget__select {\\n  border-color: #d50000; }\\n\\n.adf-dropdown-widget__invalid .adf-dropdown-widget__label {\\n  color: #d50000; }\\n\\n.adf-dropdown-widget__invalid .adf-dropdown-widget__label:after {\\n  background-color: #d50000; }\\n\\n.adf-dropdown-widget__invalid .mdl-textfield__error {\\n  visibility: visible !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.scss\n// module id = 642\n// module chunks = 5","module.exports = \".adf-number-widget {\\n  width: 100%; }\\n\\n.adf-number-widget__invalid .mdl-textfield__input {\\n  border-color: #d50000; }\\n\\n.adf-number-widget__invalid .mdl-textfield__label {\\n  color: #d50000; }\\n  .adf-number-widget__invalid .mdl-textfield__label:after {\\n    background-color: #d50000; }\\n\\n.adf-number-widget__invalid .mdl-textfield__error {\\n  visibility: visible !important; }\\n\\n.dropdown-container {\\n  margin-top: 30px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.scss\n// module id = 643\n// module chunks = 5","module.exports = \".adf-number-widget {\\n  width: 100%; }\\n\\n.adf-number-widget__invalid .mdl-textfield__input {\\n  border-color: #d50000; }\\n\\n.adf-number-widget__invalid .mdl-textfield__label {\\n  color: #d50000; }\\n  .adf-number-widget__invalid .mdl-textfield__label:after {\\n    background-color: #d50000; }\\n\\n.adf-number-widget__invalid .mdl-textfield__error {\\n  visibility: visible !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-analytics/src/components/widgets/number/number.widget.scss\n// module id = 644\n// module chunks = 5","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./analytics-generator.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics-generator.component.scss\n// module id = 721\n// module chunks = 5","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./analytics-report-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics-report-list.component.scss\n// module id = 722\n// module chunks = 5","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./analytics-report-parameters.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics-report-parameters.component.scss\n// module id = 723\n// module chunks = 5","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./analytics.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/analytics.component.scss\n// module id = 724\n// module chunks = 5","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./date-range.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/date-range/date-range.widget.scss\n// module id = 725\n// module chunks = 5","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./dropdown.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/dropdown/dropdown.widget.scss\n// module id = 726\n// module chunks = 5","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./duration.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/duration/duration.widget.scss\n// module id = 727\n// module chunks = 5","\n        var result = require(\"!!../../../../../node_modules/raw-loader/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./number.widget.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-analytics/src/components/widgets/number/number.widget.scss\n// module id = 728\n// module chunks = 5","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { DiagramsModule } from 'ng2-activiti-diagrams';\nimport { CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\n\nimport { ChartsModule } from 'ng2-charts';\nimport { AnalyticsGeneratorComponent } from './src/components/analytics-generator.component';\nimport { AnalyticsReportHeatMapComponent } from './src/components/analytics-report-heat-map.component';\nimport { AnalyticsReportListComponent } from './src/components/analytics-report-list.component';\nimport { AnalyticsReportParametersComponent } from './src/components/analytics-report-parameters.component';\nimport { AnalyticsComponent } from './src/components/analytics.component';\nimport { WIDGET_DIRECTIVES } from './src/components/widgets/index';\nimport { MaterialModule } from './src/material.module';\nimport { AnalyticsService } from './src/services/analytics.service';\n\nexport * from './src/components/analytics.component';\nexport * from './src/components/analytics-generator.component';\nexport * from './src/components/analytics-report-list.component';\nexport * from './src/components/analytics-report-parameters.component';\nexport * from './src/services/analytics.service';\nexport * from './src/components/widgets/index';\n\nexport const ANALYTICS_DIRECTIVES: any[] = [\n    AnalyticsComponent,\n    AnalyticsReportListComponent,\n    AnalyticsReportParametersComponent,\n    AnalyticsGeneratorComponent,\n    AnalyticsReportHeatMapComponent,\n    WIDGET_DIRECTIVES\n];\n\nexport const ANALYTICS_PROVIDERS: any[] = [\n    AnalyticsService\n];\n\n@NgModule({\n    imports: [\n        CoreModule,\n        ChartsModule,\n        DiagramsModule,\n        MaterialModule\n    ],\n    declarations: [\n        ...ANALYTICS_DIRECTIVES\n    ],\n    providers: [\n        ...ANALYTICS_PROVIDERS,\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'ng2-activiti-analytics',\n                source: 'assets/ng2-activiti-analytics'\n            }\n        }\n    ],\n    exports: [\n        ...ANALYTICS_DIRECTIVES,\n        MaterialModule\n    ]\n})\nexport class AnalyticsModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: AnalyticsModule,\n            providers: [\n                ...ANALYTICS_PROVIDERS\n            ]\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/index.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { ReportQuery } from 'ng2-activiti-diagrams';\nimport { Chart } from 'ng2-activiti-diagrams';\nimport { AnalyticsService } from '../services/analytics.service';\n\n@Component({\n    selector: 'adf-analytics-generator, activiti-analytics-generator',\n    template: require('./analytics-generator.component.html'),\n    styles: [require('./analytics-generator.component.scss')],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AnalyticsGeneratorComponent implements OnChanges {\n\n    @Input()\n    reportId: number;\n\n    @Input()\n    reportParamQuery: ReportQuery = undefined;\n\n    @Output()\n    onSuccess = new EventEmitter();\n\n    @Output()\n    onError = new EventEmitter();\n\n    reports: Chart[];\n\n    showDetails: boolean = false;\n    currentChartPosition: number;\n\n    public barChartOptions: any = {\n        responsive: true,\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true,\n                    stepSize: 1\n                }\n            }],\n            xAxes: [{\n                ticks: {\n                },\n                stacked: true\n            }]\n        }\n    };\n\n    constructor(private analyticsService: AnalyticsService) {\n    }\n\n    ngOnChanges() {\n        if (this.reportId && this.reportParamQuery) {\n            this.generateReport(this.reportId, this.reportParamQuery);\n        } else {\n            this.reset();\n        }\n    }\n\n    public generateReport(reportId, reportParamQuery) {\n        if (reportParamQuery === undefined || reportParamQuery === null) {\n            reportParamQuery = {};\n        }\n        this.analyticsService.getReportsByParams(reportId, reportParamQuery).subscribe(\n            (res: Chart[]) => {\n                this.reports = res;\n                if (this.reports) {\n                    this.selectFirstReport();\n                }\n                this.onSuccess.emit(res);\n            },\n            (err: any) => {\n                this.onError.emit(err);\n            }\n        );\n    }\n\n    public reset() {\n        if (this.reports) {\n            this.reports = undefined;\n        }\n    }\n\n    public refresh(report): void {\n        /**\n         * (My guess), for Angular to recognize the change in the dataset\n         * it has to change the dataset variable directly,\n         * so one way around it, is to clone the data, change it and then\n         * assign it;\n         */\n        let clone = JSON.parse(JSON.stringify(report));\n        report.datasets = clone.datasets;\n    }\n\n    toggleDetailsTable() {\n        this.showDetails = !this.showDetails;\n    }\n\n    isShowDetails(): boolean {\n        return this.showDetails;\n    }\n\n    isCurrent(position: number) {\n        return position === this.currentChartPosition ? true : false;\n    }\n\n    selectCurrent(position: number) {\n        this.currentChartPosition = position;\n    }\n\n    selectFirstReport() {\n        this.selectCurrent(0);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-analytics/src/components/analytics-generator.component.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/forms\"\n// module id = 9\n// module chunks = 1 2 3 5 10 14"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AAQA;AA8BA;AAAA;AAAA;AAxBA;AAMA;AAGA;AAGA;AAGA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAnJA;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AArBA;AANA;AACA;AACA;AACA;AACA;AACA;AA+BA;AA9BA;AAAA;;;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAcA;AACA;AACA;AACA;AACA;AAWA;AAyDA;AAAA;AACA;AACA;AACA;AAjDA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAKA;AAEA;AAEA;AAQA;AAQA;AACA;AAMA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA5VA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAhCA;AANA;AACA;AACA;AACA;AACA;AACA;AA0DA;AAzDA;AAAA;;;;;;;;;;;AC9CA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AAQA;AANA;AAeA;AAGA;AAGA;AAGA;AA+BA;AAxBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AA9CA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AArBA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;AAeA;;;;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AAQA;AAAA;AAcA;AAAA;AAAA;AAFA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnCA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAZA;AANA;AACA;AACA;AACA;AACA;AACA;AAeA;AAdA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AAKA;AAAA;AAMA;AAqCA;AAnCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAxCA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AANA;;;;;;;;;ACxBA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AAOA;AAAA;AAWA;AAAA;AAAA;;AAEA;AACA;AAAA;AAXA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AATA;AALA;AACA;AACA;AACA;AACA;AAYA;AAXA;AAAA;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AAWA;AAmBA;AAAA;AAjBA;AACA;AASA;AAQA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AApEA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAZA;AATA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAoBA;AAnBA;AAAA;;;;;;;;;;;ACjCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AAQA;AAAA;AAuBA;AAAA;AAXA;AAGA;AAGA;AAGA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1CA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AArBA;AANA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AAQA;AAAA;AAmBA;AAAA;AAAA;AAPA;;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAjDA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAZA;AANA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAnBA;AAAA;;;;;;;;;AC/BA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAMA;AAkBA;AAAA;AACA;AAbA;AAGA;AAEA;AASA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA9DA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AATA;AAJA;AACA;AACA;AACA;AAmBA;AAlBA;AAAA;;;;;;;;;;;ACzBA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAgBA;AAAA;AACA;AAAA;AAAA;AADA;AAJA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;ACrCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AASA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAtNA;AADA;AAGA;AAFA;AAAA;;;;;;;;;ACjCA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA4BA;AAAA;AASA;AARA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AATA;AA1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC7EA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAEA;AAQA;AAoCA;AAAA;AA9BA;AAGA;AAGA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAlGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAZA;AANA;AACA;AACA;AACA;AACA;AACA;AAqCA;AApCA;AAAA;;;;;;;;;AC5BA;;;;;","sourceRoot":""}