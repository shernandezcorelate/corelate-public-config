{"version":3,"file":"ng2-activiti-tasklist/bundles/ng2-activiti-tasklist.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6***","webpack:///webpack/bootstrap b7ef3555f7a1d27de299?877f***","webpack:///external \"@angular/core\"?73d1***","webpack:///external \"ng2-alfresco-core\"?bd09**","webpack:///external \"ng2-alfresco-datatable\"?b0f0","webpack:///./~/css-loader/lib/css-base.js?da04*","webpack:///./ng2-activiti-tasklist/src/components/comment-list.component.ts","webpack:///./ng2-activiti-tasklist/src/components/task-attachment-list.component.ts","webpack:///external \"@angular/common\"?a5c7","webpack:///./ng2-activiti-tasklist/src/components/task-audit.directive.ts","webpack:///./ng2-activiti-tasklist/src/services/process-upload.service.ts","webpack:///external \"moment\"?a88d**","webpack:///./ng2-activiti-tasklist/src/services/tasklist.service.ts","webpack:///./ng2-activiti-tasklist/src/models/comment.model.ts","webpack:///./ng2-activiti-tasklist/src/models/icon.model.ts","webpack:///./ng2-activiti-tasklist/src/models/start-task.model.ts","webpack:///./ng2-activiti-tasklist/src/models/user-event.model.ts","webpack:///external \"rxjs/Rx\"?3be5***","webpack:///./ng2-activiti-tasklist/src/services/people.service.ts","webpack:///./ng2-activiti-tasklist/src/assets/images/user.jpg","webpack:///external \"rxjs/Observable\"?16be*","webpack:///external \"ng2-activiti-form\"","webpack:///external \"@angular/material\"?8d30**","webpack:///./ng2-activiti-tasklist/src/components/people-search.component.ts","webpack:///./ng2-activiti-tasklist/src/components/task-details.component.ts","webpack:///./ng2-activiti-tasklist/src/models/task-details.event.ts","webpack:///./ng2-activiti-tasklist/src/assets/images/empty_doc_lib.svg","webpack:///./ng2-activiti-tasklist/src/components/apps-grid.component.css","webpack:///./ng2-activiti-tasklist/src/components/apps-list.component.css","webpack:///./ng2-activiti-tasklist/src/components/checklist.component.css","webpack:///./ng2-activiti-tasklist/src/components/comments.component.css","webpack:///./ng2-activiti-tasklist/src/components/tasklist.component.css","webpack:///./ng2-activiti-tasklist/src/components/apps-grid.component.css?717e","webpack:///./ng2-activiti-tasklist/src/components/apps-list.component.css?b76c","webpack:///./ng2-activiti-tasklist/src/components/checklist.component.css?9519","webpack:///./ng2-activiti-tasklist/src/components/comments.component.css?9970","webpack:///./ng2-activiti-tasklist/src/components/tasklist.component.css?ddeb","webpack:///./ng2-activiti-tasklist/src/models/form.model.ts","webpack:///./ng2-activiti-tasklist/src/components/apps-list.component.ts","webpack:///./ng2-activiti-tasklist/src/components/checklist.component.ts","webpack:///./ng2-activiti-tasklist/src/components/comments.component.ts","webpack:///./ng2-activiti-tasklist/src/components/create-task-attachment.component.ts","webpack:///./ng2-activiti-tasklist/src/components/no-task-detail-template.directive.ts","webpack:///./ng2-activiti-tasklist/src/components/people-list.component.ts","webpack:///./ng2-activiti-tasklist/src/components/people.component.ts","webpack:///./ng2-activiti-tasklist/src/components/start-task.component.ts","webpack:///./ng2-activiti-tasklist/src/components/task-filters.component.ts","webpack:///./ng2-activiti-tasklist/src/components/task-header.component.ts","webpack:///./ng2-activiti-tasklist/src/components/apps-list.component.html","webpack:///./ng2-activiti-tasklist/src/components/checklist.component.html","webpack:///./ng2-activiti-tasklist/src/components/comment-list.component.html","webpack:///./ng2-activiti-tasklist/src/components/comments.component.html","webpack:///./ng2-activiti-tasklist/src/components/create-task-attachment.component.html","webpack:///./ng2-activiti-tasklist/src/components/people-list.component.html","webpack:///./ng2-activiti-tasklist/src/components/people-search.component.html","webpack:///./ng2-activiti-tasklist/src/components/people.component.html","webpack:///./ng2-activiti-tasklist/src/components/tasklist.component.ts","webpack:///./ng2-activiti-tasklist/src/components/start-task.component.html","webpack:///./ng2-activiti-tasklist/src/components/task-attachment-list.component.html","webpack:///./ng2-activiti-tasklist/src/components/task-details.component.html","webpack:///./ng2-activiti-tasklist/src/components/task-filters.component.html","webpack:///./ng2-activiti-tasklist/src/components/task-header.component.html","webpack:///./ng2-activiti-tasklist/src/components/tasklist.component.html","webpack:///./ng2-activiti-tasklist/src/models/task-details.model.ts","webpack:///./ng2-activiti-tasklist/src/components/comment-list.component.scss","webpack:///./ng2-activiti-tasklist/src/components/create-task-attachment.component.scss","webpack:///./ng2-activiti-tasklist/src/components/people-list.component.scss","webpack:///./ng2-activiti-tasklist/src/components/people-search.component.scss","webpack:///./ng2-activiti-tasklist/src/components/people.component.scss","webpack:///./ng2-activiti-tasklist/src/components/start-task.component.scss","webpack:///./ng2-activiti-tasklist/src/components/task-attachment-list.component.scss","webpack:///./ng2-activiti-tasklist/src/components/task-details.component.scss","webpack:///./ng2-activiti-tasklist/src/components/task-filters.component.scss","webpack:///./ng2-activiti-tasklist/src/components/task-header.component.scss","webpack:///./ng2-activiti-tasklist/src/models/filter.model.ts","webpack:///./ng2-activiti-tasklist/src/models/user.model.ts","webpack:///./ng2-activiti-tasklist/src/components/comment-list.component.scss?a4e5","webpack:///./ng2-activiti-tasklist/src/components/create-task-attachment.component.scss?dfcc","webpack:///./ng2-activiti-tasklist/src/components/people-list.component.scss?e6bc","webpack:///./ng2-activiti-tasklist/src/components/people-search.component.scss?324f","webpack:///./ng2-activiti-tasklist/src/components/people.component.scss?bb7b","webpack:///./ng2-activiti-tasklist/src/components/start-task.component.scss?4e31","webpack:///./ng2-activiti-tasklist/src/components/task-attachment-list.component.scss?f627","webpack:///./ng2-activiti-tasklist/src/components/task-details.component.scss?f0c2","webpack:///./ng2-activiti-tasklist/src/components/task-filters.component.scss?0a9e","webpack:///./ng2-activiti-tasklist/src/components/task-header.component.scss?09b0","webpack:///./ng2-activiti-tasklist/index.ts","webpack:///external \"@angular/forms\"?af17*"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"@angular/forms\"), require(\"ng2-alfresco-datatable\"), require(\"@angular/common\"), require(\"moment\"), require(\"rxjs/Observable\"), require(\"ng2-activiti-form\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"ng2-alfresco-core\", \"rxjs/Rx\", \"@angular/material\", \"@angular/forms\", \"ng2-alfresco-datatable\", \"@angular/common\", \"moment\", \"rxjs/Observable\", \"ng2-activiti-form\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-activiti-tasklist\"] = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"@angular/forms\"), require(\"ng2-alfresco-datatable\"), require(\"@angular/common\"), require(\"moment\"), require(\"rxjs/Observable\"), require(\"ng2-activiti-form\"));\n\telse\n\t\troot[\"ng2-activiti-tasklist\"] = factory(root[\"@angular/core\"], root[\"ng2-alfresco-core\"], root[\"rxjs/Rx\"], root[\"@angular/material\"], root[\"@angular/forms\"], root[\"ng2-alfresco-datatable\"], root[\"@angular/common\"], root[\"moment\"], root[\"rxjs/Observable\"], root[\"ng2-activiti-form\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_26__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 820);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b7ef3555f7a1d27de299","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 1\n// module chunks = 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-datatable\"\n// module id = 10\n// module chunks = 2 3 4 6 15","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 11\n// module chunks = 0 2 3 4 8","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Comment } from '../models/comment.model';\nimport { User } from '../models/user.model';\n\n@Component({\n    selector: 'adf-comment-list',\n    template: require('./comment-list.component.html'),\n    styles: [require('./comment-list.component.scss')]\n})\n\nexport class CommentListComponent {\n\n    @Input()\n    comments: Comment[];\n\n    @Output()\n    clickRow: EventEmitter<Comment> = new EventEmitter<Comment>();\n\n    selectedComment: Comment;\n\n    constructor(private datePipe: DatePipe) {\n    }\n\n    selectComment(event: any): void {\n        this.selectedComment = event.value.obj;\n        this.clickRow.emit(this.selectedComment);\n    }\n\n    getUserShortName(user: User): string {\n        let shortName = '';\n        if (user) {\n            if (user.firstName) {\n                shortName = user.firstName[0].toUpperCase();\n            }\n            if (user.lastName) {\n                shortName += user.lastName[0].toUpperCase();\n            }\n        }\n        return shortName;\n    }\n\n    transformDate(aDate: string): string {\n        let formattedDate: string;\n        let givenDate = Number.parseInt(this.datePipe.transform(aDate, 'yMMdd'));\n        let today = Number.parseInt(this.datePipe.transform(Date.now(), 'yMMdd'));\n        if (givenDate === today) {\n            formattedDate = 'Today, ' + this.datePipe.transform(aDate, 'hh:mm a');\n        } else {\n            let yesterday = Number.parseInt(this.datePipe.transform(Date.now() - 24 * 3600 * 1000, 'yMMdd'));\n            if (givenDate === yesterday) {\n                formattedDate = 'Yesterday, ' + this.datePipe.transform(aDate, 'hh:mm a');\n            } else {\n                formattedDate = this.datePipe.transform(aDate, 'MMM dd y, hh:mm a');\n            }\n        }\n        return formattedDate;\n    }\n\n    hasComments(): boolean {\n        return this.comments && this.comments.length && true;\n    }\n\n    onErrorImageLoad(user: User) {\n        if (user.userImage) {\n            user.userImage = null;\n        }\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/comment-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ActivitiContentService } from 'ng2-activiti-form';\nimport { ContentService, ThumbnailService } from 'ng2-alfresco-core';\n\ndeclare var require: any;\n\n@Component({\n    selector: 'adf-task-attachment-list',\n    styles: [require('./task-attachment-list.component.scss')],\n    template: require('./task-attachment-list.component.html')\n})\nexport class TaskAttachmentListComponent implements OnChanges {\n\n    @Input()\n    taskId: string;\n\n    @Input()\n    disabled: boolean = false;\n\n    @Output()\n    attachmentClick = new EventEmitter();\n\n    @Output()\n    success = new EventEmitter();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    emptyListImageUrl: string = require('./../assets/images/empty_doc_lib.svg');\n\n    attachments: any[] = [];\n    isLoading: boolean = true;\n\n    constructor(private activitiContentService: ActivitiContentService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.loadAttachmentsByTaskId(changes['taskId'].currentValue);\n        }\n    }\n\n    reset(): void {\n        this.attachments = [];\n    }\n\n    reload(): void {\n        this.loadAttachmentsByTaskId(this.taskId);\n    }\n\n    add(content: any): void {\n        this.attachments.push({\n            id: content.id,\n            name: content.name,\n            created: content.created,\n            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n        });\n    }\n\n    private loadAttachmentsByTaskId(taskId: string) {\n        if (taskId) {\n            this.isLoading = true;\n            this.reset();\n            this.activitiContentService.getTaskRelatedContent(taskId).subscribe(\n                (res: any) => {\n                    let attachList = [];\n                    res.data.forEach(content => {\n                        attachList.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.attachments = attachList;\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n\n    private deleteAttachmentById(contentId: string) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter(content => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n\n    onShowRowActionsMenu(event: any) {\n        let viewAction = {\n            title: 'View',\n            name: 'view'\n        };\n\n        let removeAction = {\n            title: 'Remove',\n            name: 'remove'\n        };\n\n        let downloadAction = {\n            title: 'Download',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n\n    onExecuteRowAction(event: any) {\n        let args = event.value;\n        let action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n\n    openContent(event: any): void {\n        let content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n\n    emitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    downloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    isDisabled(): boolean {\n        return this.disabled;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/task-attachment-list.component.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/common\"\n// module id = 13\n// module chunks = 1 3 4 6 9","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { ContentService } from 'ng2-alfresco-core';\nimport { TaskListService } from './../services/tasklist.service';\n\nconst JSON_FORMAT: string = 'json';\nconst PDF_FORMAT: string = 'pdf';\n\n@Directive({\n    selector: 'button[adf-task-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n})\nexport class TaskAuditDirective implements OnInit, OnChanges {\n\n    @Input('task-id')\n    taskId: string;\n\n    @Input()\n    fileName: string = 'Audit';\n\n    @Input()\n    format: string = 'pdf';\n\n    @Input()\n    download: boolean = true;\n\n    @Output()\n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    public audit: any;\n\n    /**\n     *\n     * @param translateService\n     * @param taskListService\n     */\n    constructor(private contentService: ContentService,\n                private taskListService: TaskListService) {\n    }\n\n    ngOnInit() {\n        console.log('OnInit');\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n\n    isValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n\n    setDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n\n    /**\n     * fetch the audit information in the requested format\n     */\n    fetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    onClickAudit() {\n        this.fetchAuditInfo();\n    }\n\n    isJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n\n    isPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/task-audit.directive.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, UploadService } from 'ng2-alfresco-core';\n\n@Injectable()\nexport class ProcessUploadService extends UploadService {\n\n    instanceApi: AlfrescoApiService;\n\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n        this.instanceApi = apiService;\n    }\n\n    getUploadPromise(file: any) {\n        let opts = {\n            isRelatedContent: true\n        };\n        let taskId = file.options.parentId;\n        return this.instanceApi.getInstance().activiti.contentApi.createRelatedContentOnTask(taskId, file.file, opts);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/services/process-upload.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 14\n// module chunks = 0 1 2 3 5","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { Comment } from '../models/comment.model';\nimport {\n    FilterRepresentationModel,\n    TaskQueryRequestRepresentationModel\n} from '../models/filter.model';\nimport { Form } from '../models/form.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport { User } from '../models/user.model';\n\n@Injectable()\nexport class TaskListService {\n    private tasksListSubject = new Subject<TaskListModel>();\n\n    public tasksList$: Observable<TaskListModel> = this.tasksListSubject.asObservable();\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Retrieve all the Deployed app\n     * @returns {Observable<any>}\n     */\n    getDeployedApplications(name?: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.appsApi.getAppDefinitions())\n            .map((response: any) => {\n                if (name) {\n                    return response.data.find(app => app.name === name);\n                }\n                return response.data;\n            })\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve Deployed App details by appId\n     * @returns {Observable<any>}\n     */\n    getApplicationDetailsById(appId: number): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.appsApi.getAppDefinitions())\n            .map((response: any) => {\n                return response.data.find(app => app.id === appId);\n            })\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve all the Tasks filters\n     * @returns {Observable<any>}\n     */\n    getTaskListFilters(appId?: string): Observable<any> {\n        return Observable.fromPromise(this.callApiTaskFilters(appId))\n            .map((response: any) => {\n                let filters: FilterRepresentationModel[] = [];\n                response.data.forEach((filter: FilterRepresentationModel) => {\n                    let filterModel = new FilterRepresentationModel(filter);\n                    filters.push(filterModel);\n                });\n                return filters;\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve the Tasks filter by id\n     * @param filterId - number - The id of the filter\n     * @param appId - string - optional - The id of app\n     * @returns {Observable<FilterRepresentationModel>}\n     */\n    getTaskFilterById(filterId: number, appId?: string): Observable<FilterRepresentationModel> {\n        return Observable.fromPromise(this.callApiTaskFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.id === filterId);\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve the Tasks filter by name\n     * @param taskName - string - The name of the filter\n     * @returns {Observable<FilterRepresentationModel>}\n     */\n    getTaskFilterByName(taskName: string, appId?: string): Observable<FilterRepresentationModel> {\n        return Observable.fromPromise(this.callApiTaskFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.name === taskName);\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Return all the filters in the list where the task id belong\n     * @param taskId - string\n     * @param filter - FilterRepresentationModel []\n     * @returns {FilterRepresentationModel}\n     */\n    getFilterForTaskById(taskId: string, filterList: FilterRepresentationModel[]): Observable<FilterRepresentationModel> {\n        return Observable.from(filterList)\n            .flatMap((filter: FilterRepresentationModel) => this.isTaskRelatedToFilter(taskId, filter))\n            .filter((filter: FilterRepresentationModel) => filter != null);\n    }\n\n    /**\n     * Return the search node for query task based on the given filter\n     * @param filter - FilterRepresentationModel\n     * @returns {TaskQueryRequestRepresentationModel}\n     */\n    private generateTaskRequestNodeFromFilter(filter: FilterRepresentationModel): TaskQueryRequestRepresentationModel {\n        let requestNode = {\n            appDefinitionId: filter.appId,\n            processDefinitionKey: filter.filter.processDefinitionKey,\n            assignment: filter.filter.assignment,\n            state: filter.filter.state,\n            sort: filter.filter.sort\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n\n    /**\n     * Check if a taskId is filtered with the given filter\n     * @param taskId - string\n     * @param filter - FilterRepresentationModel\n     * @returns {FilterRepresentationModel}\n     */\n    isTaskRelatedToFilter(taskId: string, filter: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        let requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filter);\n        return Observable.fromPromise(this.callApiTasksFiltered(requestNodeForFilter))\n            .map((res: any) => {\n                return res.data.find(element => element.id === taskId) ? filter : null;\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve all the tasks filtered by filterModel\n     * @param filter - TaskFilterRepresentationModel\n     * @returns {any}\n     */\n    getTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return Observable.fromPromise(this.callApiTasksFiltered(requestNode))\n            .map((res: any) => {\n                this.tasksListSubject.next(res);\n                return res;\n            }).catch(err => this.handleTasksError(err));\n    }\n\n    /**\n     * Retrieve tasks filtered by filterModel and state\n     * @param filter - TaskFilterRepresentationModel\n     * @returns {any}\n     */\n    findTasksByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTasks(requestNode);\n    }\n\n    /**\n     * Retrieve all tasks filtered by filterModel and state\n     * @param filter - TaskFilterRepresentationModel\n     * @returns {any}\n     */\n    findAllTaskByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTotalTasks(requestNode).\n        switchMap((res: any) => {\n            requestNode.size = res.total;\n            return this.getTasks(requestNode);\n        });\n    }\n\n    /**\n     * Retrieve all tasks filtered by filterModel irrespective of state\n     * @param filter - TaskFilterRepresentationModel\n     * @returns {any}\n     */\n    findAllTasksWhitoutState(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return Observable.forkJoin(\n                this.findTasksByState(requestNode, 'open'),\n                this.findAllTaskByState(requestNode, 'completed'),\n                (activeTasks: TaskListModel, completedTasks: TaskListModel) => {\n                    const tasks = Object.assign({}, activeTasks);\n                    tasks.total += completedTasks.total;\n                    tasks.data = tasks.data.concat(completedTasks.data);\n                    return tasks;\n                }\n            );\n    }\n\n    /**\n     * Retrieve all the task details\n     * @param id - taskId\n     * @returns {<TaskDetailsModel>}\n     */\n    getTaskDetails(id: string): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiTaskDetails(id))\n            .map(res => res)\n            .map((details: any) => {\n                return new TaskDetailsModel(details);\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve all the task's comments\n     * @param id - taskId\n     * @returns {<Comment[]>}\n     */\n    getComments(id: string): Observable<Comment[]> {\n        return Observable.fromPromise(this.callApiTaskComments(id))\n            .map(res => res)\n            .map((response: any) => {\n                let comments: Comment[] = [];\n                response.data.forEach((comment) => {\n                    let user = new User(comment.createdBy);\n                    comments.push(new Comment(comment.id, comment.message, comment.created, user));\n                });\n                return comments;\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve all the task's checklist\n     * @param id - taskId\n     * @returns {TaskDetailsModel}\n     */\n    getTaskChecklist(id: string): Observable<TaskDetailsModel[]> {\n        return Observable.fromPromise(this.callApiTaskChecklist(id))\n            .map(res => res)\n            .map((response: any) => {\n                let checklists: TaskDetailsModel[] = [];\n                response.data.forEach((checklist) => {\n                    checklists.push(new TaskDetailsModel(checklist));\n                });\n                return checklists;\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Retrieve all the form shared with this user\n     * @returns {TaskDetailsModel}\n     */\n    getFormList(): Observable<Form []> {\n        let opts = {\n            'filter': 'myReusableForms', // String | filter\n            'sort': 'modifiedDesc', // String | sort\n            'modelType': 2 // Integer | modelType\n        };\n\n        return Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.getModels(opts)).map(res => res)\n            .map((response: any) => {\n                let forms: Form[] = [];\n                response.data.forEach((form) => {\n                    forms.push(new Form(form.id, form.name));\n                });\n                return forms;\n            }).catch(err => this.handleError(err));\n    }\n\n    attachFormToATask(taskId: string, formId: number): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.attachForm(taskId, { 'formId': formId }));\n    }\n\n    /**\n     * Create and return the default filters\n     * @param appId\n     * @returns {FilterRepresentationModel[]}\n     */\n    public createDefaultFilters(appId: string): Observable<FilterRepresentationModel[]> {\n        let involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);\n        let involvedObservable = this.addFilter(involvedTasksFilter);\n\n        let myTasksFilter = this.getMyTasksFilterInstance(appId);\n        let myTaskObservable = this.addFilter(myTasksFilter);\n\n        let queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);\n        let queuedObservable = this.addFilter(queuedTasksFilter);\n\n        let completedTasksFilter = this.getCompletedTasksFilterInstance(appId);\n        let completeObservable = this.addFilter(completedTasksFilter);\n\n        return Observable.create(observer => {\n            Observable.forkJoin(\n                involvedObservable,\n                myTaskObservable,\n                queuedObservable,\n                completeObservable\n            ).subscribe(\n                (res) => {\n                    let filters: FilterRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === involvedTasksFilter.name) {\n                            filters.push(involvedTasksFilter);\n                        } else if (filter.name === myTasksFilter.name) {\n                            filters.push(myTasksFilter);\n                        } else if (filter.name === queuedTasksFilter.name) {\n                            filters.push(queuedTasksFilter);\n                        } else if (filter.name === completedTasksFilter.name) {\n                            filters.push(completedTasksFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.logService.error(err);\n                });\n        });\n    }\n\n    /**\n     * Add a task\n     * @param task - TaskDetailsModel\n     * @returns {TaskDetailsModel}\n     */\n    addTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiAddTask(task))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Delete a task\n     * @param taskId - string\n     */\n    deleteTask(taskId: string): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiDeleteTask(taskId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Add a filter\n     * @param filter - FilterRepresentationModel\n     * @returns {FilterRepresentationModel}\n     */\n    addFilter(filter: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        return Observable.fromPromise(this.callApiAddFilter(filter))\n            .map(res => res)\n            .map((response: FilterRepresentationModel) => {\n                return response;\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Add a comment to a task\n     * @param id - taskId\n     * @param message - content of the comment\n     * @returns {Comment}\n     */\n    addComment(id: string, message: string): Observable<Comment> {\n        return Observable.fromPromise(this.callApiAddTaskComment(id, message))\n            .map(res => res)\n            .map((response: Comment) => {\n                return new Comment(response.id, response.message, response.created, response.createdBy);\n            }).catch(err => this.handleError(err));\n\n    }\n\n    /**\n     * Make the task completed\n     * @param id - taskId\n     * @returns {TaskDetailsModel}\n     */\n    completeTask(id: string) {\n        return Observable.fromPromise(this.callApiCompleteTask(id))\n            .map(res => res);\n    }\n\n    /**\n     * Return the total number of the tasks by filter\n     * @param requestNode - TaskFilterRepresentationModel\n     * @returns {any}\n     */\n    public getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any> {\n        requestNode.size = 0;\n        return Observable.fromPromise(this.callApiTasksFiltered(requestNode))\n            .map((res: any) => {\n                return res;\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Create a new standalone task\n     * @param task - TaskDetailsModel\n     * @returns {TaskDetailsModel}\n     */\n    createNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiCreateTask(task))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Assign task to user/group\n     * @param taskId - string\n     * @param requestNode - any\n     * @returns {TaskDetailsModel}\n     */\n    assignTask(taskId: string, requestNode: any): Observable<TaskDetailsModel> {\n        let assignee = {assignee: requestNode.id} ;\n        return Observable.fromPromise(this.callApiAssignTask(taskId, assignee))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n\n    assignTaskByUserId(taskId: string, userId: number): Observable<TaskDetailsModel> {\n        let assignee = {assignee: userId} ;\n        return Observable.fromPromise(this.callApiAssignTask(taskId, assignee))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n\n    /**\n     * Claim a task\n     * @param id - taskId\n     */\n    claimTask(taskId: string): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.claimTask(taskId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Update due date\n     * @param dueDate - the new due date\n     */\n    updateTask(taskId: any, updated): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.updateTask(taskId, updated))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * fetch the Task Audit information as a pdf\n     * @param taskId - the task id\n     */\n    fetchTaskAuditPdfById(taskId: string): Observable<Blob> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.getTaskAuditPdf(taskId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * fetch the Task Audit information in a json format\n     * @param taskId - the task id\n     */\n    fetchTaskAuditJsonById(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.getTaskAuditJson(taskId))\n            .catch(err => this.handleError(err));\n    }\n\n    private callApiTasksFiltered(requestNode: TaskQueryRequestRepresentationModel) {\n        return this.apiService.getInstance().activiti.taskApi.listTasks(requestNode);\n    }\n\n    callApiTaskFilters(appId?: string) {\n        if (appId) {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({ appId: appId });\n        } else {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();\n        }\n    }\n\n    private callApiTaskDetails(id: string) {\n        return this.apiService.getInstance().activiti.taskApi.getTask(id);\n    }\n\n    private callApiTaskComments(id: string) {\n        return this.apiService.getInstance().activiti.taskApi.getTaskComments(id);\n    }\n\n    private callApiAddTaskComment(id: string, message: string) {\n        return this.apiService.getInstance().activiti.taskApi.addTaskComment({ message: message }, id);\n    }\n\n    private callApiAddTask(task: TaskDetailsModel) {\n        return this.apiService.getInstance().activiti.taskApi.addSubtask(task.parentTaskId, task);\n    }\n\n    private callApiDeleteTask(taskId: string) {\n        return this.apiService.getInstance().activiti.taskApi.deleteTask(taskId);\n    }\n\n    private callApiAddFilter(filter: FilterRepresentationModel) {\n        return this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter);\n    }\n\n    private callApiTaskChecklist(id: string) {\n        return this.apiService.getInstance().activiti.taskApi.getChecklist(id);\n    }\n\n    private callApiCompleteTask(id: string) {\n        return this.apiService.getInstance().activiti.taskApi.completeTask(id);\n    }\n\n    private callApiCreateTask(task: TaskDetailsModel) {\n        return this.apiService.getInstance().activiti.taskApi.createNewTask(task);\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        this.tasksListSubject.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n\n    private handleTasksError(error: any) {\n        this.tasksListSubject.error(error.response.body);\n        return this.handleError(error);\n    }\n\n    /**\n     * Return a static Involved filter instance\n     * @param appId\n     * @returns {FilterRepresentationModel}\n     */\n    getInvolvedTasksFilterInstance(appId: string): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Involved Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-align-left',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' }\n        });\n    }\n\n    /**\n     * Return a static My task filter instance\n     * @param appId\n     * @returns {FilterRepresentationModel}\n     */\n    getMyTasksFilterInstance(appId: string): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'My Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-inbox',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' }\n        });\n    }\n\n    /**\n     * Return a static Queued filter instance\n     * @param appId\n     * @returns {FilterRepresentationModel}\n     */\n    getQueuedTasksFilterInstance(appId: string): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Queued Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-record',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' }\n        });\n    }\n\n    /**\n     * Return a static Completed filter instance\n     * @param appId\n     * @returns {FilterRepresentationModel}\n     */\n    getCompletedTasksFilterInstance(appId: string): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Completed Tasks',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-ok-sign',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' }\n        });\n    }\n\n    private callApiAssignTask(taskId: string, requestNode: any) {\n        return this.apiService.getInstance().activiti.taskApi.assignTask(taskId, requestNode);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/services/tasklist.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent the comment of a task.\n *\n *\n * @returns {Comment} .\n */\nimport { User } from './user.model';\n\nexport class Comment {\n    id: number;\n    message: string;\n    created: string;\n    createdBy: User;\n\n    constructor(id: number, message: string, created: string, createdBy: User) {\n        this.id = id;\n        this.message = message;\n        this.created = created;\n        this.createdBy = createdBy;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/comment.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class IconModel {\n    public static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\n\n    private iconsMDL: Map<string, string>;\n\n    constructor() {\n        this.initIconsMDL();\n    }\n\n    mapGlyphiconToMaterialDesignIcons(icon: string) {\n        return this.iconsMDL.get(icon) ? this.iconsMDL.get(icon) : IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;\n    }\n\n    /**\n     * Map all the bootstrap glyphicon icons with Material design material icon\n     */\n    initIconsMDL() {\n        this.iconsMDL = new Map<string, string>();\n\n        this.iconsMDL.set('glyphicon-asterisk', 'ac_unit');\n        this.iconsMDL.set('glyphicon-plus', 'add');\n        this.iconsMDL.set('glyphicon-euro', 'euro_symbol');\n        this.iconsMDL.set('glyphicon-cloud', 'cloud');\n        this.iconsMDL.set('glyphicon-envelope', 'mail');\n        this.iconsMDL.set('glyphicon-pencil', 'create');\n        this.iconsMDL.set('glyphicon-glass', 'local_bar');\n        this.iconsMDL.set('glyphicon-music', 'music_note');\n        this.iconsMDL.set('glyphicon-search', 'search');\n        this.iconsMDL.set('glyphicon-heart', 'favorite');\n        this.iconsMDL.set('glyphicon-heart-empty', 'favorite_border');\n        this.iconsMDL.set('glyphicon-star', 'star');\n        this.iconsMDL.set('glyphicon-star-empty', 'star_border');\n        this.iconsMDL.set('glyphicon-user', 'person');\n        this.iconsMDL.set('glyphicon-film', 'movie_creation');\n        this.iconsMDL.set('glyphicon-th-large', 'view_comfy');\n        this.iconsMDL.set('glyphicon-th', 'view_compact');\n        this.iconsMDL.set('glyphicon-th-list', 'list');\n        this.iconsMDL.set('glyphicon-ok', 'done');\n        this.iconsMDL.set('glyphicon-remove', 'cancel');\n        this.iconsMDL.set('glyphicon-zoom-in', 'zoom_in');\n        this.iconsMDL.set('glyphicon-zoom-out', 'zoom_out');\n        this.iconsMDL.set('glyphicon-off', 'highlight_off');\n        this.iconsMDL.set('glyphicon-signal', 'signal_cellular_4_bar');\n        this.iconsMDL.set('glyphicon-cog', 'settings');\n        this.iconsMDL.set('glyphicon-trash', 'delete');\n        this.iconsMDL.set('glyphicon-home', 'home');\n        this.iconsMDL.set('glyphicon-file', 'insert_drive_file');\n        this.iconsMDL.set('glyphicon-time', 'access_time');\n        this.iconsMDL.set('glyphicon-road', 'map');\n        this.iconsMDL.set('glyphicon-download-alt', 'file_download');\n        this.iconsMDL.set('glyphicon-download', 'file_download');\n        this.iconsMDL.set('glyphicon-upload', 'file_upload');\n        this.iconsMDL.set('glyphicon-inbox', 'inbox');\n        this.iconsMDL.set('glyphicon-play-circle', 'play_circle_outline');\n        this.iconsMDL.set('glyphicon-repeat', 'refresh');\n        this.iconsMDL.set('glyphicon-refresh', 'sync');\n        this.iconsMDL.set('glyphicon-list-alt', 'event_note');\n        this.iconsMDL.set('glyphicon-lock', 'lock_outline');\n        this.iconsMDL.set('glyphicon-flag', 'assistant_photo');\n        this.iconsMDL.set('glyphicon-headphones', 'headset');\n        this.iconsMDL.set('glyphicon-volume-up', 'volume_up');\n        this.iconsMDL.set('glyphicon-tag', 'local_offer');\n        this.iconsMDL.set('glyphicon-tags', 'local_offer');\n        this.iconsMDL.set('glyphicon-book', 'library_books');\n        this.iconsMDL.set('glyphicon-bookmark', 'collections_bookmark');\n        this.iconsMDL.set('glyphicon-print', 'local_printshop');\n        this.iconsMDL.set('glyphicon-camera', 'local_see');\n        this.iconsMDL.set('glyphicon-list', 'view_list');\n        this.iconsMDL.set('glyphicon-facetime-video', 'video_call');\n        this.iconsMDL.set('glyphicon-picture', 'photo');\n        this.iconsMDL.set('glyphicon-map-marker', 'add_location');\n        this.iconsMDL.set('glyphicon-adjust', 'brightness_4');\n        this.iconsMDL.set('glyphicon-tint', 'invert_colors');\n        this.iconsMDL.set('glyphicon-edit', 'edit');\n        this.iconsMDL.set('glyphicon-share', 'share');\n        this.iconsMDL.set('glyphicon-check', 'assignment_turned_in');\n        this.iconsMDL.set('glyphicon-move', 'open_with');\n        this.iconsMDL.set('glyphicon-play', 'play_arrow');\n        this.iconsMDL.set('glyphicon-eject', 'eject');\n        this.iconsMDL.set('glyphicon-plus-sign', 'add_circle');\n        this.iconsMDL.set('glyphicon-minus-sign', 'remove_circle');\n        this.iconsMDL.set('glyphicon-remove-sign', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-sign', 'check_circle');\n        this.iconsMDL.set('glyphicon-question-sign', 'help');\n        this.iconsMDL.set('glyphicon-info-sign', 'info');\n        this.iconsMDL.set('glyphicon-screenshot', 'flare');\n        this.iconsMDL.set('glyphicon-remove-circle', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-circle', 'add_circle');\n        this.iconsMDL.set('glyphicon-ban-circle', 'block');\n        this.iconsMDL.set('glyphicon-share-alt', 'redo');\n        this.iconsMDL.set('glyphicon-exclamation-sign', 'error');\n        this.iconsMDL.set('glyphicon-gift', 'giftcard');\n        this.iconsMDL.set('glyphicon-leaf', 'spa');\n        this.iconsMDL.set('glyphicon-fire', 'whatshot');\n        this.iconsMDL.set('glyphicon-eye-open', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-eye-close', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-warning-sign', 'warning');\n        this.iconsMDL.set('glyphicon-plane', 'airplanemode_active');\n        this.iconsMDL.set('glyphicon-calendar', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-random', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-comment', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-magnet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-retweet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-shopping-cart', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-close', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hdd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bullhorn', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bell', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-certificate', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-up', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-down', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hand-left', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-globe', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-wrench', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tasks', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-filter', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-briefcase', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-dashboard', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-paperclip', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-link', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-pushpin', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-usd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-gbp', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-sort', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-flash', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-record', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-save', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-saved', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-send', 'send');\n        this.iconsMDL.set('glyphicon-floppy-disk', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-credit-card', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cutlery', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-earphone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone-alt', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tower', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-stats', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-download', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-upload', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-conifer', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-deciduous', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/icon.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent of the StartTaskModel.\n *\n *\n * @returns {StartTaskModel} .\n */\nimport { User } from './user.model';\n\nexport class StartTaskModel {\n\n    name: string;\n    description: string;\n    assignee: User;\n    dueDate: any;\n    formKey: any;\n    category: string;\n\n    constructor(obj?: any) {\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.assignee = obj && obj.assignee ? new User(obj.assignee) : null;\n        this.dueDate = obj && obj.dueDate || null;\n        this.formKey = obj && obj.formKey || null;\n        this.category = obj && obj.category || null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/start-task.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent the User Event.\n *\n *\n * @returns {UserEventModel} .\n */\nexport class UserEventModel {\n    type: string = '';\n    value: any = {};\n\n    constructor(obj?: any) {\n        this.type = obj && obj.type;\n        this.value = obj && obj.value || {};\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/user-event.model.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Rx\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { AlfrescoApiService, LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { User } from '../models/user.model';\n\n@Injectable()\nexport class PeopleService {\n\n    constructor(private alfrescoJsApi: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    getWorkflowUsers(taskId?: string, searchWord?: string): Observable<User[]> {\n        let option = { excludeTaskId: taskId, filter: searchWord };\n        return Observable.fromPromise(this.getWorkflowUserApi(option))\n            .map((response: any) => <User[]> response.data || [])\n            .catch(err => this.handleError(err));\n    }\n\n    getWorkflowUsersWithImages(taskId?: string, searchWord?: string): Observable<User[]> {\n        let option = { excludeTaskId: taskId, filter: searchWord };\n        return Observable.fromPromise(this.getWorkflowUserApi(option))\n            .switchMap((response: any) => <User[]> response.data || [])\n            .map((user: User) => this.addImageToUser(user))\n            .combineAll()\n            .catch(err => this.handleError(err));\n    }\n\n    getUserImage(user: User): string {\n        return this.getUserProfileImageApi(user.id + '');\n    }\n\n    addImageToUser(user: User): Observable<User> {\n        user.userImage = this.getUserImage(user);\n        return Observable.of(user);\n    }\n\n    involveUserWithTask(taskId: string, idToInvolve: string): Observable<User[]> {\n        let node = {userId: idToInvolve};\n        return Observable.fromPromise(this.involveUserToTaskApi(taskId, node))\n            .catch(err => this.handleError(err));\n    }\n\n    removeInvolvedUser(taskId: string, idToRemove: string): Observable<User[]> {\n        let node = {userId: idToRemove};\n        return Observable.fromPromise(this.removeInvolvedUserFromTaskApi(taskId, node))\n            .catch(err => this.handleError(err));\n    }\n\n    private getWorkflowUserApi(options: any) {\n        return this.alfrescoJsApi.getInstance().activiti.usersWorkflowApi.getUsers(options);\n    }\n\n    private involveUserToTaskApi(taskId: string, node: any) {\n        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.involveUser(taskId, node);\n    }\n\n    private removeInvolvedUserFromTaskApi(taskId: string, node: any) {\n        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.removeInvolvedUser(taskId, node);\n    }\n\n    private getUserProfileImageApi(userId: string) {\n        return this.alfrescoJsApi.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);\n    }\n\n    /**\n     * Throw the error\n     * @param error\n     * @returns {ErrorObservable}\n     */\n    private handleError(error: Response) {\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/services/people.service.ts","module.exports = __webpack_public_path__ + \"assets/images/user.01b46903dd0c2cb3b0abc908f3095d93.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/assets/images/user.jpg\n// module id = 215\n// module chunks = 3","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Observable\"\n// module id = 23\n// module chunks = 1 2 3 4 6","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-activiti-form\"\n// module id = 26\n// module chunks = 3 4","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 3\n// module chunks = 1 2 3 4 5 6 7 8 9 11 12 13 14","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Directive, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs/Observable';\nimport { User } from '../models/user.model';\n\n@Component({\n    selector: 'adf-people-search, activiti-people-search',\n    template: require('./people-search.component.html'),\n    styles: [require('./people-search.component.scss')]\n})\n\nexport class PeopleSearchComponent implements OnInit {\n\n    @Input()\n    results: Observable<User[]>;\n\n    @Output()\n    searchPeople: EventEmitter<any> = new EventEmitter();\n\n    @Output()\n    success: EventEmitter<User> = new EventEmitter<User>();\n\n    @Output()\n    closeSearch = new EventEmitter();\n\n    searchUser: FormControl = new FormControl();\n\n    users: User[] = [];\n\n    selectedUser: User;\n\n    constructor() {\n        this.searchUser\n            .valueChanges\n            .debounceTime(200)\n            .subscribe((event: string) => {\n                if (event && event.trim()) {\n                    this.searchPeople.emit(event);\n                } else {\n                    this.users = [];\n                }\n            });\n    }\n\n    ngOnInit() {\n        this.results.subscribe((list) => {\n            this.users = list;\n        });\n    }\n\n    onRowClick(user: User) {\n        this.selectedUser = user;\n    }\n\n    closeSearchList() {\n        this.closeSearch.emit();\n    }\n\n    involveUserAndClose() {\n        this.involveUser();\n        this.closeSearchList();\n    }\n\n    involveUser() {\n        if (this.selectedUser === undefined) {\n            return;\n        }\n        this.success.emit(this.selectedUser);\n        this.users = this.users.filter((user) => {\n            this.searchUser.reset();\n            return user.id !== this.selectedUser.id;\n        });\n    }\n\n    getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n\n    getInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n\n    hasUsers() {\n        return (this.users && this.users.length > 0);\n    }\n\n    onErrorImageLoad(user: User) {\n        if (user.userImage) {\n            user.userImage = null;\n        }\n    }\n}\n\n@Directive({ selector: 'people-search-title' }) export class PeopleSearchTitleDirective { }\n@Directive({ selector: 'people-search-action-label' }) export class PeopleSearchActionLabelDirective { }\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/people-search.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component,\n    DebugElement,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from 'ng2-activiti-form';\nimport { AlfrescoAuthenticationService, CardViewUpdateService, ClickNotification, LogService, UpdateNotification } from 'ng2-alfresco-core';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { User } from '../models/user.model';\nimport { PeopleService } from './../services/people.service';\nimport { TaskListService } from './../services/tasklist.service';\n\ndeclare var require: any;\n\n@Component({\n    selector: 'adf-task-details, activiti-task-details',\n    template: require('./task-details.component.html'),\n    styles: [require('./task-details.component.scss')],\n    providers: [\n        CardViewUpdateService\n    ]\n})\nexport class TaskDetailsComponent implements OnInit, OnChanges {\n\n    @ViewChild('activiticomments')\n    activiticomments: any;\n\n    @ViewChild('activitichecklist')\n    activitichecklist: any;\n\n    @ViewChild('errorDialog')\n    errorDialog: DebugElement;\n\n    @Input()\n    debugMode: boolean = false;\n\n    @Input()\n    taskId: string;\n\n    @Input()\n    showNextTask: boolean = true;\n\n    @Input()\n    showHeader: boolean = true;\n\n    @Input()\n    showHeaderContent: boolean = true;\n\n    @Input()\n    showInvolvePeople: boolean = true;\n\n    @Input()\n    showComments: boolean = true;\n\n    @Input()\n    showChecklist: boolean = true;\n\n    @Input()\n    showFormTitle: boolean = true;\n\n    @Input()\n    showFormCompleteButton: boolean = true;\n\n    @Input()\n    showFormSaveButton: boolean = true;\n\n    @Input()\n    readOnlyForm: boolean = false;\n\n    @Input()\n    showFormRefreshButton: boolean = true;\n\n    @Input()\n    peopleIconImageUrl: string = require('../assets/images/user.jpg');\n\n    @Input()\n    fieldValidators: FormFieldValidator[] = [];\n\n    @Output()\n    formSaved: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formCompleted: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    @Output()\n    formLoaded: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    @Output()\n    taskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    @Output()\n    taskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output()\n    onError: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    executeOutcome: EventEmitter<FormOutcomeEvent> = new EventEmitter<FormOutcomeEvent>();\n\n    @Output()\n    assignTask: EventEmitter<void> = new EventEmitter<void>();\n\n    taskDetails: TaskDetailsModel;\n    taskFormName: string = null;\n\n    taskPeople: User[] = [];\n\n    noTaskDetailsTemplateComponent: TemplateRef<any>;\n\n    showAssignee: boolean = false;\n\n    private peopleSearchObserver: Observer<User[]>;\n    peopleSearch$: Observable<User[]>;\n\n    constructor(private activitiTaskList: TaskListService,\n                private authService: AlfrescoAuthenticationService,\n                private peopleService: PeopleService,\n                private logService: LogService,\n                private cardViewUpdateService: CardViewUpdateService) {\n        this.peopleSearch$ = new Observable<User[]>(observer => this.peopleSearchObserver = observer).share();\n    }\n\n    ngOnInit() {\n        if (this.taskId) {\n            this.loadDetails(this.taskId);\n        }\n\n        this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));\n        this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        let taskId = changes.taskId;\n        this.showAssignee = false;\n\n        if (taskId && !taskId.currentValue) {\n            this.reset();\n        } else if (taskId && taskId.currentValue) {\n            this.taskFormName = null;\n            this.loadDetails(taskId.currentValue);\n        }\n    }\n\n    /**\n     * Reset the task details\n     */\n    private reset() {\n        this.taskDetails = null;\n    }\n\n    /**\n     * Check if the task has a form\n     * @returns {TaskDetailsModel|string|boolean}\n     */\n    hasFormKey() {\n        return (this.taskDetails\n        && this.taskDetails.formKey\n        && this.taskDetails.formKey !== 'null');\n    }\n\n    isTaskActive() {\n        return this.taskDetails && this.taskDetails.duration === null;\n    }\n\n    /**\n     * Save a task detail and update it after a successful response\n     *\n     * @param updateNotification\n     */\n    private updateTaskDetails(updateNotification: UpdateNotification) {\n        this.activitiTaskList.updateTask(this.taskId, updateNotification.changed)\n            .subscribe(\n                () => {\n                    this.loadDetails(this.taskId);\n                }\n            );\n    }\n\n    private clickTaskDetails(clickNotification: ClickNotification) {\n        console.log(clickNotification.target);\n        if (clickNotification.target.key === 'assignee') {\n            this.showAssignee = true;\n        }\n    }\n\n    /**\n     * Load the activiti task details\n     * @param taskId\n     */\n    private loadDetails(taskId: string) {\n        this.taskPeople = [];\n        this.readOnlyForm = false;\n\n        if (taskId) {\n            this.activitiTaskList.getTaskDetails(taskId).subscribe(\n                (res: TaskDetailsModel) => {\n                    this.taskDetails = res;\n\n                    if (this.taskDetails.name === 'null') {\n                        this.taskDetails.name = 'No name';\n                    }\n\n                    let endDate: any = res.endDate;\n                    this.readOnlyForm = this.readOnlyForm ? this.readOnlyForm : !!(endDate && !isNaN(endDate.getTime()));\n                    if (this.taskDetails && this.taskDetails.involvedPeople) {\n                        this.taskDetails.involvedPeople.forEach((user) => {\n                            this.taskPeople.push(new User(user));\n                        });\n                    }\n                });\n        }\n    }\n\n    isAssigned(): boolean {\n        return this.taskDetails.assignee ? true : false;\n    }\n\n    isAssignedToMe(): boolean {\n        return this.taskDetails.assignee.email === this.authService.getBpmUsername();\n    }\n\n    /**\n     * Retrieve the next open task\n     * @param processInstanceId\n     * @param processDefinitionId\n     */\n    private loadNextTask(processInstanceId: string, processDefinitionId: string): void {\n        let requestNode = new TaskQueryRequestRepresentationModel(\n            {\n                processInstanceId: processInstanceId,\n                processDefinitionId: processDefinitionId\n            }\n        );\n        this.activitiTaskList.getTasks(requestNode).subscribe(\n            (response) => {\n                if (response && response.length > 0) {\n                    this.taskDetails = new TaskDetailsModel(response[0]);\n                } else {\n                    this.reset();\n                }\n            }, (error) => {\n                this.onError.emit(error);\n            });\n    }\n\n    /**\n     * Complete button clicked\n     */\n    onComplete(): void {\n        this.activitiTaskList.completeTask(this.taskId).subscribe(\n            (res) => this.onFormCompleted(null)\n        );\n    }\n\n    onFormContentClick(content: ContentLinkModel): void {\n        this.formContentClicked.emit(content);\n    }\n\n    onFormSaved(form: FormModel): void {\n        this.formSaved.emit(form);\n    }\n\n    onFormCompleted(form: FormModel): void {\n        this.formCompleted.emit(form);\n        if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {\n            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);\n        }\n    }\n\n    onFormLoaded(form: FormModel): void {\n        this.taskFormName = (form && form.name ? form.name : null);\n        this.formLoaded.emit(form);\n    }\n\n    onChecklistTaskCreated(task: TaskDetailsModel): void {\n        this.taskCreated.emit(task);\n    }\n\n    onChecklistTaskDeleted(taskId: string): void {\n        this.taskDeleted.emit(taskId);\n    }\n\n    onFormError(error: any): void {\n        this.errorDialog.nativeElement.showModal();\n        this.onError.emit(error);\n    }\n\n    onFormExecuteOutcome(event: FormOutcomeEvent): void {\n        this.executeOutcome.emit(event);\n    }\n\n    closeErrorDialog(): void {\n        this.errorDialog.nativeElement.close();\n    }\n\n    onClaimTask(taskId: string): void {\n        this.loadDetails(taskId);\n    }\n\n    toggleHeaderContent(): void {\n        this.showHeaderContent = !this.showHeaderContent;\n    }\n\n    isCompletedTask(): boolean {\n        return this.taskDetails && this.taskDetails.endDate ? true : undefined;\n    }\n\n    searchUser(searchedWord: string) {\n        this.peopleService.getWorkflowUsers(null, searchedWord)\n            .subscribe((users) => {\n                users = users.filter((user) => user.id !== this.taskDetails.assignee.id);\n                this.peopleSearchObserver.next(users);\n            }, error => this.logService.error('Could not load users'));\n    }\n\n    onCloseSearch() {\n        this.showAssignee = false;\n        console.log(this.taskDetails.assignee);\n    }\n\n    assignTaskToUser(selectedUser: User) {\n        this.activitiTaskList.assignTask(this.taskDetails.id, selectedUser).subscribe(\n            (res: any) => {\n                this.logService.info('Task Assigned to ' + selectedUser.email);\n                this.assignTask.emit();\n            });\n        this.showAssignee = false;\n    }\n\n    getTaskHeaderViewClass() {\n        if (this.showAssignee) {\n            return 'assign-edit-view';\n        } else {\n            return 'default-view';\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/task-details.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskDetailsModel } from './task-details.model';\n\nexport class TaskDetailsEvent {\n\n    private _value: TaskDetailsModel;\n    private _defaultPrevented: boolean = false;\n\n    get value(): TaskDetailsModel {\n        return this._value;\n    }\n\n    get defaultPrevented() {\n        return this._defaultPrevented;\n    }\n\n    constructor(value: TaskDetailsModel) {\n        this._value = value;\n    }\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/task-details.event.ts","module.exports = __webpack_public_path__ + \"assets/images/empty_doc_lib.a89c064e4edfa54d2e347bf594947219.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/assets/images/empty_doc_lib.svg\n// module id = 391\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".mdl-card__media {\\n    margin: 0;\\n}\\n\\n.mdl-card__media > img {\\n    max-width: 100%;\\n}\\n\\n.mdl-card__actions {\\n    display: flex;\\n    box-sizing:border-box;\\n    align-items: center;\\n}\\n.mdl-card__actions > .mdl-button--icon {\\n    margin-right: 3px;\\n    margin-left: 3px;\\n}\\n\\n.mdl-card:hover {\\n    box-shadow: 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12), 0 5px 5px -3px rgba(0, 0, 0, .2);\\n    cursor: pointer;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-tasklist/src/components/apps-grid.component.css\n// module id = 421\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \":host {\\n    width: 100%;\\n}\\n\\n.application-title {\\n    color: white;\\n}\\n\\n.logo {\\n    position: absolute;\\n    right: 20px;\\n    top: 20px;\\n}\\n.logo i{\\n    font-size: 70px;\\n}\\n.theme-1 {\\n    background-color: #269abc;\\n}\\n.theme-1 .logo i {\\n    color: #168aac;\\n}\\n.theme-1 .mdl-card__actions i {\\n    color: #168aac;\\n}\\n.theme-1 .mdl-card__actions i:hover {\\n    color: #b7dfea;\\n}\\n.theme-2 {\\n    background-color: #7da9b0;\\n}\\n.theme-2 .logo i {\\n    color: #6d99a0;\\n}\\n.theme-2 .mdl-card__actions i {\\n    color: #6d99a0;\\n}\\n.theme-2 .mdl-card__actions i:hover {\\n color: #def2f5;\\n}\\n.theme-3 {\\n    background-color: #7689ab;\\n}\\n.theme-3 .logo i {\\n    color: #66799b;\\n}\\n.theme-3 .mdl-card__actions i {\\n    color: #66799b;\\n}\\n.theme-3 .mdl-card__actions i:hover {\\n    color: #a2b4d6;\\n}\\n.theme-4 {\\n    background-color: #c74e3e;\\n}\\n.theme-4 .logo i {\\n    color: #b73e2e;\\n}\\n.theme-4 .mdl-card__actions i {\\n    color: #b73e2e;\\n}\\n.theme-4 .mdl-card__actions i:hover {\\n    color: #de8b80;\\n}\\n.theme-5 {\\n    background-color: #fab96c;\\n}\\n.theme-5 .logo i {\\n    color: #eaa95c;\\n}\\n.theme-5 .mdl-card__actions i {\\n    color: #eaa95c;\\n}\\n.theme-5 .mdl-card__actions i:hover {\\n    color: #fdd9ae;\\n}\\n.theme-6 {\\n    background-color: #759d4c;\\n}\\n.theme-6 .logo i {\\n    color: #658d3c;\\n}\\n.theme-6 .mdl-card__actions i {\\n    color: #658d3c;\\n}\\n.theme-6 .mdl-card__actions i:hover {\\n    color: #a8d07f;\\n}\\n.theme-7 {\\n    background-color: #b1b489;\\n}\\n.theme-7 .logo i {\\n    color: #a1a479;\\n}\\n.theme-7 .mdl-card__actions i {\\n    color: #a1a479;\\n}\\n.theme-7 .mdl-card__actions i:hover {\\n    color: #d9dcb2;\\n}\\n.theme-8 {\\n    background-color: #a17299;\\n}\\n.theme-8 .logo i {\\n    color: #916289;\\n}\\n.theme-8 .mdl-card__actions i {\\n    color: #916289;\\n}\\n.theme-8 .mdl-card__actions i:hover {\\n    color: #d0a8c9;\\n}\\n.theme-9 {\\n    background-color: #696c67;\\n}\\n.theme-9 .logo i {\\n    color: #595c57;\\n}\\n.theme-9 .mdl-card__actions i {\\n    color: #595c57;\\n}\\n.theme-9 .mdl-card__actions i:hover {\\n    color: #a6a9a4;\\n}\\n.theme-10 {\\n    background-color: #cabb33;\\n}\\n.theme-10 .logo i {\\n    color: #baab23;\\n}\\n.theme-10 .mdl-card__actions i {\\n    color: #baab23;\\n}\\n.theme-10 .mdl-card__actions i:hover {\\n    color: #efe79e;\\n}\\n.selectedIcon{\\n    color: #e9f1f3!important;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-tasklist/src/components/apps-list.component.css\n// module id = 422\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \":host {\\n    width: 100%;\\n}\\n\\n.activiti-label {\\n    font-weight: bolder;\\n}\\n\\n.material-icons:hover {\\n    color: rgb(255, 152, 0);\\n}\\n\\n.mdl-tooltip {\\n    will-change: unset;\\n}\\n\\n.material-icons {\\n    cursor: pointer;\\n}\\n\\n.mat-input-container {\\n    width: 100%;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-tasklist/src/components/checklist.component.css\n// module id = 423\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".adf-comments-container {\\n    height: 100%;\\n    width: 100%;\\n    overflow: auto;\\n}\\n\\n.adf-comments-header {\\n    padding: 10px 20px;\\n    font-size: 14px;\\n    font-family: Muli;\\n    font-weight: 600;\\n    border-bottom: 1px solid #e1e1e1;\\n    color: #a1a1a1;\\n}\\n\\n.adf-comments-input-container {\\n    padding: 0 15px;\\n    width: calc(100% - 30px);\\n    padding-top: 8px;\\n    border-bottom: 1px solid #e1e1e1;\\n}\\n\\n.adf-full-width {\\n    width: 100%;\\n}\\n\\nadf-comment-list {\\n    float: left;\\n    overflow: auto;\\n    height: calc(100% - 101px);\\n    width: 100%;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-tasklist/src/components/comments.component.css\n// module id = 424\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"alfresco-datatable >>> .column-header {\\n    color: #232323;\\n    font-size: 15px;\\n}\\n\\nalfresco-datatable >>> .data-cell {\\n    cursor: pointer !important;\\n}\\n\\nalfresco-datatable >>> .cell-value{\\n    width: 250px;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    text-overflow: ellipsis\\n}\\n\\n.adf-task-list-loading-margin {\\n    margin-left: calc((100% - 100px) / 2);\\n    margin-right: calc((100% - 100px) / 2);\\n}\\n\\n.no-content-message {\\n    font-family: Muli;\\n    font-size: 16px;\\n    font-weight: bold;\\n    text-align: center;\\n    opacity: 0.54;\\n    color: #000;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./ng2-activiti-tasklist/src/components/tasklist.component.css\n// module id = 425\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./apps-grid.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/apps-grid.component.css\n// module id = 437\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./apps-list.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/apps-list.component.css\n// module id = 438\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./checklist.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/checklist.component.css\n// module id = 439\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./comments.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/comments.component.css\n// module id = 440\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./tasklist.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/tasklist.component.css\n// module id = 441\n// module chunks = 3","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent of the Form.\n *\n *\n * @returns {Form} .\n */\nexport class Form {\n\n    id: number;\n    name: string;\n\n    constructor(id: number, name: string) {\n        this.name = name;\n        this.id = id;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/form.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { AppDefinitionRepresentationModel } from '../models/filter.model';\nimport { IconModel } from '../models/icon.model';\nimport { TaskListService } from './../services/tasklist.service';\n\n@Component({\n    selector: 'adf-apps, activiti-apps',\n    template: require('./apps-list.component.html'),\n    styles: [require('./apps-list.component.css'), require('./apps-grid.component.css')],\n    providers: [TaskListService]\n})\nexport class AppsListComponent implements OnInit {\n\n    public static LAYOUT_LIST: string = 'LIST';\n    public static LAYOUT_GRID: string = 'GRID';\n    public static DEFAULT_TASKS_APP: string = 'tasks';\n    public static DEFAULT_TASKS_APP_NAME: string = 'Task App';\n    public static DEFAULT_TASKS_APP_THEME: string = 'theme-2';\n    public static DEFAULT_TASKS_APP_ICON: string = 'glyphicon-asterisk';\n    public static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\n\n    @Input()\n    layoutType: string = AppsListComponent.LAYOUT_GRID;\n\n    @Input()\n    filtersAppId: any[];\n\n    @Output()\n    appClick: EventEmitter<AppDefinitionRepresentationModel> = new EventEmitter<AppDefinitionRepresentationModel>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    private appsObserver: Observer<AppDefinitionRepresentationModel>;\n    apps$: Observable<AppDefinitionRepresentationModel>;\n\n    currentApp: AppDefinitionRepresentationModel;\n\n    appList: AppDefinitionRepresentationModel [] = [];\n\n    private iconsMDL: IconModel;\n\n    /**\n     * Constructor\n     * @param translate Translate service\n     * @param activitiTaskList Task service\n     */\n    constructor(private activitiTaskList: TaskListService) {\n        this.apps$ = new Observable<AppDefinitionRepresentationModel>(observer =>  this.appsObserver = observer).share();\n    }\n\n    ngOnInit() {\n        if (!this.isValidType()) {\n            this.setDefaultLayoutType();\n        }\n\n        this.apps$.subscribe((app: any) => {\n            this.appList.push(app);\n        });\n        this.iconsMDL = new IconModel();\n        this.load();\n    }\n\n    private load() {\n        this.activitiTaskList.getDeployedApplications().subscribe(\n            (res) => {\n                res = this.filterApps(res);\n                res.forEach((app: AppDefinitionRepresentationModel) => {\n                    if (app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP) {\n                        app.name = AppsListComponent.DEFAULT_TASKS_APP_NAME;\n                        app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;\n                        app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;\n                        this.appsObserver.next(app);\n                    } else if (app.deploymentId) {\n                        this.appsObserver.next(app);\n                    }\n                });\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Pass the selected app as next\n     * @param app\n     */\n    public selectApp(app: AppDefinitionRepresentationModel) {\n        this.currentApp = app;\n        this.appClick.emit(app);\n    }\n\n    /**\n     * Return true if the appId is the current app\n     * @param appId\n     * @returns {boolean}\n     */\n    isSelected(appId: number): boolean {\n        return (this.currentApp !== undefined && appId === this.currentApp.id);\n    }\n\n    private filterApps(apps: AppDefinitionRepresentationModel []): AppDefinitionRepresentationModel[] {\n        let filteredApps = [];\n        if (this.filtersAppId) {\n            apps.filter((app: AppDefinitionRepresentationModel) => {\n                this.filtersAppId.forEach((filter) => {\n                    if (app.defaultAppId === filter.defaultAppId ||\n                        app.deploymentId === filter.deploymentId ||\n                        app.name === filter.name ||\n                        app.id === filter.id ||\n                        app.modelId === filter.modelId ||\n                        app.tenantId === filter.tenantId) {\n                        filteredApps.push(app);\n                    }\n                });\n            });\n        } else {\n            return apps;\n        }\n        return filteredApps;\n    }\n\n    /**\n     * Check if the value of the layoutType property is an allowed value\n     * @returns {boolean}\n     */\n    isValidType(): boolean {\n        if (this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Assign the default value to LayoutType\n     */\n    setDefaultLayoutType(): void {\n        this.layoutType = AppsListComponent.LAYOUT_GRID;\n    }\n\n    /**\n     * Return true if the layout type is LIST\n     * @returns {boolean}\n     */\n    isList(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_LIST;\n    }\n\n    /**\n     * Return true if the layout type is GRID\n     * @returns {boolean}\n     */\n    isGrid(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_GRID;\n    }\n\n    isEmpty(): boolean {\n        return this.appList.length === 0;\n    }\n\n    getTheme(app: AppDefinitionRepresentationModel): string {\n        return app.theme ? app.theme : '';\n    }\n\n    getBackgroundIcon(app: AppDefinitionRepresentationModel): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/apps-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\n\ndeclare let dialogPolyfill: any;\n\n@Component({\n    selector: 'adf-checklist, activiti-checklist',\n    template: require('./checklist.component.html'),\n    styles: [require('./checklist.component.css')],\n    providers: [TaskListService]\n})\nexport class ChecklistComponent implements OnInit, OnChanges {\n\n    @Input()\n    taskId: string;\n\n    @Input()\n    readOnly: boolean = false;\n\n    @Input()\n    assignee: string;\n\n    @Output()\n    checklistTaskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    @Output()\n    checklistTaskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('dialog')\n    dialog: any;\n\n    taskName: string;\n\n    checklist: TaskDetailsModel [] = [];\n\n    private taskObserver: Observer<TaskDetailsModel>;\n    task$: Observable<TaskDetailsModel>;\n\n    /**\n     * Constructor\n     * @param auth\n     * @param translate\n     */\n    constructor(private activitiTaskList: TaskListService) {\n        this.task$ = new Observable<TaskDetailsModel>(observer => this.taskObserver = observer).share();\n    }\n\n    ngOnInit() {\n        this.task$.subscribe((task: TaskDetailsModel) => {\n            this.checklist.push(task);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let taskId = changes['taskId'];\n        if (taskId && taskId.currentValue) {\n            this.getTaskChecklist(taskId.currentValue);\n            return;\n        }\n    }\n\n    public getTaskChecklist(taskId: string) {\n        this.checklist = [];\n        if (this.taskId) {\n            this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.taskObserver.next(task);\n                    });\n                },\n                (error) => {\n                    this.error.emit(error);\n                }\n            );\n        } else {\n            this.checklist = [];\n        }\n    }\n\n    public showDialog() {\n        if (this.dialog) {\n            if (!this.dialog.nativeElement.showModal) {\n                dialogPolyfill.registerDialog(this.dialog.nativeElement);\n            }\n            this.dialog.nativeElement.showModal();\n        }\n    }\n\n    public add() {\n        let newTask = new TaskDetailsModel({\n            name: this.taskName,\n            parentTaskId: this.taskId,\n            assignee: { id: this.assignee }\n        });\n        this.activitiTaskList.addTask(newTask).subscribe(\n            (res: TaskDetailsModel) => {\n                this.checklist.push(res);\n                this.checklistTaskCreated.emit(res);\n                this.taskName = '';\n            },\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n        this.cancel();\n    }\n\n    public delete(taskId: string) {\n        this.activitiTaskList.deleteTask(taskId).subscribe(\n            () => {\n                this.checklist = this.checklist.filter(check => check.id !== taskId);\n                this.checklistTaskDeleted.emit(taskId);\n            },\n            (error) => {\n                this.error.emit(error);\n            });\n    }\n\n    public cancel() {\n        if (this.dialog) {\n            this.dialog.nativeElement.close();\n        }\n        this.taskName = '';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/checklist.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable, Observer } from 'rxjs/Rx';\n\nimport { Comment } from '../models/comment.model';\nimport { PeopleService } from '../services/people.service';\nimport { TaskListService } from '../services/tasklist.service';\n\n@Component({\n    selector: 'adf-comments, activiti-comments',\n    template: require('./comments.component.html'),\n    styles: [require('./comments.component.css')]\n})\nexport class CommentsComponent implements OnChanges {\n\n    @Input()\n    taskId: string;\n\n    @Input()\n    readOnly: boolean = false;\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    comments: Comment [] = [];\n\n    private commentObserver: Observer<Comment>;\n    comment$: Observable<Comment>;\n\n    message: string;\n\n    beingAdded: boolean = false;\n\n    /**\n     * Constructor\n     * @param translate Translation service\n     * @param activitiTaskList Task service\n     */\n    constructor(private activitiTaskList: TaskListService, private peopleService: PeopleService) {\n        this.comment$ = new Observable<Comment>(observer =>  this.commentObserver = observer).share();\n        this.comment$.subscribe((comment: Comment) => {\n            this.comments.push(comment);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let taskId = changes['taskId'];\n        if (taskId) {\n            if (taskId.currentValue) {\n                this.getTaskComments(taskId.currentValue);\n            } else {\n                this.resetComments();\n            }\n        }\n    }\n\n    private getTaskComments(taskId: string): void {\n        this.resetComments();\n        if (taskId) {\n            this.activitiTaskList.getComments(taskId).subscribe(\n                (res: Comment[]) => {\n                    res = res.sort((comment1: Comment, comment2: Comment) => {\n                        let date1 = new Date(comment1.created);\n                        let date2 = new Date(comment2.created);\n                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;\n                    });\n                    res.forEach((comment) => {\n                        comment.createdBy.userImage = this.peopleService.getUserImage(comment.createdBy);\n                        this.commentObserver.next(comment);\n                    });\n                    },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n\n    private resetComments(): void {\n        this.comments = [];\n    }\n\n    add(): void {\n        if (this.message && this.message.trim() && !this.beingAdded) {\n            this.beingAdded = true;\n            this.activitiTaskList.addComment(this.taskId, this.message)\n            .subscribe(\n                (res: Comment) => {\n                        res.createdBy.userImage = this.peopleService.getUserImage(res.createdBy);\n                        this.comments.unshift(res);\n                        this.message = '';\n                        this.beingAdded = false;\n\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.beingAdded = false;\n                }\n            );\n        }\n    }\n\n    clear(): void {\n        this.message = '';\n    }\n\n    isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/comments.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ActivitiContentService } from 'ng2-activiti-form';\n\n@Component({\n    selector: 'adf-create-task-attachment',\n    styles: [require('./create-task-attachment.component.scss')],\n    template: require('./create-task-attachment.component.html')\n})\nexport class AttachmentComponent implements OnChanges {\n\n    @Input()\n    taskId: string;\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private activitiContentService: ActivitiContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.taskId = changes['taskId'].currentValue;\n        }\n    }\n\n    onFileUpload(event: any) {\n        let filesList: File[] = event.detail.files.map(obj => obj.file);\n\n        for (let fileInfoObj of filesList) {\n            let file: File = fileInfoObj;\n            let opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/create-task-attachment.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    TemplateRef\n} from '@angular/core';\nimport { TaskDetailsComponent } from './task-details.component';\n\n@Directive({\n    selector: 'no-task-details-template'\n})\nexport class NoTaskDetailsTemplateDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(\n        private activitiTaskDetails: TaskDetailsComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.activitiTaskDetails.noTaskDetailsTemplateComponent = this.template;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/no-task-detail-template.directive.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterContentInit, AfterViewInit, Component, ContentChild, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { DataColumnListComponent } from 'ng2-alfresco-core';\nimport { DataTableComponent } from 'ng2-alfresco-datatable';\nimport { UserEventModel } from '../models/user-event.model';\nimport { User } from '../models/user.model';\n\ndeclare let componentHandler: any;\n\n@Component({\n    selector: 'adf-people-list',\n    template: require('./people-list.component.html'),\n    styles: [require('./people-list.component.scss')]\n})\n\nexport class PeopleListComponent implements AfterViewInit, AfterContentInit {\n\n    @ContentChild(DataColumnListComponent) columnList: DataColumnListComponent;\n\n    @ViewChild(DataTableComponent)\n    peopleDataTable: DataTableComponent;\n\n    @Input()\n    users: User[];\n\n    @Input()\n    actions: boolean = false;\n\n    @Output()\n    clickRow: EventEmitter<User> = new EventEmitter<User>();\n\n    @Output()\n    clickAction: EventEmitter<UserEventModel> = new EventEmitter<UserEventModel>();\n\n    user: User;\n\n    ngAfterContentInit() {\n        this.peopleDataTable.columnList = this.columnList;\n    }\n\n    ngAfterViewInit() {\n        this.setupMaterialComponents(componentHandler);\n    }\n\n    setupMaterialComponents(handler?: any): boolean {\n        // workaround for MDL issues with dynamic components\n        let isUpgraded: boolean = false;\n        if (handler) {\n            handler.upgradeAllRegistered();\n            isUpgraded = true;\n        }\n        return isUpgraded;\n    }\n\n    selectUser(event: any) {\n        this.user = event.value.obj;\n        this.clickRow.emit(this.user);\n    }\n\n    hasActions(): boolean {\n        return this.actions;\n    }\n\n    onShowRowActionsMenu(event: any) {\n\n        let removeAction = {\n            title: 'Remove',\n            name: 'remove'\n        };\n\n        event.value.actions = [\n            removeAction\n        ];\n    }\n\n    onExecuteRowAction(event: any) {\n        let args = event.value;\n        let action = args.action;\n        this.clickAction.emit(new UserEventModel({type: action.name, value: args.row.obj}));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/people-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { UserEventModel } from '../models/user-event.model';\nimport { User } from '../models/user.model';\nimport { PeopleSearchComponent } from './people-search.component';\n\nimport { PeopleService } from '../services/people.service';\n\ndeclare let componentHandler: any;\ndeclare var require: any;\n\n@Component({\n    selector: 'adf-people, activiti-people',\n    template: require('./people.component.html'),\n    styles: [require('./people.component.scss')]\n})\nexport class PeopleComponent implements OnInit, AfterViewInit {\n\n    @Input()\n    iconImageUrl: string = require('../assets/images/user.jpg');\n\n    @Input()\n    people: User[] = [];\n\n    @Input()\n    taskId: string = '';\n\n    @Input()\n    readOnly: boolean = false;\n\n    @ViewChild(PeopleSearchComponent)\n    peopleSearch: PeopleSearchComponent;\n\n    showAssignment: boolean = false;\n\n    private peopleSearchObserver: Observer<User[]>;\n    peopleSearch$: Observable<User[]>;\n\n    /**\n     * Constructor\n     * @param translate\n     * @param people service\n     */\n    constructor(private peopleService: PeopleService,\n                private logService: LogService) {\n        this.peopleSearch$ = new Observable<User[]>(observer => this.peopleSearchObserver = observer).share();\n    }\n\n    ngOnInit() {\n        if (this.people && this.people.length > 0) {\n            this.people.forEach((person) => {\n                person.userImage = this.peopleService.getUserImage(person);\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        this.setupMaterialComponents(componentHandler);\n    }\n\n    setupMaterialComponents(handler?: any): boolean {\n        // workaround for MDL issues with dynamic components\n        let isUpgraded: boolean = false;\n        if (handler) {\n            handler.upgradeAllRegistered();\n            isUpgraded = true;\n        }\n        return isUpgraded;\n    }\n\n    involveUserAndCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUserAndClose();\n        }\n    }\n\n    involveUserWithoutCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUser();\n        }\n    }\n\n    searchUser(searchedWord: string) {\n        this.peopleService.getWorkflowUsersWithImages(this.taskId, searchedWord)\n            .subscribe((users) => {\n                this.peopleSearchObserver.next(users);\n            }, error => this.logService.error(error));\n    }\n\n    involveUser(user: User) {\n        this.peopleService.involveUserWithTask(this.taskId, user.id.toString())\n            .subscribe(() => {\n                this.people = [...this.people, user];\n            }, error => this.logService.error('Impossible to involve user with task'));\n    }\n\n    removeInvolvedUser(user: User) {\n        this.peopleService.removeInvolvedUser(this.taskId, user.id.toString())\n            .subscribe(() => {\n                this.people = this.people.filter((involvedUser) => {\n                    return involvedUser.id !== user.id;\n                });\n            }, error => this.logService.error('Impossible to remove involved user from task'));\n    }\n\n    getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n\n    getInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n\n    onAddAssignement() {\n        this.showAssignment = true;\n    }\n\n    onClickAction(event: UserEventModel) {\n        if (event.type === 'remove') {\n            this.removeInvolvedUser(event.value);\n        }\n    }\n\n    hasPeople() {\n        return this.people && this.people.length > 0;\n    }\n\n    isEditMode() {\n        return !this.readOnly;\n    }\n\n    onCloseSearch() {\n        this.showAssignment = false;\n    }\n\n    onErrorImageLoad(user: User) {\n        if (user.userImage) {\n            user.userImage = null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/people.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter, MD_DATE_FORMATS } from '@angular/material';\nimport * as moment from 'moment';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter } from 'ng2-alfresco-core';\nimport { LogService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\nimport { Form } from '../models/form.model';\nimport { StartTaskModel } from '../models/start-task.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { User } from '../models/user.model';\nimport { PeopleService } from '../services/people.service';\nimport { TaskListService } from './../services/tasklist.service';\n\n@Component({\n    selector: 'adf-start-task, activiti-start-task',\n    template: require('./start-task.component.html'),\n    styles: [require('./start-task.component.scss')],\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter},\n        {provide: MD_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartTaskComponent implements OnInit {\n\n    public  FORMAT_DATE: string = 'DD/MM/YYYY';\n\n    @Input()\n    appId: string;\n\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    people: User[] = [];\n\n    startTaskmodel: StartTaskModel = new StartTaskModel();\n\n    forms: Form[];\n\n    assigneeId: number;\n\n    formKey: number;\n\n    taskId: string;\n\n    dateError: boolean;\n\n    /**\n     * Constructor\n     * @param auth\n     * @param translate\n     * @param taskService\n     */\n    constructor(private taskService: TaskListService,\n                private peopleService: PeopleService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        this.loadFormsTask();\n        this.getUsers();\n    }\n\n    public start(): void {\n        if (this.startTaskmodel.name) {\n            this.startTaskmodel.category = this.appId;\n            this.taskService.createNewTask(new TaskDetailsModel(this.startTaskmodel))\n                .switchMap((createRes: any) =>\n                    this.attachForm(createRes.id, this.formKey).defaultIfEmpty(createRes)\n                        .switchMap((attachRes: any) =>\n                            this.assignTaskByUserId(createRes.id, this.assigneeId).defaultIfEmpty(attachRes ? attachRes : createRes)\n                        )\n                )\n                .subscribe(\n                    (res: any) => {\n                        this.success.emit(res);\n                    },\n                    (err) => {\n                        this.error.emit(err);\n                        this.logService.error('An error occurred while creating new task');\n                    });\n        }\n    }\n\n    private attachForm(taskId: string, formKey: number): Observable<any> {\n        let response = Observable.of();\n        if (taskId && formKey) {\n            response = this.taskService.attachFormToATask(taskId, formKey);\n        }\n        return response;\n    }\n\n    private assignTaskByUserId(taskId: string, userId: any): Observable<any> {\n        let response = Observable.of();\n        if (taskId && userId) {\n            response = this.taskService.assignTaskByUserId(taskId, userId);\n        }\n        return response;\n    }\n\n    public onCancel(): void {\n        this.cancel.emit();\n    }\n\n    private loadFormsTask(): void {\n        this.taskService.getFormList().subscribe((res: Form[]) => {\n                this.forms = res;\n            },\n            (err) => {\n                this.error.emit(err);\n                this.logService.error('An error occurred while trying to get the forms');\n            });\n    }\n\n    private getUsers(): void {\n        this.peopleService.getWorkflowUsers().subscribe((users) => {\n            this.people = users;\n        }, (err) => {\n            this.error.emit(err);\n            this.logService.error('Could not load users');\n        });\n    }\n\n    public isUserNameEmpty(user: any): boolean {\n        return !user || (this.isEmpty(user.firstName) && this.isEmpty(user.lastName));\n    }\n\n    private isEmpty(data: string): boolean {\n        return data === undefined || data === null || data.trim().length === 0;\n    }\n\n    public getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n\n    onDateChanged(newDateValue): void {\n        this.dateError = false;\n\n        if (newDateValue) {\n            let momentDate = moment(newDateValue, this.FORMAT_DATE, true);\n            if (!momentDate.isValid()) {\n                this.dateError = true;\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/start-task.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { FilterParamsModel, FilterRepresentationModel } from '../models/filter.model';\nimport { TaskListService } from './../services/tasklist.service';\n\n@Component({\n    selector: 'adf-filters, activiti-filters',\n    template: require('./task-filters.component.html'),\n    styles: [require('./task-filters.component.scss')]\n})\nexport class TaskFiltersComponent implements OnInit, OnChanges {\n\n    @Input()\n    filterParam: FilterParamsModel;\n\n    @Output()\n    filterClick: EventEmitter<FilterRepresentationModel> = new EventEmitter<FilterRepresentationModel>();\n\n    @Output()\n    onSuccess: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    onError: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    appId: string;\n\n    @Input()\n    appName: string;\n\n    @Input()\n    hasIcon: boolean = true;\n\n    private filterObserver: Observer<FilterRepresentationModel>;\n    filter$: Observable<FilterRepresentationModel>;\n\n    currentFilter: FilterRepresentationModel;\n\n    filters: FilterRepresentationModel [] = [];\n\n    constructor(private activiti: TaskListService) {\n        this.filter$ = new Observable<FilterRepresentationModel>(observer => this.filterObserver = observer).share();\n    }\n\n    ngOnInit() {\n        this.filter$.subscribe((filter: FilterRepresentationModel) => {\n            this.filters.push(filter);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let appId = changes['appId'];\n        if (appId && (appId.currentValue || appId.currentValue === null)) {\n            this.getFiltersByAppId(appId.currentValue);\n            return;\n        }\n        let appName = changes['appName'];\n        if (appName && appName !== null && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n            return;\n        }\n\n        this.getFiltersByAppId();\n    }\n\n    /**\n     * Return the task list filtered by appId or by appName\n     * @param appId\n     * @param appName\n     */\n    getFilters(appId?: string, appName?: string) {\n        if (appName) {\n            this.getFiltersByAppName(appName);\n        } else {\n            this.getFiltersByAppId(appId);\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appId\n     * @param appId - optional\n     */\n    getFiltersByAppId(appId?: string) {\n        this.activiti.getTaskListFilters(appId).subscribe(\n            (res: FilterRepresentationModel[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.activiti.createDefaultFilters(appId).subscribe(\n                        (resDefault: FilterRepresentationModel[]) => {\n                            this.resetFilter();\n                            resDefault.forEach((filter) => {\n                                this.filterObserver.next(filter);\n                            });\n\n                            this.selectTaskFilter(this.filterParam, this.filters);\n                            this.onSuccess.emit(resDefault);\n                        },\n                        (errDefault: any) => {\n                            this.onError.emit(errDefault);\n                        }\n                    );\n                } else {\n                    this.resetFilter();\n                    res.forEach((filter) => {\n                        this.filterObserver.next(filter);\n                    });\n\n                    this.selectTaskFilter(this.filterParam, this.filters);\n                    this.onSuccess.emit(res);\n                }\n            },\n            (err: any) => {\n                this.onError.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     * @param appName\n     */\n    getFiltersByAppName(appName: string) {\n        this.activiti.getDeployedApplications(appName).subscribe(\n            application => {\n                this.getFiltersByAppId(application.id);\n                this.selectTaskFilter(this.filterParam, this.filters);\n            },\n            (err) => {\n                this.onError.emit(err);\n            });\n    }\n\n    /**\n     * Pass the selected filter as next\n     * @param filter\n     */\n    public selectFilter(filter: FilterRepresentationModel) {\n        this.currentFilter = filter;\n        this.filterClick.emit(filter);\n    }\n\n    public selectFilterWithTask(taskId: string) {\n        let filteredFilterList: FilterRepresentationModel[] = [];\n        this.activiti.getFilterForTaskById(taskId, this.filters).subscribe(\n            (filter: FilterRepresentationModel) => {\n                filteredFilterList.push(filter);\n            },\n            (err) => {\n                this.onError.emit(err);\n            },\n            () => {\n                if (filteredFilterList.length > 0) {\n                    this.selectTaskFilter(new FilterParamsModel({name: 'My Tasks'}), filteredFilterList);\n                    this.currentFilter.landingTaskId = taskId;\n                    this.filterClick.emit(this.currentFilter);\n                }\n            });\n    }\n\n    /**\n     * Select the first filter of a list if present\n     */\n    public selectTaskFilter(filterParam: FilterParamsModel, filteredFilterList: FilterRepresentationModel[]) {\n        let findTaskFilter;\n        if (filterParam) {\n            filteredFilterList.filter((taskFilter: FilterRepresentationModel, index) => {\n                if (filterParam.name && filterParam.name.toLowerCase() === taskFilter.name.toLowerCase() ||\n                    filterParam.id === taskFilter.id || filterParam.index === index) {\n                    findTaskFilter = taskFilter;\n                }\n            });\n        }\n        if (findTaskFilter) {\n            this.currentFilter = findTaskFilter;\n        } else {\n             this.selectDefaultTaskFilter(filteredFilterList);\n        }\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter(filteredFilterList: FilterRepresentationModel[]) {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Return the current task\n     * @returns {FilterRepresentationModel}\n     */\n    getCurrentFilter(): FilterRepresentationModel {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     * @returns {boolean}\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/task-filters.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { CardViewDateItemModel, CardViewItem, CardViewMapItemModel, CardViewTextItemModel, LogService } from 'ng2-alfresco-core';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\n\n@Component({\n    selector: 'adf-task-header, activiti-task-header',\n    template: require('./task-header.component.html'),\n    styles: [require('./task-header.component.scss')]\n})\nexport class TaskHeaderComponent implements OnChanges {\n\n    @Input()\n    formName: string = null;\n\n    @Input()\n    taskDetails: TaskDetailsModel;\n\n    @Output()\n    claim: EventEmitter<any> = new EventEmitter<any>();\n\n    properties: CardViewItem [];\n    inEdit: boolean = false;\n\n    constructor(private activitiTaskService: TaskListService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n\n    refreshData() {\n        if (this.taskDetails) {\n            let valueMap = new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);\n            this.properties = [\n                new CardViewTextItemModel({ label: 'Assignee', value: this.taskDetails.getFullName(), key: 'assignee', default: 'No assignee', clickable: !this.isCompleted() } ),\n                new CardViewTextItemModel({ label: 'Status', value: this.getTaskStatus(), key: 'status' }),\n                new CardViewDateItemModel({ label: 'Due Date', value: this.taskDetails.dueDate, key: 'dueDate', default: 'No date', editable: true }),\n                new CardViewTextItemModel({ label: 'Category', value: this.taskDetails.category, key: 'category', default: 'No category' }),\n                new CardViewMapItemModel({ label: 'Parent name', value: valueMap, key: 'parentName', default: 'No parent name', clickable: true  }),\n                new CardViewTextItemModel({ label: 'Created By', value: this.taskDetails.getFullName(), key: 'created-by', default: 'No assignee' }),\n                new CardViewDateItemModel({ label: 'Created', value: this.taskDetails.created, key: 'created' }),\n                new CardViewTextItemModel({ label: 'Id', value: this.taskDetails.id, key: 'id' }),\n                new CardViewTextItemModel({\n                    label: 'Description',\n                    value: this.taskDetails.description,\n                    key: 'description',\n                    default: 'No description',\n                    multiline: true,\n                    editable: true\n                }),\n                new CardViewTextItemModel({ label: 'Form name', value: this.formName, key: 'formName', default: 'No form' })\n            ];\n        }\n    }\n\n    public hasAssignee(): boolean {\n        return (this.taskDetails && this.taskDetails.assignee) ? true : false;\n    }\n\n    isAssignedToMe(): boolean {\n        return this.taskDetails.assignee ? true : false;\n    }\n\n    getTaskStatus(): string {\n        return this.isCompleted() ? 'Completed' : 'Running';\n    }\n\n    claimTask(taskId: string) {\n        this.activitiTaskService.claimTask(taskId).subscribe(\n            (res: any) => {\n                this.logService.info('Task claimed');\n                this.claim.emit(taskId);\n            });\n    }\n\n    isCompleted() {\n        return !!this.taskDetails.endDate;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/task-header.component.ts","module.exports = \"<div class=\\\"menu-container\\\" *ngIf=\\\"!isEmpty()\\\">\\n    <ul class='mdl-list' *ngIf=\\\"isList()\\\">\\n        <li class=\\\"mdl-list__item\\\" (click)=\\\"selectApp(app)\\\" (keyup.enter)=\\\"selectApp(app)\\\" *ngFor=\\\"let app of appList\\\" tabindex=\\\"0\\\" role=\\\"button\\\" title=\\\"{{app.name}}\\\">\\n            <span class=\\\"mdl-list__item-primary-content\\\">\\n            <i class=\\\"material-icons mdl-list__item-icon\\\">touch_app</i>\\n            {{app.name}}\\n            </span>\\n        </li>\\n    </ul>\\n    <div class=\\\"mdl-grid\\\" *ngIf=\\\"isGrid()\\\">\\n        <div (click)=\\\"selectApp(app)\\\" (keyup.enter)=\\\"selectApp(app)\\\" [ngClass]=\\\"['mdl-card mdl-cell',  getTheme(app)]\\\" *ngFor=\\\"let app of appList\\\" tabindex=\\\"0\\\" role=\\\"button\\\" title=\\\"{{app.name}}\\\">\\n            <div class=\\\"logo\\\"><i class=\\\"material-icons\\\">{{getBackgroundIcon(app)}}</i></div>\\n            <div class=\\\"mdl-card__title\\\">\\n                <h1 class=\\\"mdl-card__title-text application-title\\\">{{app.name}}</h1>\\n            </div>\\n            <div class=\\\"mdl-card__supporting-text\\\">\\n                <p>{{app.description}}</p>\\n            </div>\\n            <div class=\\\"mdl-card__actions mdl-card--border\\\">\\n                <i class=\\\"material-icons selectedIcon\\\" *ngIf=\\\"isSelected(app.id)\\\">done</i>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"menu-container\\\" *ngIf=\\\"isEmpty()\\\">\\n    {{ 'APPS.NONE' | translate }}\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/apps-list.component.html\n// module id = 582\n// module chunks = 3","module.exports = \"<span class=\\\"activiti-label mdl-badge\\\" id=\\\"checklist-label\\\"\\n      [attr.data-badge]=\\\"checklist?.length\\\">{{ 'TASK_DETAILS.LABELS.CHECKLIST' | translate }}</span>\\n<div *ngIf=\\\"!readOnly\\\" id=\\\"addChecklist\\\" (click)=\\\"showDialog()\\\" id=\\\"add-checklist\\\" class=\\\"icon material-icons\\\">add</div>\\n<div *ngIf=\\\"!readOnly\\\" class=\\\"mdl-tooltip\\\" for=\\\"add-checklist\\\">\\n    Add a checklist\\n</div>\\n<div class=\\\"menu-container\\\" *ngIf=\\\"checklist?.length > 0\\\">\\n    <ul class='mdl-list'>\\n        <li class=\\\"mdl-list__item\\\" *ngFor=\\\"let check of checklist\\\">\\n            <span class=\\\"mdl-chip mdl-chip--deletable\\\" id=\\\"check-{{check.id}}\\\">\\n                <span class=\\\"mdl-chip__text\\\">{{check.name}}</span>\\n                <button type=\\\"button\\\" class=\\\"mdl-chip__action\\\" (click)=\\\"delete(check.id)\\\">\\n                    <i id=\\\"remove-{{check.id}}\\\" class=\\\"material-icons\\\">cancel</i>\\n                </button>\\n            </span>\\n        </li>\\n    </ul>\\n</div>\\n<div *ngIf=\\\"checklist?.length === 0\\\" id=\\\"checklist-none-message\\\">\\n    {{ 'TASK_DETAILS.CHECKLIST.NONE' | translate }}\\n</div>\\n\\n<dialog class=\\\"mdl-dialog\\\" id=\\\"checklist-dialog\\\" #dialog>\\n    <h4 class=\\\"mdl-dialog__title\\\" id=\\\"add-checklist-title\\\">New Check</h4>\\n    <div class=\\\"mdl-dialog__content\\\">\\n        <md-input-container>\\n            <input mdInput placeholder=\\\"Name\\\" [(ngModel)]=\\\"taskName\\\" id=\\\"checklist-name\\\"  data-automation-id=\\\"checklist-name\\\">\\n        </md-input-container>\\n    </div>\\n    <div class=\\\"mdl-dialog__actions\\\">\\n        <button type=\\\"button\\\" id=\\\"add-check\\\" (click)=\\\"add()\\\" class=\\\"mdl-button\\\">Add Checklist</button>\\n        <button type=\\\"button\\\" id=\\\"close-check-dialog\\\" (click)=\\\"cancel()\\\" class=\\\"mdl-button close\\\">Cancel</button>\\n    </div>\\n</dialog>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/checklist.component.html\n// module id = 583\n// module chunks = 3","module.exports = \"<adf-datatable\\n    [rows]=\\\"comments\\\"\\n    (rowClick)=\\\"selectComment($event)\\\" *ngIf=\\\"hasComments()\\\">\\n\\n    <data-columns>\\n        <data-column key=\\\"createdBy\\\">\\n            <ng-template let-entry=\\\"$implicit\\\">\\n                <div id=\\\"comment-user-icon\\\"\\n                class=\\\"adf-comment-img-container\\\">\\n                    <div\\n                        *ngIf=\\\"!entry.row.obj.createdBy.userImage\\\" class=\\\"adf-comment-user-icon\\\">\\n                            {{getUserShortName(entry.row.obj.createdBy)}}</div>\\n                    <div>\\n                        <img *ngIf=\\\"entry.row.obj.createdBy.userImage\\\" class=\\\"adf-people-img\\\"\\n                            [src]=\\\"entry.row.obj.createdBy.userImage\\\"\\n                            (error)=\\\"onErrorImageLoad(entry.row.obj.createdBy)\\\"/>\\n                    </div>\\n                </div>\\n            </ng-template>\\n        </data-column>\\n        <data-column key=\\\"message\\\">\\n            <ng-template let-entry=\\\"$implicit\\\">\\n                <div class=\\\"adf-comment-contents\\\">\\n                    <div id=\\\"comment-user\\\" class=\\\"adf-comment-user-name\\\">\\n                        {{entry.row.obj.createdBy?.firstName}} {{entry.row.obj.createdBy?.lastName}}\\n                    </div>\\n                    <div id=\\\"comment-message\\\" class=\\\"adf-comment-message\\\">\\n                        {{entry.row.obj.message}}\\n                    </div>\\n                    <div id=\\\"comment-time\\\" class=\\\"adf-comment-message-time\\\">\\n                        {{transformDate(entry.row.obj.created)}}\\n                    </div>\\n                </div>\\n            </ng-template>\\n        </data-column>\\n    </data-columns>\\n\\n</adf-datatable>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/comment-list.component.html\n// module id = 584\n// module chunks = 3","module.exports = \"<div class=\\\"adf-comments-container\\\">\\n    <div id=\\\"comment-header\\\" class=\\\"adf-comments-header\\\">\\n        {{'TASK_DETAILS.COMMENTS.HEADER' | translate}}({{comments?.length}})\\n    </div>\\n    <div class=\\\"adf-comments-input-container\\\" *ngIf=\\\"!isReadOnly()\\\">\\n            <md-input-container class=\\\"adf-full-width\\\">\\n                <input mdInput id=\\\"comment-input\\\" placeholder=\\\"{{'TASK_DETAILS.COMMENTS.ADD' | translate}}\\\" [(ngModel)]=\\\"message\\\" (keyup.enter)=\\\"add()\\\" (keyup.esc)=\\\"clear()\\\">\\n            </md-input-container>\\n    </div>\\n\\n    <div *ngIf=\\\"comments.length > 0\\\">\\n        <adf-comment-list [comments]=\\\"comments\\\">\\n        </adf-comment-list>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/comments.component.html\n// module id = 585\n// module chunks = 3","module.exports = \"<button\\n    md-button\\n    md-raised-button\\n    md-icon-button\\n    class=\\\"adf-create-attachment\\\"\\n    [adf-upload]=\\\"true\\\"\\n    mode=\\\"['click']\\\"\\n    [multiple]=\\\"true\\\"\\n    (upload-files)=\\\"onFileUpload($event)\\\">\\n    <md-icon>add</md-icon>\\n</button>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/create-task-attachment.component.html\n// module id = 586\n// module chunks = 3","module.exports = \"<adf-datatable\\n    [rows]=\\\"users\\\"\\n    [actions]=\\\"hasActions()\\\"\\n    (rowClick)=\\\"selectUser($event)\\\"\\n    (rowDblClick)=\\\"selectUser($event)\\\"\\n    (showRowActionsMenu)=\\\"onShowRowActionsMenu($event)\\\"\\n    (executeRowAction)=\\\"onExecuteRowAction($event)\\\">\\n</adf-datatable>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/people-list.component.html\n// module id = 587\n// module chunks = 3","module.exports = \"<div class=\\\"search-text-header\\\">\\n    <ng-content select=\\\"[people-search-title]\\\"></ng-content>\\n</div>\\n<md-input-container class=\\\"search-text-container\\\">\\n\\t<input mdInput placeholder=\\\"{{'PEOPLE.SEARCH_USER'|translate}}\\\" type=\\\"text\\\" id=\\\"userSearchText\\\" [value]=\\\"\\\" [formControl]=\\\"searchUser\\\">\\n</md-input-container>\\n<div class=\\\"search-list-container\\\" id=\\\"search-people-list\\\" *ngIf=\\\"hasUsers()\\\">\\n    <adf-people-list\\n    [users]=\\\"users\\\"\\n    (clickRow)=\\\"onRowClick($event)\\\">\\n        <data-columns>\\n            <data-column key=\\\"firstName\\\">\\n                <ng-template let-entry=\\\"$implicit\\\">\\n                        <div *ngIf=\\\"!entry.row.obj.userImage\\\" class=\\\"people-pic\\\">\\n                            {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\\n                        <div>\\n                            <img *ngIf=\\\"entry.row.obj.userImage\\\" class=\\\"people-img\\\"\\n                                [src]=\\\"entry.row.obj.userImage\\\"\\n                                (error)=\\\"onErrorImageLoad(entry.row.obj)\\\"/>\\n                        </div>\\n                </ng-template>\\n            </data-column>\\n            <data-column key=\\\"email\\\" class=\\\"full-width\\\">\\n                <ng-template let-entry=\\\"$implicit\\\">\\n                    <div class=\\\"people-full-name\\\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\\n                </ng-template>\\n            </data-column>\\n        </data-columns>\\n    </adf-people-list>\\n</div>\\n<div class=\\\"search-list-action-container\\\">\\n    <button md-button type=\\\"button\\\" id=\\\"close-people-search\\\" (click)=\\\"closeSearchList()\\\">\\n        {{'PEOPLE.DIALOG_CLOSE' | translate }}\\n    </button>\\n    <button md-button type=\\\"button\\\" id=\\\"add-people\\\" (click)=\\\"involveUserAndClose()\\\">\\n        <ng-content select=\\\"[people-search-action-label]\\\"></ng-content>\\n    </button>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/people-search.component.html\n// module id = 588\n// module chunks = 3","module.exports = \"<div class=\\\"mdl-grid mdl-shadow--2dp assignment-top-container\\\">\\n    <div class=\\\"assignment-header\\\">\\n        <div *ngIf=\\\"hasPeople()\\\" class=\\\"assigment-count\\\" id=\\\"people-title\\\">\\n            {{ 'TASK_DETAILS.LABELS.PEOPLE' | translate }} {{ ' (' + people.length + ')' }}\\n        </div>\\n        <div *ngIf=\\\"!hasPeople()\\\" class=\\\"assigment-count\\\" id=\\\"no-people-label\\\">\\n            {{ 'TASK_DETAILS.PEOPLE.NONE' | translate }}\\n        </div>\\n        <div *ngIf=\\\"isEditMode()\\\" class=\\\"add-people\\\" (click)=\\\"onAddAssignement()\\\">\\n            <i class=\\\"material-icons\\\">person_add</i>\\n        </div>\\n    </div>\\n    <div class=\\\"assignment-container\\\" *ngIf=\\\"showAssignment\\\">\\n        <adf-people-search\\n        (searchPeople)=\\\"searchUser($event)\\\"\\n        (success)=\\\"involveUser($event)\\\"\\n        (closeSearch)=\\\"onCloseSearch()\\\"\\n        [results]=\\\"peopleSearch$\\\">\\n            <ng-container people-search-title>{{ 'TASK_DETAILS.LABELS.ADD_PEOPLE' | translate }}</ng-container>\\n            <ng-container people-search-action-label>{{ 'PEOPLE.ADD_USER' | translate }}</ng-container>\\n        </adf-people-search>\\n    </div>\\n    <div class=\\\"assignment-list-container\\\" id=\\\"assignment-people-list\\\" *ngIf=\\\"hasPeople()\\\">\\n        <adf-people-list\\n        [users]=\\\"people\\\"\\n        [actions]=\\\"isEditMode()\\\"\\n        (clickAction)=\\\"onClickAction($event)\\\">\\n            <data-columns>\\n                <data-column key=\\\"firstName\\\">\\n                    <ng-template let-entry=\\\"$implicit\\\">\\n                        <div *ngIf=\\\"!entry.row.obj.userImage\\\" class=\\\"people-pic\\\">\\n                            {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\\n                        <div>\\n                            <img *ngIf=\\\"entry.row.obj.userImage\\\" class=\\\"people-img\\\"\\n                                [src]=\\\"entry.row.obj.userImage\\\"\\n                                (error)=\\\"onErrorImageLoad(entry.row.obj)\\\"/>\\n                        </div>\\n                    </ng-template>\\n                </data-column>\\n                <data-column key=\\\"email\\\" class=\\\"full-width\\\">\\n                    <ng-template let-entry=\\\"$implicit\\\">\\n                        <div class=\\\"people-full-name\\\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\\n                        <div class=\\\"people-email\\\">{{ entry.row.obj.email }}</div>\\n                        <div class=\\\"people-edit-label\\\">can edit</div>\\n                    </ng-template>\\n                </data-column>\\n            </data-columns>\\n        </adf-people-list>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/people.component.html\n// module id = 589\n// module chunks = 3","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterContentInit, Component, ContentChild, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { DataColumnListComponent } from 'ng2-alfresco-core';\nimport { DataColumn, DataRowEvent, DataTableAdapter, ObjectDataRow, ObjectDataTableAdapter } from 'ng2-alfresco-datatable';\nimport { Observable } from 'rxjs/Rx';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport { TaskListService } from './../services/tasklist.service';\n\nconst DEFAULT_SIZE = 5;\n@Component({\n    selector: 'adf-tasklist, activiti-tasklist',\n    template: require('./tasklist.component.html'),\n    styles: [require('./tasklist.component.css')]\n})\nexport class TaskListComponent implements OnChanges, OnInit, AfterContentInit {\n\n    requestNode: TaskQueryRequestRepresentationModel;\n\n    @ContentChild(DataColumnListComponent) columnList: DataColumnListComponent;\n\n    @Input()\n    appId: string;\n\n    @Input()\n    processInstanceId: string;\n\n    @Input()\n    processDefinitionKey: string;\n\n    @Input()\n    state: string;\n\n    @Input()\n    assignment: string;\n\n    @Input()\n    sort: string;\n\n    @Input()\n    name: string;\n\n    @Input()\n    landingTaskId: string;\n\n    @Input()\n    data: DataTableAdapter;\n\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output()\n    onSuccess: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    onError: EventEmitter<any> = new EventEmitter<any>();\n\n    currentInstanceId: string;\n\n    @Input()\n    page: number = 0;\n\n    @Input()\n    size: number = DEFAULT_SIZE;\n\n    isLoading: boolean = true;\n\n    /**\n     * Toggles custom data source mode.\n     * When enabled the component reloads data from it's current source instead of the server side.\n     * This allows generating and displaying custom data sets (i.e. filtered out content).\n     *\n     * @type {boolean}\n     * @memberOf TaskListComponent\n     */\n    hasCustomDataSource: boolean = false;\n\n    private defaultSchemaColumn: DataColumn[] = [\n        { type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true },\n        { type: 'text', key: 'created', title: 'Created', cssClass: 'hidden', sortable: true }\n    ];\n\n    constructor(private taskListService: TaskListService) {\n    }\n\n    ngOnInit() {\n        if (this.data === undefined) {\n            this.data = new ObjectDataTableAdapter();\n        }\n        this.taskListService.tasksList$.subscribe(\n            (tasks) => {\n                let instancesRow = this.createDataRow(tasks.data);\n                this.renderInstances(instancesRow);\n                this.selectTask(this.landingTaskId);\n                this.onSuccess.emit(tasks);\n                this.isLoading = false;\n        }, (error) => {\n            this.onError.emit(error);\n            this.isLoading = false;\n        });\n    }\n\n    ngAfterContentInit() {\n        this.setupSchema();\n    }\n\n    /**\n     * Setup html-based (html definitions) or code behind (data adapter) schema.\n     * If component is assigned with an empty data adater the default schema settings applied.\n     */\n    setupSchema(): void {\n        let schema: DataColumn[] = [];\n\n        if (this.columnList && this.columnList.columns && this.columnList.columns.length > 0) {\n            schema = this.columnList.columns.map(c => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ObjectDataTableAdapter([], schema.length > 0 ? schema : this.defaultSchemaColumn);\n        } else {\n            if (schema && schema.length > 0) {\n                this.data.setColumns(schema);\n            } else if (this.data.getColumns().length === 0) {\n                this.data.setColumns(this.defaultSchemaColumn);\n            }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes)) {\n            this.reload();\n        }\n    }\n\n    setCustomDataSource(rows: ObjectDataRow[]): void {\n        if (this.data) {\n            this.data.setRows(rows);\n            this.hasCustomDataSource = true;\n        }\n    }\n\n    private isPropertyChanged(changes: SimpleChanges): boolean {\n        let changed: boolean = true;\n\n        let landingTaskId = changes['landingTaskId'];\n        if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {\n            changed = false;\n        }\n        return changed;\n    }\n\n    reload(): void {\n        if (!this.hasCustomDataSource) {\n            this.requestNode = this.createRequestNode();\n            this.load(this.requestNode);\n        }\n    }\n\n    private load(requestNode: TaskQueryRequestRepresentationModel) {\n        this.isLoading = true;\n        this.loadTasksByState().subscribe();\n    }\n\n    private loadTasksByState(): Observable<TaskListModel> {\n        return this.requestNode.state === 'all'\n               ? this.taskListService.findAllTasksWhitoutState(this.requestNode)\n               : this.taskListService.findTasksByState(this.requestNode);\n    }\n\n    /**\n     * Create an array of ObjectDataRow\n     * @param instances\n     * @returns {ObjectDataRow[]}\n     */\n    private createDataRow(instances: any[]): ObjectDataRow[] {\n        let instancesRows: ObjectDataRow[] = [];\n        instances.forEach((row) => {\n            instancesRows.push(new ObjectDataRow(row));\n        });\n        return instancesRows;\n    }\n\n    /**\n     * Render the instances list\n     *\n     * @param instances\n     */\n    private renderInstances(instances: any[]) {\n        instances = this.optimizeNames(instances);\n        this.data.setRows(instances);\n    }\n\n    /**\n     * Select the task given in input if present\n     */\n    selectTask(taskIdToSelect: string): void {\n        if (!this.isListEmpty()) {\n            let rows = this.data.getRows();\n            if (rows.length > 0) {\n                let dataRow = rows.find(row => row.getValue('id') === taskIdToSelect) || rows[0];\n                this.data.selectedRow = dataRow;\n                this.currentInstanceId = dataRow.getValue('id');\n            }\n        } else {\n            if (this.data) {\n                this.data.selectedRow = null;\n            }\n            this.currentInstanceId = null;\n        }\n    }\n\n    /**\n     * Return the current id\n     * @returns {string}\n     */\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    /**\n     * Check if the taskId is the same of the selected task\n     * @param taskId\n     * @returns {boolean}\n     */\n    isEqualToCurrentId(taskId: string) {\n        return this.currentInstanceId === taskId ? true : false;\n    }\n\n    /**\n     * Check if the list is empty\n     * @returns {ObjectDataTableAdapter|boolean}\n     */\n    isListEmpty(): boolean {\n        return this.data === undefined ||\n            (this.data && this.data.getRows() && this.data.getRows().length === 0);\n    }\n\n    /**\n     * Emit the event rowClick passing the current task id when the row is clicked\n     * @param event\n     */\n    onRowClick(event: DataRowEvent) {\n        let item = event;\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    /**\n     * Optimize name field\n     * @param istances\n     * @returns {any[]}\n     */\n    private optimizeNames(istances: any[]) {\n        istances = istances.map(t => {\n            t.obj.name = t.obj.name || 'No name';\n            return t;\n        });\n        return istances;\n    }\n\n    private createRequestNode() {\n\n        let requestNode = {\n            appDefinitionId: this.appId,\n            processInstanceId: this.processInstanceId,\n            processDefinitionKey: this.processDefinitionKey,\n            text: this.name,\n            assignment: this.assignment,\n            state: this.state,\n            sort: this.sort,\n            landingTaskId: this.landingTaskId,\n            page: this.page,\n            size: this.size,\n            start: 0\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/components/tasklist.component.ts","module.exports = \"<md-card class=\\\"adf-new-task-layout-card\\\">\\n    <md-grid-list cols=\\\"1\\\" rowHeight=\\\"60px\\\">\\n        <md-grid-tile>\\n            <div class=\\\"adf-new-task-heading\\\">{{'START_TASK.FORM.TITLE'|translate}}</div>\\n        </md-grid-tile>\\n    </md-grid-list>\\n    <md-card-content>\\n        <md-grid-list cols=\\\"1\\\" rowHeight=\\\"80px\\\">\\n            <md-grid-tile>\\n                <md-input-container class=\\\"adf-new-task-text-width\\\">\\n                    <input mdInput placeholder=\\\"{{'START_TASK.FORM.LABEL.NAME'|translate}}\\\"\\n                           [(ngModel)]=\\\"startTaskmodel.name\\\" required id=\\\"name_id\\\">\\n                </md-input-container>\\n            </md-grid-tile>\\n        </md-grid-list>\\n        <md-grid-list cols=\\\"1\\\" rowHeight=\\\"80px\\\">\\n            <md-grid-tile>\\n                <md-input-container class=\\\"adf-new-task-text-width\\\">\\n                    <textarea mdInput placeholder=\\\"{{'START_TASK.FORM.LABEL.DESCRIPTION'|translate}}\\\"\\n                              [(ngModel)]=\\\"startTaskmodel.description\\\" id=\\\"description_id\\\"></textarea>\\n                </md-input-container>\\n            </md-grid-tile>\\n        </md-grid-list>\\n        <md-grid-list cols=\\\"2\\\" rowHeight=\\\"80px\\\">\\n            <md-grid-tile>\\n                <md-input-container class=\\\"adf-start-task-input-container\\\">\\n                    <input mdInput\\n                           [mdDatepicker]=\\\"taskDatePicker\\\"\\n                           (keydown)=\\\"true\\\"\\n                           (focusout)=\\\"onDateChanged($event.srcElement.value)\\\"\\n                           placeholder=\\\"{{'START_TASK.FORM.LABEL.DATE'|translate}}\\\"\\n                           [(ngModel)]=\\\"startTaskmodel.dueDate\\\" id=\\\"date_id\\\">\\n                    <button mdSuffix [mdDatepickerToggle]=\\\"taskDatePicker\\\"></button>\\n                </md-input-container>\\n                <md-datepicker #taskDatePicker [touchUi]=\\\"true\\\"\\n                               (selectedChanged)=\\\"onDateChanged($event)\\\"></md-datepicker>\\n                <div class=\\\"adf-error-text-container\\\">\\n                    <div *ngIf=\\\"dateError\\\">\\n                        <div class=\\\"adf-error-text\\\">{{'START_TASK.FORM.DATE.ERROR'|translate}}</div>\\n                        <i class=\\\"material-icons adf-error-icon\\\">warning</i>\\n                    </div>\\n                </div>\\n            </md-grid-tile>\\n            <md-grid-tile>\\n                <md-select placeholder=\\\"{{'START_TASK.FORM.LABEL.ASSIGNEE'|translate}}\\\" id=\\\"assignee_id\\\"\\n                           class=\\\"adf-start-task-input-container\\\" [(ngModel)]=\\\"assigneeId\\\">\\n                    <md-option>{{'START_TASK.FORM.LABEL.NONE'|translate}}</md-option>\\n\\t\\t\\t\\t\\t<span *ngFor=\\\"let user of people\\\">\\n\\t\\t\\t\\t\\t\\t<md-option [value]=\\\"user.id\\\" *ngIf=\\\"!isUserNameEmpty(user)\\\">{{ getDisplayUser(user.firstName,\\n                            user.lastName, ' ')}}\\n                        </md-option>\\n\\t\\t\\t\\t\\t</span>\\n                </md-select>\\n            </md-grid-tile>\\n        </md-grid-list>\\n        <md-grid-list cols=\\\"2\\\" rowHeight=\\\"80px\\\">\\n            <md-grid-tile>\\n                <md-select placeholder=\\\"{{'START_TASK.FORM.LABEL.FORM'|translate}}\\\" id=\\\"form_id\\\" [(ngModel)]=\\\"formKey\\\"\\n                           class=\\\"adf-start-task-input-container\\\">\\n                    <md-option>{{'START_TASK.FORM.LABEL.NONE'|translate}}</md-option>\\n                    <md-option *ngFor=\\\"let form of forms\\\" [value]=\\\"form.id\\\">{{ form.name }}</md-option>\\n                </md-select>\\n            </md-grid-tile>\\n            <md-grid-tile></md-grid-tile>\\n        </md-grid-list>\\n    </md-card-content>\\n    <md-card-actions>\\n        <md-grid-list cols=\\\"1\\\" rowHeight=\\\"60px\\\">\\n            <md-grid-tile>\\n                <div class=\\\"adf-new-task-footer\\\">\\n                    <button md-button (click)=\\\"onCancel()\\\" id=\\\"button-cancle\\\">\\n                        {{'START_TASK.FORM.ACTION.CANCEL'|translate}}\\n                    </button>\\n                    <button md-button [disabled]=\\\"!startTaskmodel.name || dateError\\\" (click)=\\\"start()\\\" id=\\\"button-start\\\">\\n                        {{'START_TASK.FORM.ACTION.START'|translate}}\\n                    </button>\\n                </div>\\n            </md-grid-tile>\\n        </md-grid-list>\\n    </md-card-actions>\\n</md-card>\\n\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/start-task.component.html\n// module id = 590\n// module chunks = 3","module.exports = \"<adf-datatable [rows]=\\\"attachments\\\" [actions]=\\\"true\\\" [loading]=\\\"isLoading\\\" (rowDblClick)=\\\"openContent($event)\\\" (showRowActionsMenu)=\\\"onShowRowActionsMenu($event)\\\"\\n    (executeRowAction)=\\\"onExecuteRowAction($event)\\\">\\n    <adf-empty-list *ngIf=\\\"isEmpty()\\\">\\n        <div adf-empty-list-header class=\\\"adf-empty-list-header\\\"> {{'TASK-ATTACHMENT.EMPTY.HEADER' | translate}} </div>\\n        <div adf-empty-list-body *ngIf=\\\"!isDisabled()\\\">\\n            <div class=\\\"adf-empty-list-drag_drop\\\">{{'TASK-ATTACHMENT.EMPTY.DRAG-AND-DROP.TITLE' | translate}}</div>\\n            <div class=\\\"adf-empty-list__any-files-here-to-add\\\"> {{'TASK-ATTACHMENT.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate}} </div>\\n        </div>\\n        <div adf-empty-list-footer *ngIf=\\\"!isDisabled()\\\">\\n            <img class=\\\"adf-empty-list__empty_doc_lib\\\" [src]=\\\"emptyListImageUrl\\\">\\n        </div>\\n    </adf-empty-list>\\n    <data-columns>\\n        <data-column key=\\\"icon\\\" type=\\\"icon\\\" srTitle=\\\"Thumbnail\\\" [sortable]=\\\"false\\\"></data-column>\\n        <data-column key=\\\"name\\\" type=\\\"text\\\" title=\\\"Name\\\" class=\\\"full-width ellipsis-cell\\\" [sortable]=\\\"true\\\"></data-column>\\n        <data-column key=\\\"created\\\" type=\\\"date\\\" format=\\\"shortDate\\\" title=\\\"Date\\\"></data-column>\\n    </data-columns>\\n    <loading-content-template>\\n        <ng-template>\\n            <!--Add your custom loading template here-->\\n            <md-progress-spinner class=\\\"adf-attachment-list-loading-margin\\\" [color]=\\\"'primary'\\\" [mode]=\\\"'indeterminate'\\\">\\n            </md-progress-spinner>\\n        </ng-template>\\n    </loading-content-template>\\n</adf-datatable>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-attachment-list.component.html\n// module id = 591\n// module chunks = 3","module.exports = \"<div *ngIf=\\\"!taskDetails\\\">\\n    <ng-template *ngIf=\\\"noTaskDetailsTemplateComponent\\\" ngFor [ngForOf]=\\\"[data]\\\" [ngForTemplate]=\\\"noTaskDetailsTemplateComponent\\\">\\n        {{ 'TASK_DETAILS.MESSAGES.NONE' | translate }}\\n    </ng-template>\\n    <div *ngIf=\\\"!noTaskDetailsTemplateComponent\\\">\\n        {{ 'TASK_DETAILS.MESSAGES.NONE' | translate }}\\n    </div>\\n</div>\\n<div *ngIf=\\\"taskDetails\\\" class=\\\"adf-task-details\\\">\\n\\n    <div *ngIf=\\\"showHeader\\\" class=\\\"adf-task-details-header\\\">\\n        <h2 class=\\\"activiti-task-details__header\\\" (click)=\\\"toggleHeaderContent()\\\">\\n            <span>{{taskDetails.name || 'No name'}}</span>\\n        </h2>\\n        <div md-ripple [mdRippleUnbounded]=\\\"true\\\" [mdRippleCentered]=\\\"true\\\" class=\\\"adf-task-details-header-toggle\\\">\\n            <md-icon *ngIf=\\\"!showHeaderContent\\\" (click)=\\\"toggleHeaderContent()\\\">web</md-icon>\\n            <md-icon *ngIf=\\\"showHeaderContent\\\" (click)=\\\"toggleHeaderContent()\\\">web_asset</md-icon>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"adf-task-details-core\\\">\\n        <div class=\\\"adf-task-details-core-form\\\">\\n            <div *ngIf=\\\"isAssigned()\\\">\\n                <adf-form *ngIf=\\\"hasFormKey()\\\" #activitiForm\\n                    [showDebugButton]=\\\"debugMode\\\"\\n                    [taskId]=\\\"taskDetails.id\\\"\\n                    [showTitle]=\\\"showFormTitle\\\"\\n                    [showRefreshButton]=\\\"showFormRefreshButton\\\"\\n                    [showCompleteButton]=\\\"showFormCompleteButton\\\"\\n                    [disableCompleteButton]=\\\"!isAssignedToMe()\\\"\\n                    [showSaveButton]=\\\"showFormSaveButton\\\"\\n                    [readOnly]=\\\"readOnlyForm\\\"\\n                    [fieldValidators]=\\\"fieldValidators\\\"\\n                    (formSaved)='onFormSaved($event)'\\n                    (formCompleted)='onFormCompleted($event)'\\n                    (formContentClicked)='onFormContentClick($event)'\\n                    (formLoaded)='onFormLoaded($event)'\\n                    (onError)='onFormError($event)'\\n                    (executeOutcome)='onFormExecuteOutcome($event)'>\\n                    <div empty-form ><h3 class=\\\"adf-task-title\\\">Please select a Task</h3></div>\\n                </adf-form>\\n            </div>\\n            <div *ngIf=\\\"!isAssigned()\\\">\\n                {{ 'TASK_DETAILS.MESSAGES.CLAIM' | translate }}\\n            </div>\\n            <button md-raised-button class=\\\"activiti-task-details__action-button\\\" *ngIf=\\\"!hasFormKey() && isTaskActive()\\\" (click)=\\\"onComplete()\\\">\\n                    {{ 'TASK_DETAILS.BUTTON.COMPLETE' | translate }}\\n            </button>\\n        </div>\\n        <div class=\\\"adf-task-details-core-sidebar\\\">\\n            <adf-info-drawer *ngIf=\\\"showHeaderContent\\\" title=\\\"Activities\\\" class=\\\"adf-task-details-core-sidebar-drawer\\\">\\n\\n                <div info-drawer-buttons>\\n                    <md-icon (click)=\\\"toggleHeaderContent()\\\">clear</md-icon>\\n                </div>\\n\\n                <adf-info-drawer-tab label=\\\"Activity\\\">\\n                    <div class=\\\"assignment-container\\\" *ngIf=\\\"showAssignee\\\">\\n                        <adf-people-search\\n                        (searchPeople)=\\\"searchUser($event)\\\"\\n                        (success)=\\\"assignTaskToUser($event)\\\"\\n                        (closeSearch)=\\\"onCloseSearch()\\\"\\n                        [results]=\\\"peopleSearch$\\\">\\n                            <ng-container people-search-title>{{ 'TASK_DETAILS.LABELS.ADD_ASSIGNEE' | translate }}</ng-container>\\n                            <ng-container people-search-action-label>{{ 'PEOPLE.ADD_ASSIGNEE' | translate }}</ng-container>\\n                        </adf-people-search>\\n                    </div>\\n                    <adf-task-header\\n                        [class]=\\\"getTaskHeaderViewClass()\\\"\\n                        [taskDetails]=\\\"taskDetails\\\"\\n                        [formName]=\\\"taskFormName\\\"\\n                        (claim)=\\\"onClaimTask($event)\\\">\\n                    </adf-task-header>\\n                    <adf-people *ngIf=\\\"showInvolvePeople\\\" #people\\n                        [iconImageUrl]=\\\"peopleIconImageUrl\\\"\\n                        [people]=\\\"taskPeople\\\"\\n                        [readOnly]=\\\"readOnlyForm\\\"\\n                        [taskId]=\\\"taskDetails.id\\\">\\n                    </adf-people>\\n                </adf-info-drawer-tab>\\n\\n                <adf-info-drawer-tab label=\\\"Details\\\">\\n                    <md-card *ngIf=\\\"showComments\\\">\\n                        <md-card-content>\\n                            <adf-comments #activiticomments\\n                                [readOnly]=\\\"readOnlyForm\\\"\\n                                [taskId]=\\\"taskDetails.id\\\">\\n                            </adf-comments>\\n                            </md-card-content>\\n                    </md-card>\\n                </adf-info-drawer-tab>\\n\\n            </adf-info-drawer>\\n\\n            <div *ngIf=\\\"showHeaderContent\\\" class=\\\"adf-task-details-core-sidebar-checklist\\\">\\n                <div *ngIf=\\\"showChecklist\\\">\\n                    <adf-checklist #activitichecklist\\n                        [readOnly]=\\\"readOnlyForm\\\"\\n                        [taskId]=\\\"taskDetails.id\\\"\\n                        [assignee]=\\\"taskDetails?.assignee?.id\\\"\\n                        (checklistTaskCreated)=\\\"onChecklistTaskCreated($event)\\\"\\n                        (checklistTaskDeleted)=\\\"onChecklistTaskDeleted($event)\\\">\\n                    </adf-checklist>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <dialog class=\\\"mdl-dialog error-dialog\\\" #errorDialog>\\n        <div class=\\\"mdl-dialog__content\\\">\\n            <h3>{{'TASK_DETAILS.ERROR.TITLE'|translate}}</h3>\\n            <p>{{'TASK_DETAILS.ERROR.DESCRIPTION'|translate}}</p>\\n            <button type=\\\"button\\\" class=\\\"mdl-button\\\" (click)=\\\"closeErrorDialog()\\\">{{'TASK_DETAILS.ERROR.CLOSE'|translate}}</button>\\n        </div>\\n    </dialog>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-details.component.html\n// module id = 592\n// module chunks = 3","module.exports = \"<div class=\\\"menu-container\\\">\\n    <md-list>\\n        <md-list-item (click)=\\\"selectFilter(filter)\\\" *ngFor=\\\"let filter of filters\\\"\\n                      class=\\\"adf-filters__entry\\\" [class.active]=\\\"currentFilter === filter\\\">\\n            <md-icon *ngIf=\\\"hasIcon\\\" mdListIcon class=\\\"adf-filters__entry-icon\\\">assignment</md-icon>\\n            <span mdLine [attr.data-automation-id]=\\\"filter.name + '_filter'\\\">{{filter.name}}</span>\\n        </md-list-item>\\n    </md-list>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-filters.component.html\n// module id = 593\n// module chunks = 3","module.exports = \"<md-card *ngIf=\\\"taskDetails\\\" class=\\\"adf-card-container\\\">\\n    <md-card-content>\\n        <adf-card-view [properties]=\\\"properties\\\" [editable]=\\\"!isCompleted()\\\"></adf-card-view>\\n    </md-card-content>\\n\\n    <md-card-actions *ngIf=\\\"!isAssignedToMe()\\\" class=\\\"adf-controls\\\">\\n        <button md-button data-automation-id=\\\"header-claim-button\\\" id=\\\"claim-task\\\" (click)=\\\"claimTask(taskDetails.id)\\\" class=\\\"adf-claim-controls\\\">{{ 'TASK_DETAILS.BUTTON.CLAIM' | translate }}\\n        </button>\\n    </md-card-actions>\\n</md-card>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-header.component.html\n// module id = 594\n// module chunks = 3","module.exports = \"<div *ngIf=\\\"!requestNode\\\">{{ 'TASK_FILTERS.MESSAGES.NONE' | translate }}</div>\\n<div *ngIf=\\\"requestNode\\\">\\n    <div>\\n        <adf-datatable\\n            [data]=\\\"data\\\"\\n            [loading]=\\\"isLoading\\\"\\n            (rowClick)=\\\"onRowClick($event)\\\">\\n            <loading-content-template>\\n                <ng-template>\\n                    <!--Add your custom loading template here-->\\n                    <md-progress-spinner\\n                    class=\\\"adf-task-list-loading-margin\\\"\\n                    [color]=\\\"'primary'\\\"\\n                    [mode]=\\\"'indeterminate'\\\">\\n                    </md-progress-spinner>\\n                </ng-template>\\n            </loading-content-template>\\n            <no-content-template>\\n                <!--Add your custom empty template here-->\\n                <ng-template>\\n                    <div class=\\\"no-content-message\\\">\\n                        {{ 'TASK_LIST.MESSAGES.NONE' | translate }}\\n                    </div>\\n                </ng-template>\\n            </no-content-template>\\n        </adf-datatable>\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/tasklist.component.html\n// module id = 595\n// module chunks = 3","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent the details of a task.\n *\n *\n * @returns {TaskDetailsModel} .\n */\nimport { User } from './user.model';\n\nexport class TaskDetailsModel {\n    id: string;\n    name: string;\n    assignee: User;\n    priority: number;\n    adhocTaskCanBeReassigned: number;\n    category: string;\n    created: string;\n    description: string;\n    dueDate: string;\n    duration: string;\n    endDate: string;\n    executionId: string;\n    formKey: string;\n    initiatorCanCompleteTask: boolean;\n    managerOfCandidateGroup: boolean;\n    memberOfCandidateGroup: boolean;\n    memberOfCandidateUsers: boolean;\n    involvedPeople: User [];\n    parentTaskId: string;\n    parentTaskName: string;\n    processDefinitionCategory: string;\n    processDefinitionDeploymentId: string;\n    processDefinitionDescription: string;\n    processDefinitionId: string;\n    processDefinitionKey: string;\n    processDefinitionName: string;\n    processDefinitionVersion: number = 0;\n    processInstanceId: string;\n    processInstanceName: string;\n    processInstanceStartUserId: string;\n    taskDefinitionKey: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.priority = obj.priority;\n            this.assignee = obj.assignee ? new User(obj.assignee) : null;\n            this.adhocTaskCanBeReassigned = obj.adhocTaskCanBeReassigned;\n            this.category = obj.category || null;\n            this.created = obj.created || null;\n            this.description = obj.description || null;\n            this.dueDate = obj.dueDate || null;\n            this.duration = obj.duration || null;\n            this.endDate = obj.endDate || null;\n            this.executionId = obj.executionId || null;\n            this.formKey = obj.formKey || null;\n            this.initiatorCanCompleteTask = !!obj.initiatorCanCompleteTask;\n            this.managerOfCandidateGroup = !!obj.managerOfCandidateGroup;\n            this.memberOfCandidateGroup = !!obj.memberOfCandidateGroup;\n            this.memberOfCandidateUsers = !!obj.memberOfCandidateUsers;\n            this.involvedPeople = obj.involvedPeople;\n            this.parentTaskId = obj.parentTaskId || null;\n            this.parentTaskName = obj.parentTaskName || null;\n            this.processDefinitionCategory = obj.processDefinitionCategory || null;\n            this.processDefinitionDeploymentId = obj.processDefinitionDeploymentId || null;\n            this.processDefinitionDescription = obj.processDefinitionDescription || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionVersion = obj.processDefinitionVersion || 0;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processInstanceName = obj.processInstanceName || null;\n            this.processInstanceStartUserId = obj.processInstanceStartUserId || null;\n            this.taskDefinitionKey = obj.taskDefinitionKey || null;\n        }\n    }\n\n    getFullName(): string {\n        let fullName: string = '';\n\n        if (this.assignee) {\n            let firstName: string = this.assignee.firstName ? this.assignee.firstName : '';\n            let lastName: string = this.assignee.lastName ? this.assignee.lastName : '';\n            fullName = `${firstName} ${lastName}`;\n        }\n\n        return fullName.trim();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/task-details.model.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/comment-list.component.scss\n// module id = 673\n// module chunks = 3","module.exports = \".adf-create-attachment {\\n  display: inline-block;\\n  line-height: 0px;\\n  vertical-align: middle; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/create-task-attachment.component.scss\n// module id = 674\n// module chunks = 3","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/people-list.component.scss\n// module id = 675\n// module chunks = 3","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/people-search.component.scss\n// module id = 676\n// module chunks = 3","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/people.component.scss\n// module id = 677\n// module chunks = 3","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/start-task.component.scss\n// module id = 678\n// module chunks = 3","module.exports = \"adf-datatable /deep/ th span {\\n  color: #232323; }\\n\\nadf-datatable /deep/ .data-cell {\\n  cursor: pointer !important; }\\n\\n.adf-attachment-list-loading-margin {\\n  margin-left: calc((100% - 100px) / 2);\\n  margin-right: calc((100% - 100px) / 2); }\\n\\n.adf-empty-list-header {\\n  height: 32px;\\n  opacity: 0.26;\\n  font-family: Muli, Helvetica, Arial, sans-serif;\\n  font-size: 24px;\\n  line-height: 1.33;\\n  letter-spacing: -1px;\\n  color: #000000; }\\n\\n.adf-empty-list-drag_drop {\\n  height: 56px;\\n  opacity: 0.54;\\n  font-family: Muli, Helvetica, Arial, sans-serif;\\n  font-size: 56px;\\n  line-height: 1;\\n  letter-spacing: -2px;\\n  color: #000000;\\n  margin-top: 40px; }\\n\\n.adf-empty-list__any-files-here-to-add {\\n  height: 24px;\\n  opacity: 0.54;\\n  font-family: Muli, Helvetica, Arial, sans-serif;\\n  font-size: 16px;\\n  line-height: 1.5;\\n  letter-spacing: -0.4px;\\n  color: #000000;\\n  margin-top: 17px; }\\n\\n.adf-empty-list__empty_doc_lib {\\n  width: 565px;\\n  height: 161px;\\n  object-fit: contain;\\n  margin-top: 17px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/task-attachment-list.component.scss\n// module id = 679\n// module chunks = 3","module.exports = \":host {\\n  width: 100%; }\\n\\n.error-dialog h3 {\\n  margin: 16px 0; }\\n\\n.activiti-task-details__header {\\n  align-self: flex-end;\\n  display: flex;\\n  font-size: 24px;\\n  font-weight: 300;\\n  line-height: normal;\\n  overflow: hidden;\\n  margin: 8px 0 16px 0;\\n  cursor: pointer;\\n  user-select: none;\\n  -moz-user-select: none;\\n  -webkit-user-select: none;\\n  -ms-user-select: none; }\\n\\n.activiti-task-details__action-button {\\n  text-transform: uppercase; }\\n\\nadf-people > > > .assignment-top-container {\\n  background-color: #fff; }\\n\\n.assignment-container {\\n  background: #fff;\\n  border: 1px solid #e1e1e1;\\n  padding: 10px 20px;\\n  width: auto; }\\n\\nadf-task-header.assign-edit-view /deep/ adf-card-view /deep/ .adf-property[data-automation-id=\\\"header-assignee\\\"] {\\n  display: none; }\\n\\n.adf-task-details-header {\\n  display: flex;\\n  justify-content: space-between; }\\n  .adf-task-details-header-toggle {\\n    position: relative;\\n    top: 10px;\\n    margin-right: 2px;\\n    height: 23px;\\n    cursor: pointer;\\n    user-select: none;\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none; }\\n\\n.adf-task-details-core {\\n  display: flex;\\n  justify-content: space-between; }\\n  .adf-task-details-core-sidebar-drawer {\\n    margin-left: 10px; }\\n  .adf-task-details-core-sidebar-checklist {\\n    margin-top: 30px;\\n    padding-left: 20px;\\n    padding-right: 20px; }\\n    .adf-task-details-core-sidebar-checklist /deep/ #checklist-none-message {\\n      margin-top: 10px;\\n      color: rgba(0, 0, 0, 0.5); }\\n    .adf-task-details-core-sidebar-checklist /deep/ .activiti-label.mdl-badge[data-badge]:after {\\n      margin-top: 9px;\\n      right: -29px; }\\n    .adf-task-details-core-sidebar-checklist /deep/ .activiti-label.mdl-badge[data-badge] + div.icon {\\n      float: right; }\\n    .adf-task-details-core-sidebar-checklist /deep/ .menu-container li.mdl-list {\\n      padding: 0; }\\n    .adf-task-details-core-sidebar-checklist /deep/ .menu-container li.mdl-list__item {\\n      padding: 0;\\n      min-height: auto; }\\n      .adf-task-details-core-sidebar-checklist /deep/ .menu-container li.mdl-list__item .mdl-chip {\\n        width: 100%; }\\n        .adf-task-details-core-sidebar-checklist /deep/ .menu-container li.mdl-list__item .mdl-chip button {\\n          float: right;\\n          position: relative;\\n          top: 4px; }\\n  .adf-task-details-core-form {\\n    flex-grow: 1; }\\n    .adf-task-details-core-form /deep/ .adf-form-debug-container {\\n      padding: 20px 0 0 0; }\\n      .adf-task-details-core-form /deep/ .adf-form-debug-container .mat-slide-toggle {\\n        float: right; }\\n        .adf-task-details-core-form /deep/ .adf-form-debug-container .mat-slide-toggle + div {\\n          background-color: black;\\n          padding: 20px;\\n          clear: both;\\n          margin-top: 30px;\\n          color: white; }\\n    .adf-task-details-core-form /deep/ .mat-tab-label {\\n      flex-grow: 1; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/task-details.component.scss\n// module id = 680\n// module chunks = 3","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/task-filters.component.scss\n// module id = 681\n// module chunks = 3","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./ng2-activiti-tasklist/src/components/task-header.component.scss\n// module id = 682\n// module chunks = 3","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent the app definition.\n *\n *\n * @returns {AppDefinitionRepresentationModel} .\n */\nexport class AppDefinitionRepresentationModel {\n    defaultAppId: string;\n    deploymentId: string;\n    name: string;\n    description: string;\n    theme: string;\n    icon: string;\n    id: number;\n    modelId: number;\n    tenantId: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.defaultAppId = obj.defaultAppId ? obj.defaultAppId : null;\n            this.deploymentId = obj.deploymentId ? obj.deploymentId  : null;\n            this.name = obj.name ? obj.name  : null;\n            this.description = obj.description ? obj.description  : null;\n            this.theme = obj.theme ? obj.theme  : null;\n            this.icon = obj.icon ? obj.icon  : null;\n            this.id = obj.id ? obj.id  : null;\n            this.modelId = obj.modelId ? obj.modelId  : null;\n            this.tenantId = obj.tenantId ? obj.tenantId  : null;\n        }\n    }\n}\n\n/**\n *\n * This object represent the parameters to filter a filter.\n *\n *\n * @returns {FilterParamsModel} .\n */\nexport class FilterParamsModel {\n    id: string;\n    name: string;\n    index: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.index = obj.index;\n        }\n    }\n}\n\n/**\n *\n * This object represent the filter.\n *\n *\n * @returns {FilterRepresentationModel} .\n */\nexport class FilterRepresentationModel {\n    id: string;\n    appId: string;\n    name: string;\n    recent: boolean;\n    icon: string;\n    filter: FilterParamRepresentationModel;\n    index: number;\n    landingTaskId: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = new FilterParamRepresentationModel(obj.filter);\n            this.index = obj.index;\n            this.landingTaskId = obj.landingTaskId;\n        }\n    }\n\n    hasFilter() {\n        return this.filter ? true : false;\n    }\n}\n\n/**\n *\n * This object represent the parameters of a filter.\n *\n *\n * @returns {FilterParamRepresentationModel} .\n */\nexport class FilterParamRepresentationModel {\n    processDefinitionId: string;\n    processDefinitionKey: string;\n    name: string;\n    state: string;\n    sort: string;\n    assignment: string;\n    dueAfter: Date;\n    dueBefore: Date;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.name = obj.name || null;\n            this.state = obj.state || null;\n            this.sort = obj.sort || null;\n            this.assignment = obj.assignment || null;\n            this.dueAfter = obj.dueAfter || null;\n            this.dueBefore = obj.dueBefore || null;\n        }\n    }\n}\n\nexport class TaskQueryRequestRepresentationModel {\n    appDefinitionId: string;\n    processInstanceId: string;\n    processDefinitionId: string;\n    processDefinitionKey: string;\n    text: string;\n    assignment: string;\n    state: string;\n    start: string;\n    sort: string;\n    page: number;\n    size: number;\n    landingTaskId: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.appDefinitionId = obj.appDefinitionId || null;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.text = obj.text || null;\n            this.assignment = obj.assignment || null;\n            this.state = obj.state || null;\n            this.start = obj.start || null;\n            this.sort = obj.sort || null;\n            this.page = obj.page || 0;\n            this.size = obj.size || 25;\n            this.landingTaskId = obj.landingTaskId || '';\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/filter.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent the user.\n *\n *\n * @returns {User} .\n */\n\nexport class User {\n    id: number;\n    email: string;\n    firstName: string;\n    lastName: string;\n    userImage: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id;\n            this.email = obj.email || null;\n            this.firstName = obj.firstName || null;\n            this.lastName = obj.lastName || null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/src/models/user.model.ts","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./comment-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/comment-list.component.scss\n// module id = 756\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./create-task-attachment.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/create-task-attachment.component.scss\n// module id = 757\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./people-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/people-list.component.scss\n// module id = 758\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./people-search.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/people-search.component.scss\n// module id = 759\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./people.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/people.component.scss\n// module id = 760\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./start-task.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/start-task.component.scss\n// module id = 761\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./task-attachment-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-attachment-list.component.scss\n// module id = 762\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./task-details.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-details.component.scss\n// module id = 763\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./task-filters.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-filters.component.scss\n// module id = 764\n// module chunks = 3","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./task-header.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ng2-activiti-tasklist/src/components/task-header.component.scss\n// module id = 765\n// module chunks = 3","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatePipe } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MdAutocompleteModule, MdButtonModule, MdCardModule, MdDatepickerModule, MdGridListModule,\n    MdIconModule, MdInputModule, MdNativeDateModule, MdProgressSpinnerModule, MdRippleModule, MdSelectModule } from '@angular/material';\nimport { ActivitiFormModule } from 'ng2-activiti-form';\nimport { CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\nimport { DataTableModule } from 'ng2-alfresco-datatable';\nimport { PeopleService } from './src/services/people.service';\nimport { ProcessUploadService } from './src/services/process-upload.service';\nimport { TaskListService } from './src/services/tasklist.service';\n\nimport { AppsListComponent } from './src/components/apps-list.component';\nimport { ChecklistComponent } from './src/components/checklist.component';\nimport { CommentListComponent } from './src/components/comment-list.component';\nimport { CommentsComponent } from './src/components/comments.component';\nimport { AttachmentComponent } from './src/components/create-task-attachment.component';\nimport { NoTaskDetailsTemplateDirective } from './src/components/no-task-detail-template.directive';\nimport { PeopleListComponent } from './src/components/people-list.component';\nimport { PeopleSearchActionLabelDirective, PeopleSearchComponent, PeopleSearchTitleDirective } from './src/components/people-search.component';\nimport { PeopleComponent } from './src/components/people.component';\nimport { StartTaskComponent } from './src/components/start-task.component';\nimport { TaskAttachmentListComponent } from './src/components/task-attachment-list.component';\nimport { TaskAuditDirective } from './src/components/task-audit.directive';\nimport { TaskDetailsComponent } from './src/components/task-details.component';\nimport { TaskFiltersComponent } from './src/components/task-filters.component';\nimport { TaskHeaderComponent } from './src/components/task-header.component';\nimport { TaskListComponent } from './src/components/tasklist.component';\n\nexport {AppsListComponent } from './src/components/apps-list.component';\nexport {TaskListComponent } from './src/components/tasklist.component';\nexport {ChecklistComponent } from './src/components/checklist.component';\nexport {CommentsComponent } from './src/components/comments.component';\nexport {TaskAttachmentListComponent} from './src/components/task-attachment-list.component';\nexport {PeopleComponent } from './src/components/people.component';\nexport {TaskHeaderComponent } from './src/components/task-header.component';\nexport {NoTaskDetailsTemplateDirective } from './src/components/no-task-detail-template.directive';\nexport {TaskFiltersComponent } from './src/components/task-filters.component';\nexport {TaskDetailsComponent } from './src/components/task-details.component';\nexport {TaskAuditDirective } from './src/components/task-audit.directive';\nexport {StartTaskComponent } from './src/components/start-task.component';\nexport {PeopleSearchComponent, PeopleSearchTitleDirective } from './src/components/people-search.component';\nexport {AttachmentComponent } from './src/components/create-task-attachment.component';\nexport {PeopleListComponent } from './src/components/people-list.component';\nexport {CommentListComponent } from './src/components/comment-list.component';\n\nexport { TaskListService }  from './src/services/tasklist.service';\nexport { PeopleService }  from './src/services/people.service';\nexport { ProcessUploadService }  from './src/services/process-upload.service';\n\n// Old Deprecated export\nimport {AppsListComponent as ActivitiApps } from './src/components/apps-list.component';\nimport {ChecklistComponent as ActivitiChecklist } from './src/components/checklist.component';\nimport {CommentsComponent as ActivitiComments } from './src/components/comments.component';\nimport {AttachmentComponent as ActivitiCreateTaskAttachmentComponent } from './src/components/create-task-attachment.component';\nimport {NoTaskDetailsTemplateDirective as NoTaskDetailsTemplateComponent } from './src/components/no-task-detail-template.directive';\nimport {PeopleListComponent as PeopleList } from './src/components/people-list.component';\nimport {PeopleSearchComponent as ActivitiPeopleSearch } from './src/components/people-search.component';\nimport {PeopleComponent as ActivitiPeople } from './src/components/people.component';\nimport {StartTaskComponent as ActivitiStartTaskButton } from './src/components/start-task.component';\nimport {TaskDetailsComponent as ActivitiTaskDetails } from './src/components/task-details.component';\nimport {TaskFiltersComponent as ActivitiFilters } from './src/components/task-filters.component';\nimport {TaskHeaderComponent as ActivitiTaskHeader } from './src/components/task-header.component';\nimport {TaskListComponent as ActivitiTaskList } from './src/components/tasklist.component';\nimport {PeopleService as ActivitiPeopleService } from './src/services/people.service';\nimport {TaskListService as ActivitiTaskListService } from './src/services/tasklist.service';\nexport {AppsListComponent as ActivitiApps} from './src/components/apps-list.component';\nexport {ChecklistComponent as ActivitiChecklist} from './src/components/checklist.component';\nexport {CommentsComponent as ActivitiComments} from './src/components/comments.component';\nexport {AttachmentComponent as ActivitiCreateTaskAttachmentComponent } from './src/components/create-task-attachment.component';\nexport {NoTaskDetailsTemplateDirective as NoTaskDetailsTemplateComponent } from './src/components/no-task-detail-template.directive';\nexport {PeopleListComponent as PeopleList } from './src/components/people-list.component';\nexport {PeopleSearchComponent as ActivitiPeopleSearch } from './src/components/people-search.component';\nexport {PeopleComponent as ActivitiPeople} from './src/components/people.component';\nexport {StartTaskComponent as ActivitiStartTaskButton } from './src/components/start-task.component';\nexport {TaskDetailsComponent as ActivitiTaskDetails } from './src/components/task-details.component';\nexport {TaskFiltersComponent as ActivitiFilters } from './src/components/task-filters.component';\nexport {TaskHeaderComponent as ActivitiTaskHeader} from './src/components/task-header.component';\nexport {TaskListComponent as ActivitiTaskList } from './src/components/tasklist.component';\nexport {PeopleService as ActivitiPeopleService } from './src/services/people.service';\nexport {TaskListService as ActivitiTaskListService } from './src/services/tasklist.service';\n\nexport * from './src/models/comment.model';\nexport * from './src/models/filter.model';\nexport * from './src/models/icon.model';\nexport * from './src/models/user.model';\nexport * from './src/models/task-details.model';\nexport * from './src/models/task-details.event';\nexport * from './src/models/user-event.model';\nexport * from './src/models/start-task.model';\n\nexport const ACTIVITI_TASKLIST_DIRECTIVES: any[] = [\n    NoTaskDetailsTemplateDirective,\n    AppsListComponent,\n    TaskFiltersComponent,\n    TaskListComponent,\n    TaskDetailsComponent,\n    TaskAuditDirective,\n    ChecklistComponent,\n    CommentsComponent,\n    PeopleComponent,\n    TaskHeaderComponent,\n    StartTaskComponent,\n    PeopleSearchComponent,\n    PeopleSearchTitleDirective,\n    PeopleSearchActionLabelDirective,\n    TaskAttachmentListComponent,\n    AttachmentComponent,\n    PeopleListComponent,\n    CommentListComponent,\n\n// Old Deprecated export\n    ActivitiApps,\n    ActivitiTaskList,\n    ActivitiTaskDetails,\n    ActivitiFilters,\n    NoTaskDetailsTemplateComponent,\n    ActivitiChecklist,\n    ActivitiComments,\n    ActivitiPeople,\n    ActivitiTaskHeader,\n    ActivitiStartTaskButton,\n    ActivitiPeopleSearch,\n    ActivitiCreateTaskAttachmentComponent,\n    PeopleList\n];\n\nexport const ACTIVITI_TASKLIST_PROVIDERS: any[] = [\n    TaskListService,\n    PeopleService,\n    ProcessUploadService,\n\n    // Old Deprecated export\n    ActivitiTaskListService,\n    ActivitiPeopleService\n];\n\n@NgModule({\n    imports: [\n        CoreModule,\n        DataTableModule,\n        ActivitiFormModule,\n        MdIconModule,\n        MdButtonModule,\n        MdInputModule,\n        MdCardModule,\n        MdProgressSpinnerModule,\n        MdDatepickerModule,\n        MdNativeDateModule,\n        MdSelectModule,\n        MdAutocompleteModule,\n        MdGridListModule,\n        MdRippleModule\n    ],\n    declarations: [\n        ...ACTIVITI_TASKLIST_DIRECTIVES\n    ],\n    providers: [\n        ...ACTIVITI_TASKLIST_PROVIDERS,\n        DatePipe,\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'ng2-activiti-tasklist',\n                source: 'assets/ng2-activiti-tasklist'\n            }\n        }\n    ],\n    exports: [\n        ...ACTIVITI_TASKLIST_DIRECTIVES,\n        MdIconModule,\n        MdButtonModule\n    ]\n})\nexport class ActivitiTaskListModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ActivitiTaskListModule,\n            providers: [\n                ...ACTIVITI_TASKLIST_PROVIDERS\n            ]\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ng2-activiti-tasklist/index.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/forms\"\n// module id = 9\n// module chunks = 1 2 3 5 10 14"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjDA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAUA;AAUA;AAAA;AAJA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAvDA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AANA;AANA;AACA;AACA;AACA;AACA;AAYA;AAVA;AAAA;;;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AASA;AAuBA;AAAA;AACA;AACA;AAnjKA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAlBA;AALA;AACA;AACA;AACA;AACA;AAwBA;AAvBA;AAAA;;;;;;;;;AC5BA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AASA;AA2BA;AAAA;AACA;AAtBA;AAGA;AAGA;AAGA;AAGA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAxFA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAlBA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AA4BA;AA3BA;AAAA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAGA;AAAA;AAIA;AAAA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAjBA;AADA;AAKA;AAJA;AAAA;;;;;;;;;ACrBA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAGA;AAKA;AAAA;AACA;AALA;AAEA;AAIA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAtjBA;AADA;AAMA;AALA;AAAA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;AAeA;;AAWA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;;;;;;;;;;AC1BA;;;;;;;;;;;;;;;AAejBA;;;;;;;;;;;;;;;AAeA;;AASA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjBA;;;;;;;;;;AC1BA;;;;;;;;;;;;;;;AAeA;;AASA;AAIA;AAHA;AACA;AAGA;AACA;AACA;AACA;AAAA;AARA;;;;;;;;ACxBA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AAIA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AApEA;AADA;AAGA;AAFA;AAAA;;;;;;;;;ACxBA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AASA;AAoBA;AAAA;AAdA;AAGA;AAGA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjFA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAZA;AANA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAsFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACnHA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AA+FA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAvFA;AAMA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AAIA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AA1TA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAjFA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgGA;AA/FA;AAAA;;;;;;;;;;;AC/CA;;;;;;;;;;;;;;;AAeA;;AAIA;AAaA;AAVA;AAWA;AACA;AAVA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAMA;AACA;AACA;AACA;AAAA;AApBA;;;;;;;;ACnBA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;;;;;;;;;;;;;;;AAeA;;AASA;AAKA;AACA;AACA;AACA;AACA;AAAA;AATA;;;;;;;;;;ACxBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAGA;AACA;AAQA;AAoCA;AAAA;AAAA;AAzpBA;AANA;AACA;AACA;AACA;AACA;AACA;AAqCA;AApCA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAUA;AAmCA;AAAA;AAAA;AA7BA;AAMA;AAGA;AAGA;AAOA;AAWA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjHA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AArBA;AANA;AACA;AACA;AACA;AACA;AACA;AAoCA;AAnCA;AAAA;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAGA;AACA;AAOA;AAyBA;AAAA;AAAA;AAAA;AAnBA;AAGA;AAEA;AAOA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AA9FA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AA0BA;AAzBA;AAAA;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAOA;AAWA;AAAA;AALA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAnCA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AAYA;AAXA;AAAA;;;;;;;;;;;ACzBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAMA;AAKA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AATA;AADA;;AACA;AAHA;AAHA;AACA;AACA;AAOA;AANA;AAAA;;;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAWA;AANA;AAiBA;AAGA;AAGA;AAgDA;AA5CA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AA/DA;AAAA;AAAA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAjBA;AANA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAGA;AAEA;AAUA;AA2BA;AAAA;AAAA;AACA;AAzBA;AAGA;AAGA;AAGA;AAKA;AAYA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AA7HA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAfA;AALA;AACA;AACA;AACA;AACA;AA4BA;AA3BA;AAAA;;;;;;;;;;;AClCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAWA;AAoCA;AAAA;AACA;AACA;AApCA;AAMA;AAGA;AAGA;AAEA;AAEA;AAqBA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA7HA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAdA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAqCA;AApCA;AAAA;;;;;;;;;;;ACvCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAOA;AA8BA;AAAA;AAAA;AAxBA;AAGA;AAGA;AASA;AAOA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AArMA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AArBA;AALA;AACA;AACA;AACA;AACA;AA+BA;AA9BA;AAAA;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAOA;AAcA;AAAA;AACA;AAZA;AAMA;AAGA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAnEA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AAeA;AAdA;AAAA;;;;;;;;;AC3BA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAMA;AAmEA;AAAA;AAjCA;AAGA;AAGA;AAKA;AAGA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAlQA;AAAA;AAAA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAKA;AADA;;AACA;AAGA;AADA;;AACA;AAhDA;AALA;AACA;AACA;AACA;AACA;AAoEA;AAnEA;AAAA;;;;;;;;;AC/BA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;AASA;AAEA;AAiCA;AANA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAhFA;;;;;;;;AC1BA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;AASA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxBA;AAiCA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;AAqBA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA1BA;AAmCA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtBA;AAwBA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA9BA;;;;;;;;;;ACzIA;;;;;;;;;;;;;;;AAeA;;AAUA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAfA;;;;;;;;ACzeA;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAwCA;AAAA;AASA;AARA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AATA;AAtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AC/LA;;;;;","sourceRoot":""}